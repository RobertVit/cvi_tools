REPORT NOTE_2891455.

* Generated by SAP_LOCAL_DOWNPORT_ASSISTANT Version 7.42 on 04.03.2020 with option ALL

* The individual coding starts at 'FORM update_01.' ( line 4.914 )
* Review FORM update & FORM genview to see a complete list of changed objects

* Generation done for objects found in one of the following transports:
* E18K186913
* E18K187119
* E18K187273
* E18K187392
* E18K188822

CONSTANTS: activation_mode VALUE '2',      "1 = one step, 2 = two step
           myrepid         TYPE progname VALUE 'SAP_LOCAL_DOWNPORT_ASSISTANT',
           step3_object    TYPE sy-lisel VALUE 'Will be processed in step 3 (GENVIEW)', "#EC NOTEXT
           sapbasis        TYPE sy-saprl VALUE '750 '.  "SAP_BASIS release for which the report was generated; in lower releases it might get problems

DATA: approved_logical_objects TYPE string. "filled in initialization.

DATA: BEGIN OF gc_objtext,
        translation       TYPE ddtext VALUE 'Translation',  "#EC NOTEXT
        blacklisted       TYPE ddtext VALUE 'Blacklisted (note 2249880)', "#EC NOTEXT
        longtext          TYPE ddtext VALUE '. Read Long Text!', "#EC NOTEXT
        "DOCU
        docu_status       TYPE ddtext VALUE 'Documentation Status', "#EC NOTEXT
        "REPT
        report_title      TYPE ddtext VALUE 'Report Title', "#EC NOTEXT
        report_text       TYPE ddtext VALUE 'Report Texts', "#EC NOTEXT
        report_text_title TYPE ddtext VALUE 'Report Texts/Title', "#EC NOTEXT
        ddic_ref          TYPE ddtext VALUE '<DDIC Reference>', "#EC NOTEXT
        "TABL
        database_table    TYPE ddtext VALUE 'Database Table', "#EC NOTEXT
        database_sadl     TYPE ddtext VALUE 'Database Table (SADL)', "#EC NOTEXT
        global_temp_table TYPE ddtext VALUE 'Global Temporary Table', "#EC NOTEXT
        idoc_segment      TYPE ddtext VALUE 'IDOC Segment Structure', "#EC NOTEXT
        structure         TYPE ddtext VALUE 'Structure',    "#EC NOTEXT
        append            TYPE ddtext VALUE 'Append',       "#EC NOTEXT
        frozen            TYPE ddtext VALUE 'Structure (frozen)', "#EC NOTEXT
        "INDX
        database_index    TYPE ddtext VALUE 'Database Index', "#EC NOTEXT
        extension_index   TYPE ddtext VALUE 'Extension Index', "#EC NOTEXT
        full_text_index   TYPE ddtext VALUE '(FTI)',        "#EC NOTEXT
        "VIEW
        ddlsqlview        TYPE ddtext VALUE 'DDL SQL View', "#EC NOTEXT
        ddlsource         TYPE ddtext VALUE 'DDL Source',   "#EC NOTEXT
        "TOBJ
        log_transp_obj    TYPE ddtext VALUE 'Definition of a Logical transport object', "#EC NOTEXT
        view_variant      TYPE ddtext VALUE 'Definition of a Maintenance Object (View Variant)', "#EC NOTEXT
        "METH
        amdp              TYPE ddtext VALUE 'Method (AMDP)', "#EC NOTEXT
        "CINC
        unit_test         TYPE ddtext VALUE 'Class Include (Unit Tests)', "#EC NOTEXT
        "REPS
        esh_modeler       TYPE ddtext VALUE 'Enterprise Search', "#EC NOTEXT
        "CUAD
        guititlelist      TYPE ddtext VALUE '- GUI Title List', "#EC NOTEXT
        guifunctionlist   TYPE ddtext VALUE '- GUI Function List', "#EC NOTEXT
        guistatus         TYPE ddtext VALUE '- GUI Status', "#EC NOTEXT
        "FUNC
        shlp_exit         TYPE ddtext VALUE 'Search Help Exit', "#EC NOTEXT
        "ECTD
        testdatavariant   TYPE ddtext VALUE '- Test Data Variant', "#EC NOTEXT
        "ENHO
        empty             TYPE ddtext VALUE 'Empty',        "#EC NOTEXT
        badi_impl         TYPE ddtext VALUE 'BADI Implementation', "#EC NOTEXT
        notfound          TYPE ddtext VALUE 'Not found',    "#EC NOTEXT
        unknown           TYPE ddtext VALUE 'Unknown',      "#EC NOTEXT
        section           TYPE ddtext VALUE 'Enh. Section', "#EC NOTEXT
        section_multi     TYPE ddtext VALUE 'Enh. Section (multiple)', "#EC NOTEXT
        point             TYPE ddtext VALUE 'Enh. Point',   "#EC NOTEXT
        point_multi       TYPE ddtext VALUE 'Enh. Point (multiple)', "#EC NOTEXT
        point_imp         TYPE ddtext VALUE 'Implicit Enh. Point', "#EC NOTEXT
        overwrite         TYPE ddtext VALUE 'Overwrite Exit', "#EC NOTEXT
        parameter         TYPE ddtext VALUE 'Parameter Enh.', "#EC NOTEXT
        "TABU
        imgtree           TYPE ddtext VALUE 'IMG Tree Structure', "#EC NOTEXT
        areamenu          TYPE ddtext VALUE 'Area Menu',    "#EC NOTEXT
        wagetype          TYPE ddtext VALUE 'Table Contents (Wagetype)', "#EC NOTEXT
        "DMEE [PT]
        dmee              TYPE ddtext VALUE 'DMEE',         "#EC NOTEXT
        dmeex             TYPE ddtext VALUE 'DMEE Extended', "#EC NOTEXT
        "STATUS
        done              TYPE ddtext VALUE 'Done',         "#EC NOTEXT
        marked            TYPE ddtext VALUE 'Marked',       "#EC NOTEXT
        invalid           TYPE ddtext VALUE 'Invalidated',  "#EC NOTEXT
        open              TYPE ddtext VALUE 'Open',         "#EC NOTEXT
      END OF gc_objtext.

TYPE-POOLS: seox, seoc, seok, seex, bcwbn, ststc, trmtd, trexe, scua, trlog.

TYPES: t_switch_id TYPE char30,   "sfw_switch_id does not exist in SAP_BASIS 640
       t_bfunction TYPE char30,  "sfw_bfunction does not exist in SAP_BASIS 640
       t_fuzzy_similarity(2) TYPE p DECIMALS 2, "DDFUZZY_SIMILARITY does not exist in SAP_BASIS 640
       BEGIN OF t_dd30v_new, autosuggest, fuzzy_search, fuzzy_similarity TYPE t_fuzzy_similarity, END OF t_dd30v_new,
*       t_sfw_switch TYPE sfw_switch,
*       BEGIN OF t_sfw_switch, switch_id  TYPE t_switch_id, version, author TYPE as4user, createdon TYPE as4date, changedby TYPE as4user, changedon TYPE as4date,
*                              x_combi, x_ddic, timestamp TYPE timestamp, switch_nr TYPE int2, END OF t_sfw_switch,  "SFW_SWITCH
       BEGIN OF t_bf_sw, switch_id TYPE t_switch_id, version, bfunction TYPE t_bfunction, no_check, END OF t_bf_sw, "SFW_BF_SW
       BEGIN OF t_sfw_package, switch_id TYPE t_switch_id, version, devclass TYPE devclass, enhname(30), END OF t_sfw_package, "SFW_PACKAGE
       BEGIN OF t_sfw_viewfield, viewname(30), fieldname(30), version, switch_id(30), END OF t_sfw_viewfield,
       BEGIN OF t_permission, client_pak(30), intf_name(30), err_sever(4), END OF t_permission,  "has to be in sync with structure permission
       BEGIN OF t_ddldependency, ddlname(40), objectname(30), state, objecttype(4), END OF t_ddldependency,
       BEGIN OF t_hrdsys_docu, line_content(5), tdformat TYPE tdformat, tdline TYPE tdline, END OF t_hrdsys_docu,  "HRDSYS_DOCU_ITAB
       t_molga TYPE char2, "MOLGA
       t_otype TYPE char5, "HRDSYS_OTYPE
       t_oname TYPE char20, "HRDSYS_ONAME
*      t_phio_objid TYPE sdok_docid, "XYAb
       BEGIN OF t_loio_h, id TYPE sdok_loid, otype TYPE sdok_prv_l, oname TYPE sdok_prv_l, molga TYPE sdok_prv_s, END OF t_loio_h,
       BEGIN OF t_loio, otype TYPE t_otype, molga TYPE t_molga, oname TYPE t_oname, END OF t_loio,
       BEGIN OF dd43v,typename(30),seckeyname(30),ddlanguage,seckeyunique,accessmode,kind,keydescription(80),END OF dd43v,
       BEGIN OF dd12fulltextinfo, full_text, langu_column(30), mime_type_col(30), mime_type(127),langu_detection(200),fast_preprocess,fuzzy_search_indx,search_only,
                update_mode(10),configuration,phrase_indx_ratio TYPE numc3,text_analysis,token_separators(50),END OF dd12fulltextinfo.

TYPES: BEGIN OF t_pak_projects, mandt TYPE mandt, project_guid TYPE sysuuid_x, project_id(24), short_text_en(40), short_text_de(40), inactive, fetch_date TYPE d, END OF t_pak_projects.

TYPES: BEGIN OF t_img_list,
         level      TYPE bmstnode-node_level,
         text       TYPE bmstnode-text,
         activity   TYPE cus_imgach-activity,
         tcode      TYPE cus_imgach-tcode,
         objecttype TYPE cus_actobj-objecttype,
         objectname TYPE cus_actobj-objectname,
         tcodeact   TYPE cus_actobj-tcode,
         extension  TYPE bmstnode-extension,
         switch     TYPE t_switch_id,
       END OF t_img_list.
TYPES: tt_dd05m       TYPE TABLE OF dd05m,
       tt_dd17v       TYPE TABLE OF dd17v,
       tt_dd26e       TYPE TABLE OF dd26e,
       tt_dd26v       TYPE TABLE OF dd26v,
       tt_dd27p       TYPE TABLE OF dd27p,
       tt_dd27v       TYPE TABLE OF dd27v,
       tt_dd28v       TYPE TABLE OF dd28v,
       tt_dd30v       TYPE TABLE OF dd30v,
       tt_dd30tv      TYPE TABLE OF dd30tv,
       tt_dd31v       TYPE TABLE OF dd31v,
       tt_dd32v       TYPE TABLE OF dd32v,
       tt_dd32p       TYPE TABLE OF dd32p,
       tt_dd33v       TYPE TABLE OF dd33v,
       tt_dd36m       TYPE TABLE OF dd36m,
       tt_dd42v       TYPE TABLE OF dd42v,
       tt_dd43v       TYPE TABLE OF dd43v,
       tt_e071k       TYPE TABLE OF e071k,
       tt_permission  TYPE TABLE OF t_permission,
       tt_hrdsys_docu TYPE TABLE OF t_hrdsys_docu,
       tt_bfunction   TYPE TABLE OF t_bfunction,
       tt_activity    TYPE TABLE OF t100o-activity,
       tt_tline       TYPE TABLE OF tline,
       tt_tstca       TYPE TABLE OF tstca,
       tt_langu       TYPE TABLE OF sylangu,
       tt_ltdxdata    TYPE TABLE OF ltdxdata,
       tt_ltdxt       TYPE TABLE OF ltdxt,
       tt_ltdxd       TYPE TABLE OF ltdxd,
       tt_sta         TYPE TABLE OF rsmpe_stat,
       tt_fun         TYPE TABLE OF rsmpe_funt,
       tt_men         TYPE TABLE OF rsmpe_men,
       tt_mtx         TYPE TABLE OF rsmpe_mnlt,
       tt_act         TYPE TABLE OF rsmpe_act,
       tt_but         TYPE TABLE OF rsmpe_but,
       tt_pfk         TYPE TABLE OF rsmpe_pfk,
       tt_set         TYPE TABLE OF rsmpe_staf,
       tt_doc         TYPE TABLE OF rsmpe_atrt,
       tt_tit         TYPE TABLE OF rsmpe_titt,
       tt_biv         TYPE TABLE OF rsmpe_buts,
       tt_dypara      TYPE TABLE OF rpy_dypara,
       tt_d022s       TYPE TABLE OF d022s,
       tt_bao6163     TYPE TABLE OF bao6163,
*       tt_img_tree    TYPE TABLE OF BMREF_TC.
       tt_img_tree    TYPE TABLE OF bmstnode,
       tt_img_list    TYPE TABLE OF t_img_list,
       tt_ttrees      TYPE TABLE OF ttrees.

TYPES: BEGIN OF ty_dd02l_new,   "new fields in DD02l (not yet SAPBASIS 731)
         is_gtt,
       END OF ty_dd02l_new.

DATA: gr_devclass           TYPE RANGE OF devclass,
      gr_domname            TYPE RANGE OF domname WITH HEADER LINE,
      gr_rollname           TYPE RANGE OF rollname,
      gr_tabname            TYPE RANGE OF tabname,  "structures and database tables
      gs_tabname            LIKE LINE  OF gr_tabname VALUE 'IEQ',
      gr_dbtabname          TYPE RANGE OF tabname,  "all database tables
      gr_dbviewname         TYPE RANGE OF viewname, "all database views
      gt_tabname            TYPE TABLE OF tabname,
      gr_fugrname           TYPE RANGE OF rs38l_area,
      gr_indexes            TYPE RANGE OF trobj_name,
      gr_indxtab            TYPE RANGE OF tabname,
      gr_indxname           TYPE RANGE OF indexid,
      gr_shlpname           TYPE RANGE OF shlpname WITH HEADER LINE,
      gr_enqname            TYPE RANGE OF enqname,
      gr_viewname           TYPE RANGE OF viewname,
      gr_ttypname           TYPE RANGE OF ttypename,
      gt_ttypname           TYPE TABLE OF ttypename,
      gr_guistatus          TYPE RANGE OF progname,
      gr_switchname         TYPE RANGE OF t_switch_id,
      gr_msg_class          TYPE RANGE OF msgid,
      gv_trkorr             TYPE trkorr,
      gt_trkorr             TYPE TABLE OF trkorr,
      gt_trkey              TYPE TABLE OF trkey,
      gv_translation,
      gv_abap_in_eclipse,
      gv_objects_with_snote_check TYPE string, "object types with delivery method Report/Snote
      gv_master_languages   TYPE string, "texts in those languages are always inserted, other languages only if they are installed
      gt_skipped_languages  TYPE TABLE OF sylangu,
      gv_repository_changed,
      gv_errors_occured,
      gv_unit_test,
      gv_mandt              TYPE symandt,
      gv_string             TYPE string,
      gv_uname              TYPE syuname,
      gv_langu              TYPE sylangu,
      gv_log_handle         TYPE balloghndl,
      gv_progname_rept      TYPE progname,
      mydevclass            TYPE devclass.

CONSTANTS: c_bal_object     TYPE balobj_d  VALUE 'SNOTE',
           c_bal_subobj     TYPE balsubobj VALUE space,
           c_bal_context    TYPE tabname   VALUE 'ADIR_KEY',
           c_include6       TYPE fieldname VALUE '.INCLU',  ".INCLUDE or .INCLU--AP or .INCLU-_BY
           c_crlf           TYPE abap_cr_lf VALUE cl_abap_char_utilities=>cr_lf,
           c_type_ref_to    TYPE datatype_d VALUE 'REF',
           c_memory_id(40)  VALUE myrepid,
           c_memory_pilot(40) VALUE '%UDO_PILOT_USERS',
           c_traceid        TYPE memoryid VALUE '%/UDO/LAST_OBJECT',
           c_logical_object VALUE 'L',
           c_internal       TYPE tadir-object VALUE 'ITAB'.

CONSTANTS: gc_report     TYPE text15    VALUE 'Report',     "#EC NOTEXT
           gc_mixed      LIKE gc_report VALUE 'Report/SNote', "#EC NOTEXT
           gc_local      LIKE gc_report VALUE 'Local',      "#EC NOTEXT
           gc_snote      LIKE gc_report VALUE 'SNote',      "#EC NOTEXT
           gc_workaround LIKE gc_report VALUE 'Workaround', "#EC NOTEXT
           gc_manual     LIKE gc_report VALUE 'Manual Instr. ', "#EC NOTEXT
           gc_bcset      LIKE gc_report VALUE 'Manual/BC-Set', "#EC NOTEXT
           gc_ignore     LIKE gc_report VALUE '-',          "#EC NOTEXT
           gc_generate   LIKE gc_report VALUE 'Generation', "#EC NOTEXT
           gc_suppack    LIKE gc_report VALUE 'Supp.Pack.', "#EC NOTEXT
           gc_dest_init  TYPE rfcdest VALUE 'MISSING INITIALIZATION'. "#EC NOTEXT

"the following texts are also hard coded in ZRB_UDO_ADJUST!!!!
CONSTANTS: gc_test_mode    TYPE string VALUE 'Running in Test Mode', "#EC NOTEXT
           gc_update_mode  TYPE string VALUE 'Running in Update Mode', "#EC NOTEXT
           gc_genview_mode TYPE string VALUE 'Executing Step Generation'. "#EC NOTEXT

CONSTANTS: BEGIN OF gc_dok,
             data_element    TYPE dok_id VALUE 'DE',
             dtel_suppl      TYPE dok_id VALUE 'DZ',
             independent     TYPE dok_id VALUE 'DT',
             message         TYPE dok_id VALUE 'NA',
             function        TYPE dok_id VALUE 'FU',
             class           TYPE dok_id VALUE 'CL',
             class_method    TYPE dok_id VALUE 'CO',
             class_attrib    TYPE dok_id VALUE 'CA',
             class_event     TYPE dok_id VALUE 'CE',
             class_type      TYPE dok_id VALUE 'CT',
             interface       TYPE dok_id VALUE 'IF',
             intf_method     TYPE dok_id VALUE 'IO',
             intf_attrib     TYPE dok_id VALUE 'IA',
             intf_event      TYPE dok_id VALUE 'IE',
             intf_type       TYPE dok_id VALUE 'IT',
             release_note    TYPE dok_id VALUE 'IN',
             general_text    TYPE dok_id VALUE 'TX',
             hyper_text      TYPE dok_id VALUE 'HY',   "DSYS
             auth_object     TYPE dok_id VALUE 'UO',
             extension_index TYPE dok_id VALUE 'XI',
             hrdsys          TYPE dok_id VALUE 'HR',    "only used in UDO
           END OF gc_dok.

DATA: akb_get_tadir   TYPE funcname VALUE 'AKB_GET_TADIR',  "#EC NOTEXT
      sadt_navigation TYPE memoryid VALUE 'SADT_NAVIGATION', "#EC NOTEXT
      show_genview.   "show parameter GENVIEW on generated report

DATA: g_custom_container TYPE REF TO cl_gui_custom_container,
      g_docking          TYPE REF TO cl_gui_docking_container,
      g_html_viewer      TYPE REF TO object.

CONSTANTS selection_screen_1900 TYPE sydynnr VALUE 1900.  "dummy for navigation
SELECTION-SCREEN BEGIN OF SCREEN 1900.                                    "1900
SELECTION-SCREEN BEGIN OF LINE.                                           "1900
SELECTION-SCREEN COMMENT  1(6)  testrun1 FOR FIELD testrun.               "1900
PARAMETERS testrun  RADIOBUTTON GROUP exec.                               "1900
SELECTION-SCREEN COMMENT 12(83) testrun2 FOR FIELD testrun.               "1900
SELECTION-SCREEN END OF LINE.                                             "1900
SELECTION-SCREEN BEGIN OF LINE.                                           "1900
SELECTION-SCREEN COMMENT  1(6)  update1  FOR FIELD update.                "1900
PARAMETERS update  RADIOBUTTON GROUP exec.                                "1900
SELECTION-SCREEN COMMENT 12(83) update2  FOR FIELD update.                "1900
SELECTION-SCREEN END OF LINE.                                             "1900
SELECTION-SCREEN BEGIN OF LINE.                                           "1900
SELECTION-SCREEN COMMENT  1(6)  genview1 FOR FIELD genview.               "1900
PARAMETERS genview  RADIOBUTTON GROUP exec.                               "1900
SELECTION-SCREEN COMMENT 12(83) genview2 FOR FIELD genview.               "1900
SELECTION-SCREEN END OF LINE.                                             "1900
SELECTION-SCREEN SKIP 1.                                                  "1900
SELECTION-SCREEN BEGIN OF LINE.                                           "1900
SELECTION-SCREEN COMMENT  1(6)  showlog1 FOR FIELD showlogs.              "1900
PARAMETERS showlogs  RADIOBUTTON GROUP exec.                              "1900
SELECTION-SCREEN COMMENT 12(83) showlog2 FOR FIELD showlogs.              "1900
SELECTION-SCREEN END OF LINE.                                             "1900
SELECTION-SCREEN BEGIN OF LINE.                                           "1900
SELECTION-SCREEN COMMENT  1(6) tse54ia FOR FIELD se54ia MODIF ID sup.     "1900
PARAMETERS se54ia AS CHECKBOX MODIF ID sup.                               "1900
SELECTION-SCREEN END OF LINE.                                             "1900
SELECTION-SCREEN BEGIN OF LINE.                                           "1900
SELECTION-SCREEN COMMENT  1(6) tse54im FOR FIELD se54im MODIF ID sup.     "1900
PARAMETERS se54im AS CHECKBOX MODIF ID sup.                               "1900
SELECTION-SCREEN END OF LINE.                                             "1900
SELECTION-SCREEN END OF SCREEN 1900.                                      "1900

DATA: c_ddic_ref  TYPE textpool-entry VALUE 'D_______.'.

INITIALIZATION.    "2/3
  CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
    EXPORTING
      tcode  = sy-tcode  "dummy for ATC, real check will happen in method lcl_wb=>init
    EXCEPTIONS
      ok     = 0
      OTHERS = 1.
  CHECK sy-subrc EQ 0.

  IF sy-repid NE myrepid.
    SELECT SINGLE devclass FROM tadir INTO mydevclass WHERE pgmid EQ 'R3TR' AND object EQ 'PROG' AND obj_name EQ sy-repid.
  ENDIF.
  TRANSLATE c_ddic_ref USING '_ '.

*  "Initialize texts for selection screen 1900                                "#EC NOTEXT   "1900
  testrun1 = 'Step 1'. "#EC NOTEXT                                            "1900
  testrun2 = 'Test Run'.                         "#EC NOTEXT      "1900
  update1  = 'Step 2'. "#EC NOTEXT                                            "1900
  update2  = 'Update & Activate'.                    "#EC NOTEXT  "1900
  genview1 = 'Step 3'. "#EC NOTEXT                                            "1900
  genview2 = 'Generate Maintenance Dialogs'.        "#EC NOTEXT   "1900
  showlog1 = 'Info'. "#EC NOTEXT                                            "1900
  showlog2 = 'Show Logs'. "#EC NOTEXT                                            "1900
  tse54im  = `Ignore message 'Perform adjustment first'`. "#EC NOTEXT             "1900
  tse54ia  = `Perform 'Generation of views' interactively`. "#EC NOTEXT             "1900

AT SELECTION-SCREEN OUTPUT.

  PERFORM selection_screen_output IN PROGRAM (sy-repid) IF FOUND.

  IF sy-dynnr EQ selection_screen_1900.
    CONCATENATE sy-repid '-' 'Note Implementation' INTO sy-lisel SEPARATED BY space. "#EC *    "1900
    SET TITLEBAR 'POP' OF PROGRAM 'SAPLKKBL' WITH sy-lisel.                                    "1900
    PERFORM show_instruction.
  ENDIF.
  IF sy-dynnr EQ '1800'.
    PERFORM show_help IN PROGRAM (myrepid) IF FOUND.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Form  bal_callback_ucomm
*&---------------------------------------------------------------------*
FORM bal_callback_ucomm CHANGING c_state TYPE bal_s_cbuc.   "#EC CALLED
  DATA: ls_msg      TYPE bal_s_msg,
        l_date(8),
        ls_tadir    TYPE adir_key,
        ls_limu_key TYPE bcwbn_limu_key.

  CASE c_state-ucomm.
    WHEN '%LONGTEXT' OR '&IC1'.
      CALL FUNCTION 'BAL_LOG_MSG_READ'
        EXPORTING
          i_s_msg_handle = c_state-list_msgh
        IMPORTING
          e_s_msg        = ls_msg
        EXCEPTIONS
          OTHERS         = 0.
      ls_tadir = ls_msg-context-value.
      MOVE-CORRESPONDING ls_tadir TO ls_limu_key.
      IF ls_msg-msgid EQ 'DO' AND ls_msg-msgno EQ '626'.
        "MESSAGE i626(do) WITH 'Click this message to view' 'detailed activation logs with name' l_logname INTO sy-lisel. "#EC *
        SPLIT ls_msg-msgv3 AT ':' INTO sy-lisel l_date.
        SUBMIT radprotb WITH protname EQ ls_msg-msgv3    "#EC CI_SUBMIT
                        WITH date     EQ l_date
*                       with TIME
*                       with USER
                        AND RETURN.
        c_state-ucomm_exec = 'X'.
      ELSEIF c_state-ucomm EQ '&IC1' AND c_state-list_field = 'OBJ_NAME' AND ls_tadir-obj_name IS NOT INITIAL.  "double click on object name
        CHECK NOT ls_tadir-object IS INITIAL.
        CALL FUNCTION 'RS_TOOL_ACCESS'
          EXPORTING
            operation     = 'SHOW'
            object_name   = ls_tadir-obj_name
            object_type   = ls_tadir-object
          EXCEPTIONS
            error_message = 1    "needed to skip error message, e.g. non existing SOTT
            OTHERS        = 1.
        CHECK sy-subrc EQ 0.
        c_state-ucomm_exec = 'X'.
      ELSEIF c_state-ucomm EQ '&IC1' AND c_state-list_field = 'OBJECT' AND ls_tadir-object IS NOT INITIAL.  "double click on object type
        IF sy-cprog EQ myrepid.
          PERFORM show_object_type IN PROGRAM (myrepid) USING ls_limu_key space IF FOUND.
        ENDIF.
        c_state-ucomm_exec = 'X'.
      ELSEIF ls_msg-msgid EQ '00' AND ls_msg-msgno EQ '398'.   "dummy message with long text icon
        CASE ls_tadir-object.
          WHEN space.
            PERFORM show_url IN PROGRAM (myrepid) USING 'https://wiki.wdf.sap.corp/wiki/display/~d028497/FAQ' IF FOUND.  "FAQ SAP name space
            c_state-ucomm_exec = 'X'.
          WHEN 'PROG'.
            PERFORM show_url IN PROGRAM (myrepid) USING 'https://wiki.wdf.sap.corp/wiki/display/~d028497/FAQ' IF FOUND.  "FAQ SAP name space
            c_state-ucomm_exec = 'X'.
          WHEN OTHERS.  "'TABU', 'VIED', 'TABD', 'DEVC'
            PERFORM show_object_type IN PROGRAM (myrepid) USING ls_limu_key space IF FOUND.  "-> special hints on object type page
            c_state-ucomm_exec = 'X'.
        ENDCASE.
      ENDIF.
  ENDCASE.
ENDFORM.                    "bal_callback_ucomm

*&---------------------------------------------------------------------*
*&      Form  bdc_field
*&---------------------------------------------------------------------*
DEFINE bdc_field.
  clear: ls_bdc.
  ls_bdc-fnam = &1.
  ls_bdc-fval = &2.
  append ls_bdc to lt_bdc.
END-OF-DEFINITION.
*&---------------------------------------------------------------------*
*&      Form  bdc_field
*&---------------------------------------------------------------------*
DEFINE bdc_screen.
  clear ls_bdc.
  ls_bdc-program  = &1.
  ls_bdc-dynpro   = &2.
  ls_bdc-dynbegin = 'X'.
  append ls_bdc to lt_bdc.
END-OF-DEFINITION.

*&---------------------------------------------------------------------*
*&      Form  prepare_table
*&---------------------------------------------------------------------*
FORM prepare_table USING value(i_tabname) TYPE tabname
                         i_key_fields TYPE string
                         it_entries   TYPE STANDARD TABLE
                CHANGING e_no_update.

  DATA: lt_key_fields TYPE TABLE OF fieldname,
        l_key_field   TYPE fieldname,
        l_and         TYPE ddf4sqlstm,
        l_where       TYPE ddf4sqlstm,
        lt_where      TYPE TABLE OF ddf4sqlstm,
        l_value       LIKE l_where,
        dref          TYPE REF TO data.

  FIELD-SYMBOLS: <lt_entries> TYPE STANDARD TABLE,
                 <ls_entry>   TYPE any,
                 <l_field>    TYPE any.

  IF it_entries[] IS INITIAL.   "entire deletion not supported
    e_no_update = 'X'.
    RETURN.
  ENDIF.

  READ TABLE it_entries[] INDEX 1 ASSIGNING <ls_entry>.

  SPLIT i_key_fields AT space INTO TABLE lt_key_fields.
  LOOP AT lt_key_fields INTO l_key_field.
    ASSIGN COMPONENT l_key_field OF STRUCTURE <ls_entry> TO <l_field>.
    IF <l_field> IS INITIAL.
      MESSAGE a666(01) WITH 'Key field is initial:' i_tabname l_key_field. "#EC *
    ENDIF.
    l_value = <l_field>. CONDENSE l_value NO-GAPS.  "convert to left-aligned character
    CONCATENATE l_where l_and l_key_field '~EQ ''' l_value '''' INTO l_where. TRANSLATE l_where USING '~ '.
*    APPEND l_where TO lt_where.
    l_and = '~AND~'.   "next line starts with AND
  ENDLOOP.

  CREATE DATA dref LIKE it_entries.
  ASSIGN dref->* TO <lt_entries>.

  TRY.                                                                                        ">=NOTE1487337
      l_where = cl_abap_dyn_prg=>check_column_name( l_where ).                                ">=NOTE1487337
      i_tabname = cl_abap_dyn_prg=>check_table_name_str( packages = '' val = i_tabname ).     ">=NOTE1487337
    CATCH cx_root.  "relevant for ATC                                                          ">=NOTE1487337
  ENDTRY.                                                                                     ">=NOTE1487337

  SELECT * FROM (i_tabname) INTO TABLE <lt_entries> WHERE (l_where) ORDER BY PRIMARY KEY. "#EC CI_DYNTAB "#EC CI_DYNWHERE
  IF it_entries[] EQ <lt_entries>[].
    "MESSAGE s666(01) WITH 'No update neccessary' INTO sy-lisel. "#EC *
    "CALL METHOD lcl_wb=>log_message.
    e_no_update = 'X'.
    RETURN.
  ELSEIF NOT <lt_entries>[] IS INITIAL AND testrun IS INITIAL.
    "remove all current entries before inserting the new ones
    DELETE (i_tabname) FROM TABLE <lt_entries>. "#EC CI_DYNTAB. "#EC CI_DYNWHERE
  ENDIF.


ENDFORM.                    "prepare_table

*&---------------------------------------------------------------------*
*&      Form  show_instruction
*&---------------------------------------------------------------------*
FORM show_instruction.

  LOOP AT SCREEN.
    IF screen-group1 EQ 'SUP'.
      screen-output    = 0.
      screen-invisible = 1.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

  IF show_genview IS INITIAL.
    "hide GENVIEW
    LOOP AT SCREEN.
      IF screen-name CS 'GENVIEW'.
        screen-input     = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

*  "get current screen size
*  l_size = sy-scols - 15.   "selection screen needx 15 columns
*  CALL METHOD cl_gui_cfw=>compute_metric_from_dynp
*  CALL METHOD cl_gui_cfw=>compute_pixel_from_metric

  DATA: l_ratio TYPE i VALUE 85.
  IF sy-scols NE 0.
    l_ratio = 100 - ( 30 * 100 / sy-scols ).
  ENDIF.

  IF g_docking IS NOT INITIAL.
*    CALL METHOD g_docking->set_extension
*      EXPORTING
*        extension = l_size
*      EXCEPTIONS
*        OTHERS    = 0.
  ELSE.
    CREATE OBJECT g_docking
      EXPORTING
        repid                       = sy-repid
        dynnr                       = sy-dynnr
        side                        = cl_gui_docking_container=>dock_at_right
        ratio                       = l_ratio
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5.
    CHECK sy-subrc EQ 0.  "simply leave in case of any problem

    CREATE OBJECT g_html_viewer TYPE ('CL_GUI_HTML_VIEWER')
      EXPORTING
        parent             = g_docking
      EXCEPTIONS
        cntl_error         = 1
        cntl_install_error = 2
        dp_install_error   = 3
        dp_error           = 4.
    CHECK sy-subrc EQ 0.  "simply leave in case of any problem

    CALL METHOD cl_gui_cfw=>flush
      EXCEPTIONS
        cntl_system_error = 1
        cntl_error        = 2.
    CHECK sy-subrc EQ 0.  "simply leave in case of any problem
  ENDIF.

  DATA: lt_html    TYPE STANDARD TABLE OF abaptxt255,
        l_url(255).

  "http://www.w3schools.com/html/default.asp

  APPEND '<html><body>' TO lt_html.                  "#EC NOTEXT  "1900

  APPEND '<br><br>'                                                                       TO lt_html. "#EC NOTEXT  "1900
  APPEND '<h3>Instructions:</h3>'  TO lt_html.       "#EC NOTEXT  "1900
  APPEND '<ul>'                                                                       TO lt_html. "#EC NOTEXT  "1900
  APPEND '<li>Execute the given steps one after the other.</li>'                              TO lt_html. "#EC NOTEXT  "1900
  APPEND '<li>If an error occurs repeat the same step again until the error is solved.</li>'  TO lt_html. "#EC NOTEXT  "1900
  APPEND '<li>It does not harm if a step is executed several times.</li>'                     TO lt_html. "#EC NOTEXT  "1900
  APPEND '<li>Nearly all popups can be closed by pressing ENTER.</li>'                        TO lt_html. "#EC NOTEXT  "1900
  APPEND '</ul>'                                                                              TO lt_html. "#EC NOTEXT  "1900

  PERFORM dummy IN PROGRAM saplstrd IF FOUND.  "load function group STRD
  FIELD-SYMBOLS: <gt_confirmed_messages> TYPE STANDARD TABLE.
  ASSIGN ('(SAPLSTRD)GT_CONFIRMED_MESSAGES') TO <gt_confirmed_messages>.
  IF sy-subrc NE 0.   "Note 1609940 not applied in current system
    APPEND '<h3>Hint:</h3>'  TO lt_html.             "#EC NOTEXT  "1900
    APPEND 'Implement note 1609940 if you want to avoid messages ''Object can only be created in SAP package'' (TR015)<br>' TO lt_html. "#EC NOTEXT
  ENDIF.


*  APPEND '<li>See also note <a href="https://service.sap.com/sap/support/notes/2133603/">2133603</a>.</li>'                       TO lt_html. "#EC NOTEXT  "1900
  APPEND '</ul>'                                                                              TO lt_html. "#EC NOTEXT  "1900

  DATA: but_sim(60), but_upd(60), but_gen(60), but_log(60).
  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name   = icon_simulate
      text   = 'Simulation'                                 "#EC NOTEXT
*     info   = 'Search for Translation System'              "#EC NOTEXT
    IMPORTING
      result = but_sim.

  APPEND '<h3>Test Run:</h3>'                                                           TO lt_html. "#EC NOTEXT  "1900
  APPEND 'You perform the test run to check the prerequisites and display the list of objects to be updated.<br>'     TO lt_html. "#EC NOTEXT  "1900

  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name   = icon_change
      text   = 'Update'                                     "#EC NOTEXT
*     info   = 'Search for Translation System'              "#EC NOTEXT
    IMPORTING
      result = but_upd.

  APPEND '<h3>Update & Activate:</h3>'                                                 TO lt_html. "#EC NOTEXT  "1900
  APPEND 'You perform this step to update the objects and then to activate them.<br>'     TO lt_html. "#EC NOTEXT  "1900
  APPEND 'We recommend using the "online" mode to activate the objects. Only if this activation times out, use the "batch" mode.<br>'     TO lt_html. "#EC NOTEXT  "1900

  IF show_genview IS NOT INITIAL.
    CALL FUNCTION 'ICON_CREATE'
      EXPORTING
        name   = icon_generate
        text   = 'Generation'                               "#EC NOTEXT
      IMPORTING
        result = but_gen.
    APPEND '<h3>Generate:</h3>'                                                 TO lt_html. "#EC NOTEXT  "1900
    APPEND 'Generate Maintenance Dialogs.<br>'  TO lt_html. "#EC NOTEXT  "1900
    APPEND 'In this step the maintenance dialogs are generated. Perform this step only after the <i>Update & Activate</i> step is completed successfully.<br>'     TO lt_html. "#EC NOTEXT  "1900
  ENDIF.

  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name   = icon_protocol
      text   = 'Logs'                                       "#EC NOTEXT
    IMPORTING
      result = but_log.
  APPEND '<h3>Show Logs:</h3>'                                                 TO lt_html. "#EC NOTEXT  "1900
  APPEND 'You can perform this step to display the logs of the previous steps.<br>'     TO lt_html. "#EC NOTEXT  "1900
  APPEND 'The first message of each log shows whether this belongs to a simulation, update or generation.<br>'     TO lt_html. "#EC NOTEXT  "1900
  APPEND 'Only the most recent log of each step is relevant. You can ignore errors in older logs.<br>'     TO lt_html. "#EC NOTEXT  "1900
  APPEND 'This step is optional.'     TO lt_html.    "#EC NOTEXT  "1900

  APPEND '</body></html>' TO lt_html.                "#EC NOTEXT  "1900

  CALL METHOD g_html_viewer->('LOAD_DATA')
    EXPORTING
      type                 = 'text'
      subtype              = 'html'
    IMPORTING
      assigned_url         = l_url
    CHANGING
      data_table           = lt_html
    EXCEPTIONS
      dp_invalid_parameter = 1
      dp_error_general     = 2
      cntl_error           = 3
      OTHERS               = 4.
  CHECK sy-subrc EQ 0.

  CHECK gv_unit_test IS INITIAL.

  CALL METHOD g_html_viewer->('SHOW_URL')
    EXPORTING
      url        = l_url
*     frame      = l_frame
    EXCEPTIONS
      cntl_error = 0.      "simply ignore any problem

ENDFORM.                    "show_docking_control

*----------------------------------------------------------------------*
*       CLASS lcl_wb DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_wb DEFINITION.
  PUBLIC SECTION.

    CLASS-METHODS init
      IMPORTING
        value(i_note)        TYPE c OPTIONAL      "note which indicates that report is not needed anymore
        value(i_cinst)       TYPE cwbcialeid OPTIONAL "correction instruction which describes the validity of the report
      RETURNING
        value(r_return_code) TYPE sysubrc.

    CLASS-METHODS get_object_text
      IMPORTING
                i_object      TYPE e071-object    "e.g. TABD
                i_obj_name    TYPE c OPTIONAL     "for DOCU
      RETURNING value(r_text) TYPE string.

    CLASS-METHODS create_table    "or structure or append or database table
      IMPORTING
        i_tabname    TYPE tabname
        i_devclass   TYPE devclass
        i_edtflag    TYPE edtflag OPTIONAL
        i_exclass    TYPE num1 OPTIONAL "dd02v-exclass
        i_masterlang TYPE masterlang OPTIONAL  "optional for downwards compatibility
        i_langu      TYPE sylangu   DEFAULT 'E'   "Default EN
        i_ddtext     TYPE ddtext    OPTIONAL      "can be taken from tabname
        i_authclass  TYPE dd02v-authclass DEFAULT '00'
        i_mainflag   TYPE dd02v-mainflag OPTIONAL
        i_tabclass   TYPE tabclass  DEFAULT 'INTTAB'
        it_dd05m_inc TYPE tt_dd05m OPTIONAL  "foreign key check on fields inherited from includes
        i_sqltab     TYPE sqlappdtab OPTIONAL
        i_proxytype  TYPE ddproxyty OPTIONAL                                            ">=SAPBASIS640
        i_comprflag  TYPE dd02l-comprflag  OPTIONAL
        i_contflag   TYPE contflag         DEFAULT 'C'     "only needed for db tables
        i_buffered   TYPE dd02v-buffered   OPTIONAL        "only needed for db tables
        i_tabkat     TYPE dd09v-tabkat     DEFAULT '0'     "only needed for db tables
        i_tabart     TYPE dd09v-tabart     DEFAULT 'APPL2' "only needed for db tables
        i_bufallow   TYPE dd09v-bufallow   DEFAULT 'N'     "only needed for db tables
        i_pufferung  TYPE dd09v-pufferung  OPTIONAL        "only needed for db tables
        i_schfeldanz TYPE dd09v-schfeldanz OPTIONAL        "only needed for db tables
        i_speichpuff TYPE dd09v-speichpuff OPTIONAL        "only needed for db tables
        i_uebersetz  TYPE dd09v-uebersetz  OPTIONAL        "only needed for db tables
        i_roworcolst TYPE char1 DEFAULT space              "space = column store
        i_is_gtt     TYPE char1 DEFAULT space              "global temp table
        i_javaonly   TYPE xfeld OPTIONAL  "dd09v-javaonly  "only needed for db tables
        i_protokoll  TYPE dd09v-protokoll  OPTIONAL.       "only needed for db tables

    CLASS-METHODS create_message_class
      IMPORTING
        i_devclass    TYPE devclass
        i_msgid       TYPE msgid
        i_masterlang  TYPE masterlang OPTIONAL  "optional for downwards compatibility
        i_langu       TYPE sylangu DEFAULT 'E'   "Default EN
        value(i_text) TYPE natxt OPTIONAL.

    CLASS-METHODS create_message
      IMPORTING
        i_msgid      TYPE msgid
        i_msgno      TYPE msgno
        i_masterlang TYPE masterlang OPTIONAL  "optional for downwards compatibility
        i_langu      TYPE sylangu DEFAULT 'E'   "Default EN
        i_text       TYPE natxt
        i_auth_check TYPE t100x-auth_check OPTIONAL
        it_activity  TYPE tt_activity OPTIONAL
        i_selfdef    TYPE doku_selfd DEFAULT 'X'.

    CLASS-METHODS create_other_docu
      IMPORTING
        i_devclass TYPE devclass OPTIONAL   "only needed for new objects with own TADIR
        i_docname  TYPE thead-tdname        "e.g. TXCDESK_PARAM, where TX represents general text
        i_typ      TYPE dokil-typ DEFAULT 'E'    "E or T
        i_langu    TYPE sylangu DEFAULT 'E'   "Default EN
        i_dokstate TYPE dokil-dokstate DEFAULT 'A'
        i_selfdef  TYPE dokil-selfdef  OPTIONAL
        i_line     TYPE string OPTIONAL  "all lines get collected until i_line is omitted
      EXPORTING
        et_lines   TYPE tt_tline.

    CLASS-METHODS create_program_text
      IMPORTING
        i_devclass   TYPE devclass OPTIONAL "needed if report texts are created before the program exists
        i_progname   TYPE progname
        i_masterlang TYPE masterlang OPTIONAL  "optional for downwards compatibility
        i_langu      TYPE sylangu DEFAULT 'E'   "Default EN
        i_id         TYPE textpool-id     DEFAULT 'I'   "I = Text element, S = Selection Text, R = Title
        i_key        TYPE textpool-key   "space for title
        i_text       TYPE textpool-entry DEFAULT c_ddic_ref
        i_length     TYPE textpool-length OPTIONAL. "can be defaulted from length of text

    CLASS-METHODS create_user_interface
      IMPORTING
        i_progname    TYPE program
        i_devclass    TYPE devclass OPTIONAL
        value(is_adm) TYPE rsmpe_adm OPTIONAL  "shall be passed!
        it_sta        TYPE tt_sta
        it_men        TYPE tt_men
        it_act        TYPE tt_act
        it_but        TYPE tt_but
        it_pfk        TYPE tt_pfk
        it_biv        TYPE tt_biv
        it_set        TYPE tt_set
        i_masterlang  TYPE masterlang OPTIONAL  "optional for downwards compatibility
        i_langu       TYPE sylangu DEFAULT 'E'
        it_fun        TYPE tt_fun
        it_mtx        TYPE tt_mtx
        it_doc        TYPE tt_doc
        it_tit        TYPE tt_tit.

    CLASS-METHODS create_logical_object
      IMPORTING
        i_object     TYPE e071-object  "VCLS, AUTH, OSOD, SFRN
        i_obj_name   TYPE c     "flexible number of characters
        i_devclass   TYPE devclass OPTIONAL
        i_langu      TYPE sylangu DEFAULT 'E'
        i_masterlang TYPE masterlang DEFAULT 'E'
      EXCEPTIONS
        error.

    CLASS-METHODS execute_method
      IMPORTING
        i_method TYPE c.    "AFTER_IMP or BEFORE_EXP

    CLASS-METHODS create_table_entries
      IMPORTING
        i_tabname        TYPE tabname
        i_delete         TYPE xfeld OPTIONAL   "delete given entries with logging into transport request
        i_langu          TYPE sylangu OPTIONAL
        it_entries       TYPE STANDARD TABLE OPTIONAL
        i_logical_object TYPE tadir-object OPTIONAL
      CHANGING
        c_deliver        TYPE text15 OPTIONAL  "ty_object-deliver
        c_clidep         TYPE dd02l-clidep OPTIONAL
        c_lang_field     TYPE string OPTIONAL
        c_contflag       TYPE dd02l-contflag OPTIONAL.

    CLASS-METHODS add_to_transport
      IMPORTING
        i_object            TYPE e071-object    "e.g. TABD
        i_obj_name          TYPE c     "flexible number of characters
        i_skip_snote_check  TYPE c OPTIONAL
        i_tabkey            TYPE e071k-tabkey OPTIONAL  "only for TABU
        i_edtflag           TYPE edtflag  OPTIONAL  "X = not editable via standard tools
        i_devclass          TYPE devclass OPTIONAL
        i_langu             TYPE sylangu OPTIONAL
        value(i_masterlang) TYPE masterlang OPTIONAL "will be defaulted with i_langu
      EXPORTING
        e_masterlang TYPE tadir-masterlang
      EXCEPTIONS
        error
        simulation
        language_not_installed.

    CLASS-METHODS register_inactive_object
      IMPORTING
        i_objtype  TYPE e071-object
        i_treetype TYPE e071-object OPTIONAL  "space = do not update tree, optionally different type in tree, e.g. TABL vs. CDS
        i_objname  TYPE c.

    CLASS-METHODS log_message
      IMPORTING i_object    TYPE e071-object OPTIONAL
                i_obj_name  TYPE c OPTIONAL
                i_probclass TYPE balprobcl OPTIONAL.

    CLASS-METHODS display_log
      IMPORTING
        i_db_search TYPE xfeld OPTIONAL   "search logs on db
        i_no_save   TYPE xfeld OPTIONAL.

    CLASS-METHODS save_log.

    CLASS-METHODS set_context
      IMPORTING i_object     TYPE e071-object
                i_skip_snote_check TYPE c OPTIONAL
                i_obj_name   TYPE c
                i_obj_name2  TYPE c OPTIONAL
                i_msgty      TYPE symsgty DEFAULT 'I'
                i_text       TYPE c OPTIONAL
                i_no_message TYPE c OPTIONAL
                i_masterlang TYPE masterlang OPTIONAL
                i_langu      TYPE sylangu
      EXPORTING
                e_covered_by_snote TYPE c.

    CLASS-METHODS snote_support
      IMPORTING i_object     TYPE e071-object
      RETURNING value(r_supported) TYPE xfeld.

    CLASS-METHODS activate
      IMPORTING i_result_auth_check TYPE sysubrc OPTIONAL.

  PRIVATE SECTION.
    CLASS-METHODS mass_activation
      IMPORTING
        i_step     TYPE i      DEFAULT 1
        i_inactive TYPE c      OPTIONAL
        i_ddmode   TYPE ddmode DEFAULT 'O'
        i_frcact   TYPE c      OPTIONAL
        i_logname  TYPE c
      EXCEPTIONS
        error.

    CLASS-METHODS language_installed
      IMPORTING
                i_langu            TYPE sylangu
      RETURNING value(r_installed) TYPE xfeld.

ENDCLASS.                    "lcl_wb DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_wb IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_wb IMPLEMENTATION.

  METHOD init.

    DATA: ls_balobj TYPE balobj.

    CLEAR: gv_errors_occured, r_return_code, gv_progname_rept.

    "INITIALIZATION.  "3/3
    TRANSLATE c_ddic_ref USING '_ '.   "initialization

    CONCATENATE 'AOBJ''CHDO''IWPR''IWMO''IWSV''SUCD''SUSC''SUSK''DIOB''DTRF''DROU'
                'DTRC''BSVO''BSVI''BSVV''SCP2''TOBJ''PCLA''DTMT''DTMU''DTMR''DTMS'
                'PSCS''PMKS''PFCS''POCS''PCYS''LODS''LODE''LOIE''LODC''SHI3''SHI5'
                'SHI6''ECTD''ELEM''SICF''SRFR''SRFS''SRFQ''SAJT''SAJC''SXCI''IOBJ'
                'TRAN''DELM''PDTS''PDWS''PDAC''CFDA''CFDB''CFDC''CFDE''CFDF''CFDG'
                'CFDO''CFDS''CFDT''FSEL''DMEE''SBDL''SBDP''SSB6''WAPD''FTGL'
                'BMFR''SSB5''IWVB''SUSH''SUSI''NROB''IWVB''SRFA''SOBJ''SUSO'
                'SSB5''SSB6''SSB7''SSB8''XPDT''IFME'
                'STYC''DAQR''ESH2'   "pilot
           INTO approved_logical_objects SEPARATED BY `'`.

    SET LOCALE LANGUAGE 'E'.     "most text/message are only in EN hence avoid mixture

    "copied from CL_ADT_GUI_EVENT_DISPATCHER=>IS_ADT_ENVIRONMENT( ).
    GET PARAMETER ID sadt_navigation FIELD gv_abap_in_eclipse.

    DATA: l_system_type TYPE df41s-parent_obj.
    CALL FUNCTION 'RPY_CHECK_SYSTEM_TYPE_30'
      IMPORTING
        system_type = l_system_type.

    IF gv_unit_test EQ 'X'.
      CLEAR sy-subrc.  "isolate from authorization during unit test
    ELSEIF sy-repid EQ myrepid OR l_system_type EQ 'SAP'.
      CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
        EXPORTING
          tcode  = 'SCWB'
        EXCEPTIONS
          ok     = 0
          OTHERS = 1.
    ELSE.
      CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
        EXPORTING
          tcode  = 'SNOTE'
        EXCEPTIONS
          ok     = 0
          OTHERS = 1.
    ENDIF.
    IF sy-subrc NE 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      gv_errors_occured = 'X'.
      r_return_code = 1. RETURN.
    ENDIF.

    IF NOT showlogs IS INITIAL.
      r_return_code = 2. RETURN.
    ENDIF.

    DATA: ls_log TYPE bal_s_log.
    "prepare application log
    ls_log-object    = c_bal_object.
    ls_log-subobject = c_bal_subobj.
    ls_log-extnumber = sy-cprog.
    ls_log-aldate    = sy-datum.
    ls_log-altime    = sy-uzeit.
    ls_log-aluser    = sy-uname.
    ls_log-alprog    = sy-repid.
    ls_log-altcode   = sy-tcode.

    SELECT SINGLE * FROM balobj INTO ls_balobj WHERE object EQ c_bal_object.
    IF sy-subrc NE 0.
      "create if missing
      ls_balobj-object = c_bal_object.
      INSERT balobj FROM ls_balobj.
    ENDIF.

    "create standard application log handle
    IF gv_log_handle IS INITIAL.  "will be refreshed in display_log
      CALL FUNCTION 'BAL_LOG_CREATE'
        EXPORTING
          i_s_log                 = ls_log
        IMPORTING
          e_log_handle            = gv_log_handle
        EXCEPTIONS
          log_header_inconsistent = 1
          OTHERS                  = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.
    EXPORT gv_log_handle FROM gv_log_handle TO MEMORY ID c_memory_id.

    CALL METHOD set_context
      EXPORTING
        i_langu      = space
        i_object     = 'PROG'
        i_obj_name   = sy-repid
        i_no_message = abap_true.

    "Main check: Last changed by SAP -> Report came via SP / Upgrade
    "Does not work if customer use user SAP to implement notes....
    "==> no execution anymore.
    IF sy-cprog NE myrepid.
      SELECT SINGLE prog FROM d010sinf INTO sy-lisel    "#EC CI_NOORDER
                        WHERE ( prog EQ sy-repid )
                          AND ( unam EQ 'SAP'  OR  "last changed by ...
                                unam EQ 'SAP*' OR
                                unam EQ space AND ( cnam EQ 'SAP'  OR
                                                    cnam EQ 'SAP*' OR
                                                    cnam EQ space ) "created by ...
                               ).
      IF sy-subrc EQ 0.
        "If customer used user SAP to apply that report they have to comment out the following 4 lines:
        MESSAGE w666(01) WITH 'The neccessary changes already came' 'via support package.' 'Report execution not required anymore.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        r_return_code = 3.
        RETURN.
      ENDIF.
    ENDIF.

    "CL_WHATSUP_HEADER_UI->PBO_CONTROL
*  data lo_header         type ref to cl_whatsup_header.
*
*    lo_header = cl_whatsup_header=>get_instance( ).
*
*    ms_header-product          = lo_header->get_product( ).
*    ms_header-upgrade_type     = lo_header->get_upgrade_type( ).
*    ms_header-upgrade_scenario = lo_header->get_upgrade_scenario( ).
*    ms_header-upgrade_system   = lo_header->get_execution_system( ).
*    ms_header-dbsys = sy-dbsys.
*
*    ms_header-current_phase = lo_header->get_current_phase( ).
*
*    lo_header->get_release( importing ev_srcrel  = ms_header-srcrelease
*                                      ev_1shdrel = ms_header-1shdrelease
*                                      ev_tgtrel  = ms_header-tgtrelease ).
*
*
*    lo_header->get_summanifest( importing ev_os_version = ms_header-os_version
*                                                ev_comp_mode = ms_header-comp_mode
*                                                ev_release = ms_header-release
*                                                ev_support_package = ms_header-support_package
*                                                ev_patchlv = ms_header-patchlv
*                                                ev_branch = ms_header-branch
*                                                ev_ass_time = ms_header-ass_time ).

    IF sy-cprog(1) EQ '!'. "Executing inactive version
      MESSAGE w666(01) WITH 'Please activate this report' sy-repid 'first.' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      r_return_code = 4. RETURN.
    ENDIF.

    IF sy-repid(1) CA 'ZY'.  "check for not allowed namespace
      IF l_system_type EQ 'SAP'.
        MESSAGE w398(00) WITH 'Report will NOT work in customer system' 'because of wrong namespace (Z*)!' 'See longtext.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.    "longtext: https://wiki.wdf.sap.corp/wiki/x/JqzTYg
      ELSE.
        MESSAGE e398(00) WITH 'Report name is not in SAP namespace.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        r_return_code = 5. RETURN.  "stop immediately
      ENDIF.
    ENDIF.

    IF sapbasis NE '?' AND sy-saprl LT sapbasis.  "customer might have same or higher SAP_BASIS than dev system but lower is not allowed
      MESSAGE e666(01) WITH 'This report is valid for SAP_BASIS' sapbasis 'but current system has SAP_BASIS' sy-saprl INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      r_return_code = 5. RETURN.  "stop immediately
    ENDIF.

    CALL METHOD set_context
      EXPORTING
        i_langu    = space
        i_object   = space
        i_obj_name = space.

    IF NOT i_note IS INITIAL.
*     that that note is not already implemented
*     this must not be the note containing the generated report for DDIC but a follow-up note with the coding using that new DDIC
      DATA l_status TYPE c.
      CALL FUNCTION 'SCWB_NOTE_IMPL_STATUS_SIMPLE'
        EXPORTING
          iv_numm   = i_note
        IMPORTING
          ev_status = l_status
        EXCEPTIONS
          OTHERS    = 0.
      CASE l_status.
        WHEN 'E'.
          MESSAGE w666(01) WITH 'SAP Note' i_note 'completely implemented;' 'Report execution not required anymore.' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
          r_return_code = 5. RETURN.
        WHEN 'O'.
          MESSAGE w666(01) WITH 'SAP Note' i_note 'is obsolete;' 'Report execution not required anymore.' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
          r_return_code = 6. RETURN.
        WHEN OTHERS. "okay
          DATA: ls_note TYPE bcwbn_note.
          DATA: l_valid TYPE bcwbn_bool.
          ls_note-key-numm = i_note.
          CALL FUNCTION 'SCWB_NOTE_READ'
            EXPORTING
              iv_read_corr_instructions  = 'X'
            CHANGING
              cs_note                    = ls_note
            EXCEPTIONS
              note_not_found             = 1
              language_not_found         = 2
              unreadable_text_format     = 3
              corr_instruction_not_found = 4
              OTHERS                     = 5.
          IF sy-subrc <> 0.
            MESSAGE w666(01) WITH 'SAP Note' i_note 'cannot be read;' 'Cannot check validity.' INTO sy-lisel. "#EC *
            CALL METHOD log_message.
            l_valid = 'X'.
          ENDIF.
*------
          FIELD-SYMBOLS: <ls_corr> TYPE bcwbn_corr_instruction.
          LOOP AT ls_note-corr_instructions ASSIGNING <ls_corr>.
            IF NOT i_cinst IS INITIAL.
              CHECK <ls_corr>-key-aleid = i_cinst.
            ENDIF.
            CALL FUNCTION 'SCWB_CINST_CHECK_VALID'
              IMPORTING
                ev_valid                   = l_valid
              CHANGING
                cs_corr_instruction        = <ls_corr>
              EXCEPTIONS
                corr_inst_not_found        = 1
                inconsistent_delivery_data = 2
                undefined                  = 3
                OTHERS                     = 4.
            IF sy-subrc <> 0.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            ENDIF.
            IF NOT l_valid IS INITIAL.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF l_valid IS INITIAL.
            MESSAGE w666(01) WITH 'Correction instruction not valid' 'for current patch level.' 'Report execution not required anymore.' INTO sy-lisel. "#EC *
            CALL METHOD log_message.
            r_return_code = 7. RETURN.
          ENDIF.
      ENDCASE.
    ENDIF.

    IF NOT testrun IS INITIAL.
      MESSAGE w666(01) WITH gc_test_mode    INTO sy-lisel.  "#EC *
      CALL METHOD lcl_wb=>log_message.
    ELSEIF NOT update IS INITIAL. "or UPDATE & GENVIEW
      MESSAGE i666(01) WITH gc_update_mode  INTO sy-lisel.  "#EC *
      CALL METHOD lcl_wb=>log_message.
    ELSEIF NOT genview IS INITIAL. "only GENVIEW
      MESSAGE i666(01) WITH gc_genview_mode INTO sy-lisel.  "#EC *
      CALL METHOD lcl_wb=>log_message.
    ENDIF.

    "Switch on SNOTE & SCWB mode
    CALL FUNCTION 'SCWG_TOOLFLAG_SET'.
    IF l_system_type EQ 'SAP'.
      CALL FUNCTION 'TR_P_COP_SWICH_OFF'.
    ENDIF.
    TRY. CALL METHOD ('CL_CWB_RUNTIME')=>set_active. CATCH cx_sy_dyn_call_illegal_class. ENDTRY. ">=SAPBASIS640

    "Set goon for all regarding message TR015 if possible
    DATA: BEGIN OF ls_msg,
            id TYPE symsgid VALUE 'TR',
            ty TYPE symsgty,
            no TYPE symsgno VALUE '015',
          END OF ls_msg.

    PERFORM dummy IN PROGRAM saplstrd IF FOUND.  "load function group STRD
    FIELD-SYMBOLS: <gt_confirmed_messages> TYPE STANDARD TABLE.
    ASSIGN ('(SAPLSTRD)GT_CONFIRMED_MESSAGES') TO <gt_confirmed_messages>.
    IF sy-subrc EQ 0.   "Note 1609940 applied in current system
      ls_msg-no = 015.     "TR015
      READ TABLE <gt_confirmed_messages> TRANSPORTING NO FIELDS WITH KEY table_line = ls_msg.
      IF sy-subrc NE 0.
        APPEND ls_msg TO <gt_confirmed_messages>.
      ENDIF.
      ls_msg-no = 693.     "TR693
      READ TABLE <gt_confirmed_messages> TRANSPORTING NO FIELDS WITH KEY table_line = ls_msg.
      IF sy-subrc NE 0.
        APPEND ls_msg TO <gt_confirmed_messages>.
      ENDIF.
    ELSEIF l_system_type NE 'SAP'.
      MESSAGE i666(01) WITH 'Implement note 1609940 if you want to avoid' 'annoying message ''Object can only be created' 'in SAP package (TR015)''' INTO sy-lisel. "#EC NOTEXT
      CALL METHOD lcl_wb=>log_message.
    ENDIF.

    CALL METHOD add_to_transport   "init static variables
      EXPORTING
        i_object   = space
        i_obj_name = space
      EXCEPTIONS
        OTHERS     = 0.

  ENDMETHOD.                    "init



  METHOD get_object_text.

    STATICS: lt_object_text TYPE TABLE OF ko100,
             lt_doktypes    TYPE TABLE OF dd07v,
             ls_objt        TYPE objt.

    DATA: ls_object_text TYPE ko100,
          ls_doktype     TYPE dd07v.

    CHECK NOT i_object IS INITIAL.

    IF lt_object_text IS INITIAL.
      CALL FUNCTION 'TR_OBJECT_TABLE'
        TABLES
          wt_object_text = lt_object_text.
      SORT lt_object_text BY object.

      CALL FUNCTION 'DDIF_DOMA_GET'
        EXPORTING
          name      = 'DOK_ID'
          langu     = sy-langu
        TABLES
          dd07v_tab = lt_doktypes
        EXCEPTIONS
          OTHERS    = 0.
      SORT lt_doktypes BY domvalue_l.
    ENDIF.

    CASE i_object.
      WHEN 'DOCU'.
        IF i_obj_name CP 'FU*'.
          SPLIT i_obj_name AT space INTO sy-lisel sy-lisel.   "check if name containes two words.
          IF sy-lisel IS INITIAL.
            r_text = 'Documentation Function Module'.       "#EC NOTEXT
          ELSE.
            r_text = 'Documentation Function Module Parameter'. "#EC NOTEXT
          ENDIF.
        ELSE.
          READ TABLE lt_doktypes INTO ls_doktype BINARY SEARCH
            WITH KEY domvalue_l = i_obj_name(2).
          IF sy-subrc EQ 0.
            CONCATENATE 'Documentation' ls_doktype-ddtext INTO r_text SEPARATED BY space. "#EC NOTEXT
          ELSE.
            r_text = 'Documentation'.                       "#EC NOTEXT
          ENDIF.
        ENDIF.
      WHEN 'FUNH'.
        r_text = 'Function Module Release Status'.          "#EC NOTEXT
      WHEN 'PROC'.
        r_text = 'HDB Stored Procedure'.                    "#EC NOTEXT
      WHEN 'ALVV'.
        r_text = 'ALV Standard Variant'.                    "#EC NOTEXT
      WHEN 'DDLS'.
        r_text = gc_objtext-ddlsource.
      WHEN 'TDAT'.
        IF i_obj_name NE ls_objt-objectname.
          SELECT SINGLE * FROM objt INTO ls_objt WHERE language EQ sy-langu AND objectname EQ i_obj_name. "#EC CI_NOORDER
        ENDIF.
        r_text = ls_objt-ddtext.
      WHEN OTHERS.
        READ TABLE lt_object_text INTO ls_object_text BINARY SEARCH
          WITH KEY object = i_object.  "ignore PGMID!
        IF sy-subrc EQ 0.
          r_text = ls_object_text-text.
        ENDIF.
    ENDCASE.

    CASE i_obj_name.
      WHEN 'TNODEIMG' OR 'TNODEIMGT'.
        r_text = gc_objtext-imgtree.
      WHEN 'TMENU01' OR 'TMENU01T' OR 'TMENU01R'.
        r_text = gc_objtext-areamenu.
    ENDCASE.

  ENDMETHOD.                    "get_object_text













  METHOD create_table.
    DATA: ls_dd02v                    TYPE dd02v,
          ls_dd09l                    TYPE dd09l,
          lt_dd03p                    TYPE TABLE OF dd03p,
          lt_dd05m                    TYPE TABLE OF dd05m,
          lt_dd08v                    TYPE TABLE OF dd08v,
          lt_dd12v                    TYPE TABLE OF dd12v,
          lt_dd17v                    TYPE TABLE OF dd17v,
          lt_dd35v                    TYPE TABLE OF dd35v,
          lt_dd36m                    TYPE TABLE OF dd36m,
          l_treetype                  TYPE trobjtype,
          l_technical_setting_changed,
          ls_tabname                  LIKE LINE OF gr_tabname VALUE 'IEQ'.
    DATA: BEGIN OF ls_dd09l_new,   "field available release dependent
            javaonly,             "as of 700
            roworcolst,           "as of 740
          END OF ls_dd09l_new.
    DATA: BEGIN OF ls_dd02v_new,   "field available release dependent
            is_gtt,               "as of 740
          END OF ls_dd02v_new.
    FIELD-SYMBOLS: <ls_dd09l_javaonly>   TYPE char1,
                   <ls_dd09l_roworcolst> TYPE char1.

    ls_tabname-low = i_tabname.

    CALL METHOD set_context
      EXPORTING
        i_masterlang = i_masterlang
        i_langu      = i_langu
        i_object     = 'TABL'
        i_obj_name   = i_tabname.

    IF lcl_wb=>snote_support( 'TABL' ) IS INITIAL.
      COLLECT ls_tabname INTO gr_tabname.
    ENDIF.

    CALL FUNCTION 'DDIF_TABL_GET'
      EXPORTING
        name          = i_tabname
        state         = 'M'  "newest version (e.g. inactive)
        langu         = i_langu
      IMPORTING
*       GOTSTATE      = GOTSTATE
        dd02v_wa      = ls_dd02v
        dd09l_wa      = ls_dd09l
      TABLES
        dd03p_tab     = lt_dd03p
        dd05m_tab     = lt_dd05m
        dd08v_tab     = lt_dd08v
        dd12v_tab     = lt_dd12v
        dd17v_tab     = lt_dd17v
        dd35v_tab     = lt_dd35v
        dd36m_tab     = lt_dd36m
      EXCEPTIONS
        illegal_input = 0  "checking ls_dd02v-tabname NE space
        OTHERS        = 0.
    "handling of fields which do no exist in all releases:
    ls_dd09l_new-roworcolst = i_roworcolst.  "default: make equal to avoid unneccessary update
    ls_dd09l_new-javaonly   = i_javaonly.    "default: make equal to avoid unneccessary update
    MOVE-CORRESPONDING ls_dd09l TO ls_dd09l_new. "overwrite default with actual value if exists
    ls_dd02v_new-is_gtt     = i_is_gtt.
    MOVE-CORRESPONDING ls_dd02v TO ls_dd02v_new. "overwrite default with actual value if exists

    IF i_langu EQ i_masterlang OR i_masterlang IS INITIAL.  "master language
      IF i_tabclass EQ 'INTTAB' AND ( ls_dd02v-tabclass EQ 'INTTAB' OR ls_dd02v-tabclass IS INITIAL ). "V5.73
        l_technical_setting_changed = space.  "structures do not have technical settings
      ELSEIF ls_dd02v-contflag       EQ i_contflag   AND
             ls_dd02v-buffered       EQ i_buffered   AND
             ls_dd09l-tabkat         EQ i_tabkat     AND
             ls_dd09l-tabart         EQ i_tabart     AND
             ls_dd09l-pufferung      EQ i_pufferung  AND
             ls_dd09l-bufallow       EQ i_bufallow   AND
             ls_dd09l-schfeldanz     EQ i_schfeldanz AND
             ls_dd09l-protokoll      EQ i_protokoll  AND
             ls_dd09l-uebersetz      EQ i_uebersetz  AND
             ls_dd09l_new-javaonly   EQ i_javaonly   AND
           ( ls_dd09l_new-roworcolst EQ i_roworcolst OR i_roworcolst IS INITIAL ) AND
           ( ls_dd02v_new-is_gtt     EQ i_is_gtt     OR i_is_gtt     IS INITIAL ) AND
             ls_dd09l-speichpuff     EQ i_speichpuff.   "do not check javaonly field
        l_technical_setting_changed = space.
      ELSE.
        l_technical_setting_changed = 'X'.
      ENDIF.

      IF ls_dd02v-tabname   NE space       AND "existing.
         ls_dd02v-ddtext    EQ i_ddtext    AND
         ls_dd02v-exclass   EQ i_exclass   AND                           ">=SAPBASIS640
         ls_dd02v-proxytype EQ i_proxytype AND                           ">=SAPBASIS640
         ls_dd02v-tabclass  EQ i_tabclass  AND
         ls_dd02v-authclass EQ i_authclass AND
         ls_dd02v-mainflag  EQ i_mainflag  AND
         ls_dd02v-sqltab    EQ i_sqltab    AND
         l_technical_setting_changed IS INITIAL.
        MESSAGE i666(01) WITH 'No update necessary' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RETURN.
      ENDIF.

      IF ls_dd02v-tabname IS INITIAL.  "only for new tables
        ls_dd02v-comprflag  = i_comprflag.     "allow non-unique-key
      ENDIF.

      "new table
      ls_dd02v-tabname    = i_tabname.
      ls_dd02v-ddlanguage = i_langu.
      ls_dd02v-exclass    = i_exclass.                                      ">=SAPBASIS640
      ls_dd02v-proxytype  = i_proxytype.                                    ">=SAPBASIS640
      ls_dd02v-tabclass   = i_tabclass.
      ls_dd02v-authclass  = i_authclass.
      ls_dd02v-mainflag   = i_mainflag.
      ls_dd02v-sqltab     = i_sqltab.

      IF i_ddtext IS INITIAL.
        ls_dd02v-ddtext   = i_tabname.
      ELSE.
        ls_dd02v-ddtext   = i_ddtext.
      ENDIF.

      IF ls_dd02v-tabclass EQ 'CLUSTER' OR  "only for real database tables
         ls_dd02v-tabclass EQ 'POOL'    OR
         ls_dd02v-tabclass EQ 'TRANSP'.
        ls_dd02v-contflag       = i_contflag.
        ls_dd02v-buffered       = i_buffered.
        ls_dd09l-tabname        = i_tabname.
        ls_dd09l-tabkat         = i_tabkat.
        ls_dd09l-tabart         = i_tabart.
        ls_dd09l-pufferung      = i_pufferung.
        ls_dd09l-bufallow       = i_bufallow.
        ls_dd09l-schfeldanz     = i_schfeldanz.
        ls_dd09l-protokoll      = i_protokoll.
        ls_dd09l-uebersetz      = i_uebersetz.
        ls_dd09l-speichpuff     = i_speichpuff.
        ls_dd09l_new-javaonly   = i_javaonly.
        ls_dd09l_new-roworcolst = i_roworcolst.
        MOVE-CORRESPONDING ls_dd09l_new TO ls_dd09l.
        ls_dd02v_new-is_gtt     = i_is_gtt.
        MOVE-CORRESPONDING ls_dd02v_new TO ls_dd02v.
        l_treetype = 'TABL'.
      ELSE.
        l_treetype = 'CDS'.
      ENDIF.
    ELSE.   "translation
      IF ls_dd02v-tabname IS INITIAL.
        IF testrun IS INITIAL.
          MESSAGE w666(01) WITH i_tabname 'does not exist. Try again later.' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
        RETURN.
      ELSEIF ls_dd02v-ddtext EQ i_ddtext.
        MESSAGE i666(01) WITH 'No update necessary' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RETURN.
      ELSE.
        ls_dd02v-ddlanguage = i_langu.
        ls_dd02v-ddtext     = i_ddtext.
      ENDIF.
    ENDIF.

    CALL METHOD add_to_transport
      EXPORTING
        i_object     = 'TABL'
        i_obj_name   = i_tabname
        i_masterlang = i_masterlang
        i_langu      = i_langu
        i_devclass   = i_devclass
        i_edtflag    = i_edtflag
      EXCEPTIONS
        OTHERS       = 1.
    CHECK sy-subrc EQ 0.

    IF l_technical_setting_changed EQ 'X'.
      CALL METHOD add_to_transport
        EXPORTING
          i_object   = 'TABT'
          i_langu    = i_langu
          i_obj_name = i_tabname
          i_devclass = i_devclass
          i_edtflag  = i_edtflag
        EXCEPTIONS
          OTHERS     = 1.
      CHECK sy-subrc EQ 0.
    ENDIF.

    "update redundant field masterlang with TADIR value
    SELECT SINGLE masterlang FROM tadir INTO ls_dd02v-masterlang
                            WHERE pgmid    EQ 'R3TR'
                              AND object   EQ 'TABL'
                              AND obj_name EQ i_tabname.

    CALL FUNCTION 'DDIF_TABL_PUT'
      EXPORTING
        name              = i_tabname
        dd02v_wa          = ls_dd02v
        dd09l_wa          = ls_dd09l
      TABLES
        dd03p_tab         = lt_dd03p
        dd05m_tab         = lt_dd05m
        dd08v_tab         = lt_dd08v
        dd35v_tab         = lt_dd35v
        dd36m_tab         = lt_dd36m
      EXCEPTIONS
        tabl_not_found    = 1
        name_inconsistent = 2
        tabl_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc <> 0.
      CALL METHOD log_message.
      RETURN.
    ENDIF.

    MESSAGE i666(01) WITH 'Update successful' INTO sy-lisel. "#EC *
    CALL METHOD log_message.

    CALL METHOD register_inactive_object
      EXPORTING
        i_objtype  = 'TABL'
        i_treetype = l_treetype
        i_objname  = i_tabname.


  ENDMETHOD.                    "create_table







  METHOD activate.

    DATA: lt_dwinactiv      TYPE TABLE OF dwinactiv,
          lt_dwinactiv_ddic TYPE TABLE OF dwinactiv,
          lv_answer,
          l_logname         TYPE ddprh-protname,
          ls_job            TYPE tbtcjob,
          lv_rc             TYPE sysubrc,
          l_dref            TYPE REF TO data,
          l_message         TYPE sy-lisel,
          ls_tabname        LIKE LINE OF gr_tabname.

    DATA: lr_object  TYPE RANGE OF dwinactiv-object,
          lr_objname TYPE RANGE OF dwinactiv-obj_name.

    DATA: lt_ascii    TYPE TABLE OF soli,
          lt_list     TYPE TABLE OF abaplist,
          lt_textpool TYPE TABLE OF textpool,
          ls_textpool TYPE textpool.

    FIELD-SYMBOLS: <ls_dwinactiv> LIKE LINE OF lt_dwinactiv.


    CALL METHOD set_context
      EXPORTING
        i_langu    = space
        i_object   = space
        i_obj_name = 'Activation'.                          "#EC *

    IF testrun IS INITIAL.

      "pre-check: no activation during SPDD phase (copied from TRINT_CHECK_LINCENSE_EXCEPTION)
      DATA: lt_upginfo TYPE TABLE OF uvers,
            ls_upginfo TYPE uvers.
      CALL FUNCTION 'UPG_GET_UPGRADE_INFO'
        TABLES
          tt_upginfo = lt_upginfo
        EXCEPTIONS
          OTHERS     = 0.

      SORT lt_upginfo BY enddate DESCENDING.
      READ TABLE lt_upginfo INTO ls_upginfo INDEX 1.
      IF ( ls_upginfo-putstatus = 'S' OR ls_upginfo-putstatus = 'U' ).
*        no activation at all during downtime of system (SPDD)
        MESSAGE w666(01) WITH 'No activation during SPDD.' 'Inactive versions have been updated.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RETURN.
      ENDIF.

      DATA: l_objname TYPE trobj_name.
      "activate switches "online"  (one by one to avoid popup)
      DATA: ls_switchname LIKE LINE OF gr_switchname.
      LOOP AT gr_switchname INTO ls_switchname.
        l_objname = ls_switchname-low.
        CALL FUNCTION 'RS_WORKING_OBJECT_ACTIVATE'
          EXPORTING
            object                    = 'SFSW'
            obj_name                  = l_objname
            dictionary_only           = 'X'    "must be set for switches
            activate_only_this_object = 'X'
            object_saved              = 'X'
          EXCEPTIONS
            OTHERS                    = 1.
        IF sy-subrc EQ 0.
          MESSAGE s199(sfw) WITH l_objname INTO sy-lisel.   "#EC *
          CALL METHOD log_message.
        ENDIF.
      ENDLOOP.
      "activate GUI status "online"  (one by one to avoid popup)
      DATA: ls_guistatus LIKE LINE OF gr_guistatus.
      LOOP AT gr_guistatus INTO ls_guistatus.
        l_objname = ls_guistatus-low.
        CALL FUNCTION 'RS_WORKING_OBJECT_ACTIVATE'  "dumps if obj_name does not exist
          EXPORTING
            object                    = 'CUAD'
            obj_name                  = l_objname
            activate_only_this_object = 'X'
            object_saved              = 'X'
          EXCEPTIONS
            OTHERS                    = 1.
        IF sy-subrc EQ 0.
          MESSAGE s137(ec) WITH l_objname INTO sy-lisel.    "#EC *
        ELSE.
          MESSAGE e800(ec) WITH l_objname sy-subrc INTO sy-lisel. "#EC *
        ENDIF.
        CALL METHOD log_message.
      ENDLOOP.

      DATA: ls_trkey LIKE LINE OF gt_trkey,
            ls_ddls TYPE e071,
            lt_ddls TYPE TABLE OF e071.
      REFRESH lt_ddls[].
      LOOP AT gt_trkey INTO ls_trkey WHERE obj_type EQ 'DDLS'.
        ls_ddls-pgmid    = 'R3TR'.
        ls_ddls-object   = ls_trkey-obj_type.
        ls_ddls-obj_name = ls_trkey-obj_name.
        APPEND ls_ddls TO lt_ddls.
      ENDLOOP.
      IF lt_ddls[] IS NOT INITIAL.
        CALL FUNCTION 'RS_DD_WORKLIST_ACTIVATE'
          TABLES
            t_worklist = lt_ddls
          EXCEPTIONS
            OTHERS     = 4.
        IF sy-subrc <> 0.
          CALL METHOD lcl_wb=>log_message.
          MESSAGE e666(01) WITH 'Error during activation of CDS view' INTO sy-lisel. "#EC *
          CALL METHOD lcl_wb=>log_message.
        ENDIF.
      ENDIF.

      APPEND LINES OF gr_guistatus  TO lr_objname.   "non DDIC
      APPEND LINES OF gr_domname    TO lr_objname.   "DDIC
      APPEND LINES OF gr_rollname   TO lr_objname.   "DDIC
      APPEND LINES OF gr_tabname    TO lr_objname.   "DDIC
      APPEND LINES OF gr_shlpname   TO lr_objname.   "DDIC
      APPEND LINES OF gr_viewname   TO lr_objname.   "DDIC
      APPEND LINES OF gr_enqname    TO lr_objname.   "DDIC
      APPEND LINES OF gr_ttypname   TO lr_objname.   "DDIC
      APPEND LINES OF gr_indexes    TO lr_objname.   "DDIC

      DELETE lr_objname WHERE sign EQ 'E'.   "remove exclusions
      IF NOT lr_objname[] IS INITIAL.
        SELECT * FROM dwinactiv INTO TABLE lt_dwinactiv
                WHERE object   IN lr_object    "EC Dummy
                  AND obj_name IN lr_objname.
        READ TABLE gr_tabname WITH KEY sign = 'I' TRANSPORTING NO FIELDS.
        IF sy-subrc EQ 0.  "do not add objects if range gr_tabname contains no entries or only entries with SIGN = 'E'
          "add partly active structures/tables
          SELECT tabname AS obj_name FROM dd02l APPENDING CORRESPONDING FIELDS OF TABLE lt_dwinactiv
                  ##too_many_itab_fields   ">=SAPBASIS740    pragma as of 720
                  WHERE tabname IN gr_tabname AND actflag EQ 'U'.    "e.g. partly active
          LOOP AT lt_dwinactiv ASSIGNING <ls_dwinactiv> WHERE object IS INITIAL.
            <ls_dwinactiv>-object = 'TABL'.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

    "add all relevant inactive objects also to current user's worklist
    "gets relevant if a different user is doing the activation.
    "entries for all users will be deleted if any user activates the object
    LOOP AT lt_dwinactiv ASSIGNING <ls_dwinactiv> WHERE uname NE sy-uname.
      <ls_dwinactiv>-uname = sy-uname.
    ENDLOOP.
    INSERT dwinactiv FROM TABLE lt_dwinactiv ACCEPTING DUPLICATE KEYS.

    LOOP AT lt_dwinactiv ASSIGNING <ls_dwinactiv>
                             WHERE object EQ 'DOMA' OR
                                   object EQ 'DTEL' OR
                                   object EQ 'TABL' OR
                                   object EQ 'INDX' OR
                                   object EQ 'XINX' OR
                                   object EQ 'VIEW' OR
                                   object EQ 'ENQU' OR
                                   object EQ 'TTYP' OR
                                   object EQ 'SHLP'.
      DATA: l_obj_name TYPE e071-obj_name.
      l_obj_name = <ls_dwinactiv>-obj_name.

      DATA: lt_dd02v_inc TYPE TABLE OF dd02v,
            ls_dd02v_inc TYPE dd02v,
            l_auth_subrc TYPE sysubrc.

      CALL FUNCTION 'RS_DD_CHECK_ACTIVATE'
        EXPORTING
          objtype          = <ls_dwinactiv>-object
          objname          = l_obj_name
*         i_no_ui          = 'X' "not in all sap_basis releases
        EXCEPTIONS
          object_not_found = 0   "ignore invalid entries in DWINACTIV
          OTHERS           = 1.
      IF sy-subrc EQ 0.
        "check dependent database tables similar to DD_TABL_ACT
        "==> shall be part of RS_DD_CHECK_ACTIVATE of DD_TABL_ACT
        CALL FUNCTION 'DD_GET_INCLUDING_TABLES'    "Get tables which are
          EXPORTING                             "importing table TABNAME
            tabname  = <ls_dwinactiv>-obj_name(30)
          TABLES
            tabnames = lt_dd02v_inc.
        CLEAR l_auth_subrc.
        LOOP AT lt_dd02v_inc INTO ls_dd02v_inc.
          l_obj_name = ls_dd02v_inc-tabname.
          CALL FUNCTION 'RS_DD_CHECK_ACTIVATE'
            EXPORTING
              objtype           = 'TABL'
              objname           = l_obj_name
*             i_no_ui           = 'X' "not in all sap_basis releases
            EXCEPTIONS
              permission_error  = 1
              canceled          = 2
              object_not_found  = 3
              definition_error  = 4
              invalid_parameter = 5
              OTHERS            = 6.
          CASE sy-subrc.
            WHEN 0.
              CONTINUE.
            WHEN 1.
              MESSAGE e666(01) WITH 'No authorization to activate database table' <ls_dwinactiv>-obj_name '. Call transaction SU53 for details' INTO sy-lisel. "#EC *
            WHEN 4.
              MESSAGE e666(01) WITH 'Technical Settings are missing for table' l_obj_name INTO sy-lisel. "#EC *
            WHEN OTHERS.
              MESSAGE e666(01) WITH 'Error during activation of table' <ls_dwinactiv>-obj_name INTO sy-lisel. "#EC *
          ENDCASE.
          l_auth_subrc = sy-subrc.
          CALL METHOD log_message.
          EXIT.  "LOOP
        ENDLOOP.
        sy-subrc = l_auth_subrc.
      ENDIF.

      IF sy-subrc EQ 0.
        "DDIC always via RADMASG0
        "move DDIC objects to separate worklist
        APPEND <ls_dwinactiv> TO lt_dwinactiv_ddic.
        DELETE lt_dwinactiv.
      ELSE.
        MESSAGE e666(01) WITH 'No authorization to activate' <ls_dwinactiv>-object <ls_dwinactiv>-obj_name '. Call transaction SU53 for details' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        CASE <ls_dwinactiv>-object.
          WHEN 'DOMA'. DELETE gr_domname  WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'DTEL'. DELETE gr_rollname WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'TABL'.
            DELETE gr_tabname  WHERE low EQ <ls_dwinactiv>-obj_name.
            DELETE gr_indxtab  WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'INDX' OR 'XINX'. DELETE gr_indxname WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'VIEW'. DELETE gr_viewname WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'ENQU'. DELETE gr_enqname  WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'TTYP'. DELETE gr_ttypname WHERE low EQ <ls_dwinactiv>-obj_name.
          WHEN 'SHLP'. DELETE gr_shlpname WHERE low EQ <ls_dwinactiv>-obj_name.
        ENDCASE.
        DELETE lt_dwinactiv.
      ENDIF.
    ENDLOOP.

    IF lt_dwinactiv[] IS INITIAL AND lt_dwinactiv_ddic[] IS INITIAL AND gv_repository_changed IS INITIAL.
      IF testrun IS INITIAL.
        IF sy-cprog EQ myrepid.
          MESSAGE i666(01) WITH 'No activation neccessary' '' '' '' INTO sy-lisel. "#EC *
        ELSE.
          MESSAGE i666(01) WITH 'No activation neccessary' '' '' ''. "#EC *
        ENDIF.
        CALL METHOD log_message.
      ELSEIF sy-cprog EQ myrepid.
        MESSAGE i666(01) WITH 'Press button Back (F3) to leave the simulation.' '' '' '' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
      ENDIF.
      IF gv_translation EQ 'X'.
        MESSAGE i666(01) WITH 'Translation has been updated' '' '' '' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
      ENDIF.
    ELSEIF NOT gv_errors_occured IS INITIAL.
      MESSAGE a666(01) WITH 'Activation was skipped because of errors' 'in previous steps. Please try again.' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
    ELSEIF NOT i_result_auth_check IS INITIAL.
      MESSAGE e666(01) WITH 'No authorization to activate the DDIC changes.' 'Call transaction SU53 for details' '' '' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
    ELSE.  "do the activation

      IF NOT lt_dwinactiv[] IS INITIAL.
        "1) activate non DDIC objects (e.g. CUAD) online
        MESSAGE s357(scwn).
        CALL FUNCTION 'RS_WORKING_OBJECT_ACTIVATE'
          EXPORTING
            dictionary_only = ' '
*           cwb_mode        = 'X'
*           UI_DECOUPLED    = 'X' "as of SAPBASIS740
          TABLES
            objects         = lt_dwinactiv
          EXCEPTIONS
            OTHERS          = 5.
        IF sy-subrc NE 0.
          lv_answer = 'A'.
          CALL METHOD log_message.
          MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.

      LOOP AT lt_dwinactiv_ddic ASSIGNING <ls_dwinactiv> WHERE object EQ 'TABL' AND obj_name EQ 'DOKIL'.
        MESSAGE w666(01) WITH 'Please use SE11 to activate Database Table'  <ls_dwinactiv>-obj_name INTO sy-lisel. "#EC *
        MESSAGE w666(01) WITH 'Please use SE11 to activate' 'Technical Settings of Database Table'  <ls_dwinactiv>-obj_name INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        DELETE gr_tabname   WHERE low EQ <ls_dwinactiv>-obj_name.
        DELETE gr_dbtabname WHERE low EQ <ls_dwinactiv>-obj_name.
        DELETE lt_dwinactiv_ddic.
      ENDLOOP.

      IF NOT lt_dwinactiv_ddic[] IS INITIAL AND lv_answer NE 'A'.
        IF NOT gv_unit_test IS INITIAL OR NOT genview IS INITIAL.
          lv_answer = '1'.  "force online activation
        ELSE.
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              titlebar              = 'Activation'          "#EC NOTEXT
              text_question         = 'How do you want to activate DDIC?' "#EC NOTEXT
              text_button_1         = 'Online'              "#EC NOTEXT
              text_button_2         = 'Batch'               "#EC NOTEXT
              display_cancel_button = 'X'
            IMPORTING
              answer                = lv_answer
            EXCEPTIONS
              OTHERS                = 1.
          IF sy-subrc <> 0.
            MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            CALL METHOD log_message.
          ENDIF.
        ENDIF.
      ENDIF.

      IF sy-repid(2) EQ '%_'. "Temp. Subroutine Pool
        l_logname = 'UDO'.
      ELSEIF sy-repid(1) EQ '/'.
        SPLIT sy-repid AT '/' INTO l_logname l_logname l_logname. "remove namespace
      ELSE.
        l_logname = sy-repid.
      ENDIF.
      CONCATENATE l_logname sy-datum sy-uzeit INTO l_logname SEPARATED BY '_'.

      IF lv_answer EQ '1'.  "online
        "2a) activate DDIC online
        IF sy-repid(2) EQ '%_'. "Temp. Subroutine Pool
          l_logname = 'UDO'.
        ELSEIF sy-repid(1) EQ '/'.
          SPLIT sy-repid AT '/' INTO l_logname l_logname l_logname. "remove namespace
        ELSE.
          l_logname = sy-repid.
        ENDIF.

        CALL METHOD lcl_wb=>save_log. "save log makes sense here in case that activation dumps (e.g. time out)

        CONCATENATE l_logname ':' sy-datum ':' sy-uzeit INTO l_logname.

        DATA: lt_ddxtt_before TYPE TABLE OF ddxtt,
              lt_ddxtt_after  TYPE TABLE OF ddxtt,
              ls_ddxtt        TYPE ddxtt.
        SELECT * FROM ddxtt INTO CORRESPONDING FIELDS OF TABLE lt_ddxtt_before. "#EC CI_ALL_FIELDS_NEEDED "#EC CI_NOWHERE  "usually empty, if not want need ALL entries

        DATA: lt_swotice TYPE TABLE OF swotice.
        IF gr_tabname[] IS NOT INITIAL.
*          SELECT * FROM swotice INTO TABLE lt_swotice WHERE tabname IN gr_tabname.
*          IF sy-subrc EQ 0.
*            DELETE swotice FROM TABLE lt_swotice.
*          ENDIF.
        ENDIF.
        IF activation_mode EQ '2'.   "two step activation
          CALL METHOD mass_activation   "Step 1, only for two step activation
            EXPORTING
              i_step     = 1
              i_logname  = space "no log, any error messages will appear in step 2 also
              i_ddmode   = 'T'
              i_inactive = 'X'
            EXCEPTIONS
              error      = 1.
        ELSE.
          CLEAR sy-subrc.
        ENDIF.
        IF sy-subrc EQ 0.
          CALL METHOD mass_activation  "Step 2, always
            EXPORTING
              i_step     = 2
              i_logname  = l_logname
              i_ddmode   = 'O'
              i_frcact   = 'X'    "force activation od dependent objects
              i_inactive = ' '
            EXCEPTIONS
              error      = 1.
        ENDIF.

        DATA: l_act_subrc TYPE sy-subrc.
        l_act_subrc = sy-subrc.

        SELECT * FROM ddxtt INTO CORRESPONDING FIELDS OF TABLE lt_ddxtt_after. "#EC CI_NOWHERE
        LOOP AT lt_ddxtt_after INTO ls_ddxtt.
          READ TABLE lt_ddxtt_before WITH KEY tabname  = ls_ddxtt-tabname
                                              modeflag = ls_ddxtt-modeflag TRANSPORTING NO FIELDS.
          IF sy-subrc EQ 0.
            DELETE lt_ddxtt_after.
          ELSE.
            "new entry in ddxtt
*            MESSAGE w666(01) WITH 'Unexpected entry in DDXTT:' ls_ddxtt-tabname ls_ddxtt-modeflag INTO sy-lisel. "#EC *
*            CALL METHOD log_message.
          ENDIF.
        ENDLOOP.
        IF lt_ddxtt_after[] IS NOT INITIAL.
          DELETE ddxtt FROM TABLE lt_ddxtt_after.  "delete unexpected entries
        ENDIF.

        IF NOT lt_swotice[] IS INITIAL.
          INSERT swotice FROM TABLE lt_swotice.
        ENDIF.

        CLEAR l_message.
        IF l_act_subrc EQ 0.
          LOOP AT gr_dbtabname INTO ls_tabname WHERE NOT low IS INITIAL.
            "check DB object
            SUBMIT rutdbchk WITH tabname  EQ ls_tabname-low "#EC CI_SUBMIT
                            WITH showlist EQ 'X'
                            EXPORTING LIST TO MEMORY
                            AND RETURN.
            CALL FUNCTION 'LIST_FROM_MEMORY'
              TABLES
                listobject = lt_list
              EXCEPTIONS
                OTHERS     = 0.

            CALL FUNCTION 'LIST_TO_ASCI'
              TABLES
                listasci   = lt_ascii
                listobject = lt_list
              EXCEPTIONS
                OTHERS     = 0.

            SET LOCALE LANGUAGE ' '.
            READ TEXTPOOL 'RUTDBCHK' INTO lt_textpool LANGUAGE sy-langu.
            SET LOCALE LANGUAGE 'E'.
            IF lt_textpool IS INITIAL.
              READ TEXTPOOL 'RUTDBCHK' INTO lt_textpool LANGUAGE 'D'. "masterlang of RUTDBCHK
            ENDIF.

            "expected messages:  text-021 and text-023
            LOOP AT lt_textpool INTO ls_textpool WHERE key EQ '021' OR key EQ '023' .
              LOOP AT lt_ascii TRANSPORTING NO FIELDS WHERE table_line CS ls_textpool-entry.
                EXIT.
              ENDLOOP.
              IF sy-subrc NE 0.
                MESSAGE e666(01) WITH 'Database object of table' ls_tabname-low 'is inconsistent!' INTO l_message. "#EC *
                CALL METHOD log_message.
              ENDIF.
            ENDLOOP.
          ENDLOOP.

          LOOP AT gr_dbviewname INTO ls_tabname WHERE NOT low IS INITIAL.
            "check DB object
            SUBMIT rddviewc WITH viewname EQ ls_tabname-low "#EC CI_SUBMIT
                           EXPORTING LIST TO MEMORY
                           AND RETURN.
            CALL FUNCTION 'LIST_FROM_MEMORY'
              TABLES
                listobject = lt_list
              EXCEPTIONS
                OTHERS     = 0.
            CALL FUNCTION 'LIST_TO_ASCI'
              TABLES
                listasci   = lt_ascii
                listobject = lt_list
              EXCEPTIONS
                OTHERS     = 0.
            "expected message:
            MESSAGE s410(mc) INTO sy-lisel. "sy-lisel.
            LOOP AT lt_ascii TRANSPORTING NO FIELDS WHERE table_line CS sy-lisel.
              EXIT.
            ENDLOOP.
            IF sy-subrc NE 0. "success message not found
              MESSAGE e666(01) WITH 'Database object of view' ls_tabname-low 'is inconsistent!' INTO l_message. "#EC *
              CALL METHOD log_message.
            ENDIF.
          ENDLOOP.

          APPEND LINES OF gr_ttypname TO gr_tabname.
          APPEND LINES OF gr_rollname TO gr_tabname.

          LOOP AT gr_tabname INTO ls_tabname WHERE NOT low IS INITIAL.
            TRY.                                                                                          ">=SAPBASIS640
                CREATE DATA l_dref TYPE (ls_tabname-low).
              CATCH cx_sy_create_data_error.                                                              ">=SAPBASIS640
                MESSAGE e666(01) WITH 'Data Type' ls_tabname-low 'is inconsistent' INTO l_message. "#EC * ">=SAPBASIS640
                CALL METHOD log_message. ">=SAPBASIS640
            ENDTRY.                                                                                       ">=SAPBASIS640
          ENDLOOP.
          IF l_message IS INITIAL.
            CLEAR sy-subrc.
          ELSE.
            MESSAGE e666(01) WITH 'DDIC activation step 3 ended with errors.' INTO sy-lisel. "#EC *
            CALL METHOD log_message.
            sy-subrc = 4.
          ENDIF.
        ENDIF.

        IF sy-subrc EQ 0.
          MESSAGE s666(01) WITH 'DDIC activation successful' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
          CALL METHOD set_context
            EXPORTING
              i_langu    = space
              i_object   = space
              i_obj_name = 'Detailed Log'.                  "#EC *

          MESSAGE i626(do) WITH 'Click this message to view' 'detailed activation logs with name' l_logname INTO sy-lisel. "#EC *
          CALL METHOD log_message.
          "RADMASG0 does not remove DWINACTIV for XINX hence we cleanup here
          DATA: ls_dwinactiv TYPE dwinactiv.
          LOOP AT lt_dwinactiv_ddic INTO ls_dwinactiv WHERE object EQ 'XINX'.
            DELETE FROM dwinactiv WHERE object EQ 'XINX' AND obj_name EQ ls_dwinactiv-obj_name.
          ENDLOOP.
        ELSE.
          "e.g. no authorization for activation or conversion of dependent database tables
          "make sure that the objects appear as inactive; corresponding are removed by DDIC activation phase 1 although phase 2 or 3 may fail.
          MODIFY dwinactiv FROM TABLE lt_dwinactiv_ddic.
          CALL METHOD set_context
            EXPORTING
              i_langu    = space
              i_object   = space
              i_obj_name = 'Detailed Log'.                  "#EC *
          MESSAGE w626(do) WITH 'Click this message to view' 'detailed activation logs with name' l_logname INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.

      ELSEIF lv_answer EQ '2' .
        "2b) activate DDIC objects via batch job
        ls_job-jobname = sy-repid.

        CALL FUNCTION 'JOB_OPEN'
          EXPORTING
            jobname          = ls_job-jobname
          IMPORTING
            jobcount         = ls_job-jobcount
          CHANGING
            ret              = lv_rc
          EXCEPTIONS
            cant_create_job  = 1
            invalid_job_data = 2
            jobname_missing  = 3
            OTHERS           = 4.
        IF sy-subrc <> 0 OR lv_rc NE 0.
          MESSAGE e026(bt) WITH ls_job-jobname INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ELSE.
          IF activation_mode EQ '2'.
            SUBMIT radmasg0 WITH domname  IN gr_domname  "#EC CI_SUBMIT
                            WITH rollname IN gr_rollname
                            WITH tabname  IN gr_tabname
                            WITH indxtab  IN gr_indxtab
                            WITH indxname IN gr_indxname
                            WITH viewname IN gr_viewname
                            WITH ttypname IN gr_ttypname
                            WITH shlpname IN gr_shlpname
                            WITH logname  EQ l_logname
                            WITH logshow  EQ 'X'      "show log in SPOOL

                            WITH ddmode   EQ 'T'
                            WITH inactive EQ 'X'

                            VIA JOB ls_job-jobname
                            NUMBER ls_job-jobcount
                            AND RETURN.
          ENDIF.
          "remove exclusions for next step
          DELETE gr_tabname  WHERE sign EQ 'E'.
          DELETE gr_viewname WHERE sign EQ 'E'.

          SUBMIT radmasg0 WITH domname  IN gr_domname    "#EC CI_SUBMIT
                          WITH rollname IN gr_rollname
                          WITH tabname  IN gr_tabname
                          WITH indxtab  IN gr_indxtab
                          WITH indxname IN gr_indxname
                          WITH viewname IN gr_viewname
                          WITH ttypname IN gr_ttypname
                          WITH shlpname IN gr_shlpname
                          WITH logname  EQ l_logname
                          WITH logshow  EQ 'X'      "show log in SPOOL

                          WITH ddmode   EQ 'O'
                          WITH inactive EQ ' '

                          VIA JOB ls_job-jobname
                          NUMBER ls_job-jobcount
                          AND RETURN.

          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              jobcount  = ls_job-jobcount
              jobname   = ls_job-jobname
              strtimmed = 'X'
            EXCEPTIONS
              OTHERS    = 1.
          IF sy-subrc EQ 0.
            MESSAGE s305(ut) WITH ls_job-jobname INTO sy-lisel. "#EC *
            CALL METHOD log_message.
            CALL METHOD set_context
              EXPORTING
                i_langu    = space
                i_object   = space
                i_obj_name = 'Detailed Log'.                "#EC *
            MESSAGE w666(01) WITH 'Use Report RADPROTB to view' 'activation log' l_logname 'after job has finished in transaction SMX.' INTO sy-lisel. "#EC *
            CALL METHOD log_message.
          ELSE.
            MESSAGE e026(bt) WITH ls_job-jobname INTO sy-lisel. "#EC *
            CALL METHOD log_message.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    DATA: l_langu TYPE langu.
    LOOP AT gt_skipped_languages[] INTO l_langu.
      SELECT SINGLE sptxt FROM t002t INTO sy-lisel WHERE spras EQ 'E' AND sprsl EQ l_langu.
      CONCATENATE '(' sy-lisel ')' INTO sy-lisel.
      MESSAGE i666(01) WITH 'Language' l_langu sy-lisel 'is not installed and has been skipped.' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
    ENDLOOP.

    CALL METHOD set_context
      EXPORTING
        i_langu    = space
        i_object   = space
        i_obj_name = 'Method Execution'.                    "#EC *

    CALL METHOD lcl_wb=>execute_method   "e.g. OSOD, SCP2
      EXPORTING
        i_method = trmtd_after_imp.


    "Refresh some fields
    SET PARAMETER ID 'EUK' FIELD space.
    EXPORT current_devclass FROM space TO MEMORY ID 'EUK'.

  ENDMETHOD.                    "activate

  METHOD mass_activation.

    CONSTANTS: lc_active VALUE 'A'.

    DATA: lt_log TYPE TABLE OF trlog,
          ls_log TYPE trlog.

    IF i_step EQ 2.
      "remove exclusions for step 2
      DELETE gr_tabname  WHERE sign EQ 'E'.
      DELETE gr_viewname WHERE sign EQ 'E'.
    ENDIF.

    SUBMIT radmasg0 WITH domname  IN gr_domname          "#EC CI_SUBMIT
                    WITH rollname IN gr_rollname
                    WITH tabname  IN gr_tabname
                    WITH indxtab  IN gr_indxtab
                    WITH indxname IN gr_indxname
                    WITH viewname IN gr_viewname
                    WITH enquname IN gr_enqname
                    WITH ttypname IN gr_ttypname
                    WITH shlpname IN gr_shlpname
                    WITH logname  EQ i_logname
                    WITH logshow  EQ space

                    WITH inactive EQ i_inactive
                    WITH ddmode   EQ i_ddmode
                    WITH frcact   EQ i_frcact

                    AND RETURN.

    IMPORT act_rc TO sy-subrc FROM MEMORY ID 'ACRC'.

    CHECK NOT i_logname IS INITIAL.

    IF sy-subrc > 4.  "4 is only warning
      CHECK i_step NE 1.  "messages of step 1 have to be ignored
      MESSAGE e666(01) WITH 'DDIC activation step' i_step 'ended with errors:' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      CALL FUNCTION 'TR_READ_LOG'
        EXPORTING
          iv_log_type   = 'DB'
          iv_logname_db = i_logname
        TABLES
          et_lines      = lt_log
        EXCEPTIONS
          OTHERS        = 0.
      "append errors from activation log (idea for future: show all messages from entire phase 004 and 005)
      LOOP AT lt_log INTO ls_log WHERE severity EQ 'E' OR newsection EQ 'X'.
        IF ls_log-newsection EQ 'X'.
          IF ls_log-severity EQ 'E'.  "error as first line in new section
            sy-lisel = 'Activation'.                        "#EC NOTEXT
          ELSE.
            MESSAGE i666(01) WITH ls_log-line(50) ls_log-line+50(50) ls_log-line+100 INTO sy-lisel. "#EC *
          ENDIF.
          CALL METHOD set_context
            EXPORTING
              i_langu    = space
              i_object   = space
              i_obj_name = sy-lisel.
        ENDIF.
        IF ls_log-severity EQ 'E'.
*        MESSAGE e099(ut) WITH ls_log-line(50) ls_log-line+50(50) ls_log-line+100 INTO sy-lisel. "#EC *
          MESSAGE e666(01) WITH ls_log-line(50) ls_log-line+50(50) ls_log-line+100 INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
      ENDLOOP.
      RAISE error.
    ENDIF.

  ENDMETHOD.                    "mass_activation

  METHOD language_installed.
    DATA: l_languages TYPE string.

    CLEAR r_installed.

    IF i_langu IS INITIAL OR gv_master_languages CS i_langu.
      r_installed = 'X'.
    ELSE.
      CALL FUNCTION 'SYSTEM_INSTALLED_LANGUAGES'
        IMPORTING
          languages       = l_languages
        EXCEPTIONS
          sapgparam_error = 1
          OTHERS          = 2.
      IF sy-subrc NE 0 OR l_languages CS i_langu.
        r_installed = 'X'.
      ELSE.
        COLLECT i_langu INTO gt_skipped_languages.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "language_installed

  METHOD create_logical_object.

    DATA: lt_e071k         TYPE TABLE OF e071k,
          ls_e071k         TYPE e071k,
          lt_e071          TYPE TABLE OF e071,
          ls_e071          TYPE e071,
          l_languages(255),
          lt_keys          TYPE tr_keys,
          dref             TYPE REF TO data.

    FIELD-SYMBOLS: <lt_table> TYPE STANDARD TABLE,
                   <ls_table> TYPE any.
    CALL METHOD set_context
      EXPORTING
        i_langu    = space
        i_object   = i_object
        i_obj_name = i_obj_name.

    CALL METHOD lcl_wb=>add_to_transport
      EXPORTING
        i_object   = i_object
        i_obj_name = i_obj_name
        i_devclass = i_devclass
        i_langu    = i_langu
      EXCEPTIONS
        simulation = 0
        OTHERS     = 1.
    IF sy-subrc NE 0.
      RAISE error.
    ENDIF.

    CHECK approved_logical_objects CS i_object.

    IF testrun IS INITIAL.
      CASE i_object.
        WHEN 'IWPR'.
          DATA: enqueue_/iwbep/e_sbdm_pr TYPE funcname VALUE 'ENQUEUE_/IWBEP/E_SBDM_PR',
                lv_project(30), lv_user TYPE syuname.
          lv_project = i_obj_name.
          CALL FUNCTION enqueue_/iwbep/e_sbdm_pr
            EXPORTING
              mode_/iwbep/i_sbd_pr = 'X'
              project              = lv_project
              _scope               = '3'
            EXCEPTIONS
              foreign_lock         = 1
              system_failure       = 2
              OTHERS               = 3.
        WHEN 'SUCD'.
          DATA: enqueue_e_sacf   TYPE funcname VALUE 'ENQUEUE_E_SACF',
                lv_scen_name(40). "scen_name.
          lv_scen_name = i_obj_name.
          CALL FUNCTION enqueue_e_sacf
            EXPORTING
              mode_tobj_chk_ctrl_dh = 'E'
              name                  = lv_scen_name
            EXCEPTIONS
              foreign_lock          = 1
              system_failure        = 2
              OTHERS                = 3.
        WHEN 'TRAN'.
          "copied from CALL FUNCTION 'RPY_TRANSACTION_DELETE'
          IF i_masterlang IS NOT INITIAL AND i_langu EQ i_masterlang.
            DELETE FROM tstc    WHERE tcode EQ i_obj_name.
            DELETE FROM tstca   WHERE tcode EQ i_obj_name.
            DELETE FROM tstcc   WHERE tcode EQ i_obj_name.
            DELETE FROM tstcp   WHERE tcode EQ i_obj_name.
            DELETE FROM usobt   WHERE name  EQ i_obj_name AND type EQ 'TR'. ">=SAPBASIS702
            DELETE FROM usobx   WHERE name  EQ i_obj_name AND type EQ 'TR'. ">=SAPBASIS702
            DELETE FROM usott   WHERE name  EQ i_obj_name AND type EQ 'TR'. ">=SAPBASIS702
            DELETE FROM usob_sm WHERE name  EQ i_obj_name AND type EQ 'TR'. ">=SAPBASIS702
          ENDIF.
          DELETE FROM tstct   WHERE tcode EQ i_obj_name AND sprsl EQ i_langu.
          CLEAR sy-subrc.
        WHEN OTHERS.
          CLEAR sy-subrc.
      ENDCASE.
      IF sy-subrc NE 0.
        lv_user = sy-msgv1.
        MESSAGE e666(01) WITH i_object i_obj_name 'is locked by user' lv_user INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RAISE error.
      ENDIF.
    ENDIF.

    ls_e071-object   = i_object.
    ls_e071-obj_name = i_obj_name.
    l_languages      = i_langu.
    IF i_masterlang IS INITIAL.  "deletion
      CALL FUNCTION 'SYSTEM_INSTALLED_LANGUAGES'
        IMPORTING
          languages = l_languages  "delete all potential languages ini one step
        EXCEPTIONS
          OTHERS    = 0.
    ENDIF.
    CALL FUNCTION 'RESOLVE_LOGICAL_OBJECT'
      EXPORTING
        e071_entry                = ls_e071
*       IV_NO_TADIR_OBJECT        = ' '
        iv_languages              = l_languages
      TABLES
        e071k_tab                 = lt_e071k
        e071_tab                  = lt_e071
      EXCEPTIONS
        no_logical_object         = 1
        logical_object_with_tadir = 2
        OTHERS                    = 3.
    IF sy-subrc NE 0.
      MESSAGE i666(01) WITH 'Definition of Logical Transport Object missing' INTO sy-lisel. "#EC *
    ENDIF.

    DELETE lt_e071k WHERE objname EQ 'APJ_W_JCE_GR_T'                   "'SAJC' wrong language key-> skip deletion
                       OR objname EQ 'HRS1000' OR objname EQ 'HRS1206'  "'PDTS'  wrong language key-> skip deletion
                       OR objname EQ 'HRS1002' "'PDWS'
                       OR objname EQ 'HRS1211'."'PDAC'

    LOOP AT lt_e071k INTO ls_e071k.

      AT NEW objname.
        CLEAR lt_keys[].
      ENDAT.

      IF i_object EQ 'ELEM'. "CB
*         APPEND ls_e071k TO lt_keys.   "Tabkey A version for later deletion
*        IF cpvers = 'M'.
        ls_e071k-tabkey+25(1) = 'M'. "Tabkey M version for later deletion
*        ENDIF.
      ENDIF.

      APPEND ls_e071k TO lt_keys.

      AT END OF objname.  "only once per table

        "for other than masterlang only language dependent tables
        IF i_masterlang IS NOT INITIAL AND i_langu NE i_masterlang.
          SELECT SINGLE tobj_name FROM objsl INTO sy-lisel    "fully buffered
                           WHERE objectname EQ i_object        "e.g. CUS0
                             AND objecttype EQ c_logical_object
                             AND tobj_name  EQ ls_e071k-objname      "TABNAME
                             AND ( tobjkey LIKE '%/L/%' OR tobjkey LIKE '%/L' ).
          CHECK sy-subrc EQ 0.
        ENDIF.

        DATA: l_whitelist TYPE string.
        SELECT SINGLE tabname FROM objs INTO l_whitelist
                             WHERE objectname EQ i_object
                               AND objecttype EQ c_logical_object
                               AND tabname    EQ ls_e071k-objname.
        IF sy-subrc NE 0.
          MESSAGE e666(01) WITH 'Cannot update table' ls_e071k-objname INTO sy-lisel. "#EC *
          CALL METHOD log_message.
          CONTINUE.
        ENDIF.

        CREATE DATA dref TYPE STANDARD TABLE OF (ls_e071k-objname) WITH DEFAULT KEY.
        ASSIGN dref->* TO <lt_table>.

        PERFORM get_table_key IN PROGRAM saplsrtt
                TABLES <lt_table> lt_keys
                USING  ls_e071k-objname space sy-mandt space space
*               USING  TABNAME DD02L-CLIDEP SY-MANDT MTYPE MTABNAME
                CHANGING sy-dbcnt.

        CHECK sy-dbcnt NE 0.

        IF testrun IS INITIAL.
          TRY.                                                   ">=NOTE1487337
              CALL METHOD cl_abap_dyn_prg=>check_whitelist_str   ">=NOTE1487337
                EXPORTING                                        ">=NOTE1487337
                  val       = ls_e071k-objname                   ">=NOTE1487337
                  whitelist = l_whitelist                        ">=NOTE1487337
                RECEIVING                                        ">=NOTE1487337
                  val_str   = ls_e071k-objname.                  ">=NOTE1487337
            CATCH cx_abap_not_in_whitelist.                      ">=NOTE1487337
              RETURN.   "will never happen                       ">=NOTE1487337
          ENDTRY.                                                ">=NOTE1487337
          DELETE (ls_e071k-objname) FROM TABLE <lt_table>. "#EC CI_DYNTAB.
          gv_repository_changed = 'X'.
        ENDIF.
      ENDAT.
    ENDLOOP.

    IF testrun IS INITIAL.
      CALL FUNCTION 'RS_TREE_OBJECT_PLACEMENT'
        EXPORTING
          type   = i_object
          object = i_obj_name.
    ENDIF.

  ENDMETHOD.                    "create_logical_object

  METHOD execute_method.

    DATA: ls_e070  TYPE e070,
          ls_e071  TYPE e071,
          lt_e071  TYPE TABLE OF e071,
          lt_e071k TYPE TABLE OF e071k,
          ls_trkey TYPE trkey.
    DATA: lt_result TYPE scts_cl_results.                  ">=SAPBASIS700
    DATA: lt_client TYPE trexe_t_client.

    DATA: lt_trlog  TYPE TABLE OF trlog,
          ls_trlog  TYPE trlog,
          lv_trkorr TYPE trkorr,
          lv_file   TYPE tstrf01-file.

    FIELD-SYMBOLS: <ls_method_call> TYPE trmtd_method_call.

    CHECK NOT i_method IS INITIAL.

    "get AFTER_IMP method
    SORT gt_trkey.
    DELETE ADJACENT DUPLICATES FROM gt_trkey COMPARING obj_type obj_name.
    LOOP AT gt_trkey INTO ls_trkey.
      ls_e071-pgmid    = 'R3TR'.
      ls_e071-object   = ls_trkey-obj_type.
      ls_e071-obj_name = ls_trkey-obj_name.
      APPEND ls_e071 TO lt_e071.
    ENDLOOP.

    CALL FUNCTION 'TRINT_FREE_MEMORY'.
    CONCATENATE sy-sysid 'K' sy-datum '_' sy-uzeit INTO lv_trkorr.

    CALL FUNCTION 'TR_INITIALIZE_LOG'  "Build temporary log file like DEV_20140415_142649.SNOTE
      EXPORTING
        acttype    = '_'
*       DIRTYPE    = 'T'
        sysname    = 'SNOTE'  "lv_sysname
        trkorr     = lv_trkorr
      IMPORTING
        file       = lv_file
      EXCEPTIONS
        wrong_call = 1
        OTHERS     = 2.
    ASSERT sy-subrc EQ 0.

*    CALL FUNCTION 'APPEND_PROTOCOL'.    "here error occurs depending on previous statements

    COMMIT WORK.  "save what we have reached so far

    DATA: trint_call_after_imp_method TYPE funcname VALUE 'TRINT_CALL_AFTER_IMP_METHOD'.
    IF sy-saprl >= '700'.
      APPEND sy-mandt TO lt_result.                                       ">=SAPBASIS700
      CALL FUNCTION trint_call_after_imp_method
        EXPORTING
          iv_trkorr          = space
          is_e070            = ls_e070
          it_e071            = lt_e071[]
          it_e071k           = lt_e071k[]
          iv_update_lockflag = ''  "'X'
        CHANGING                                                         ">=SAPBASIS700
          it_client          = lt_result                                ">=SAPBASIS700
        EXCEPTIONS
          error_message      = 1.
    ELSE.
      APPEND sy-mandt TO lt_client.
      CALL FUNCTION trint_call_after_imp_method
        EXPORTING
          iv_trkorr          = space
          is_e070            = ls_e070
          it_e071            = lt_e071[]
          it_e071k           = lt_e071k[]
          iv_update_lockflag = ''  "'X'
          it_client          = lt_client
        EXCEPTIONS
          error_message      = 1.
    ENDIF.

    IF sy-subrc NE 0.
      CALL METHOD log_message.
    ENDIF.

    CALL FUNCTION 'TR_READ_LOG'
      EXPORTING
        iv_log_type     = trlog_type_file
        iv_logname_file = lv_file
      TABLES
        et_lines        = lt_trlog
      EXCEPTIONS
        OTHERS          = 0.

    DELETE lt_trlog WHERE class EQ 'PU' AND number EQ '131'.  "No objects requiring post-import methods exist
    "append messages from method execution log
    LOOP AT lt_trlog INTO ls_trlog.
      CONCATENATE '(' ls_trlog-class '~' ls_trlog-number ')' INTO sy-msgv4. TRANSLATE sy-msgv4 USING '~ '.
      MESSAGE i666(01) WITH ls_trlog-line(50) ls_trlog-line+50(50) ls_trlog-line+100(31) sy-msgv4 INTO sy-lisel. "#EC *
      IF ls_trlog-class EQ 'SCPR' AND ( ls_trlog-number EQ 707 OR ls_trlog-number EQ 871 ).
        ls_trlog-severity = 'W'.   "increase severity for some messages
      ENDIF.
      sy-msgty = ls_trlog-severity.
      CALL METHOD log_message.
    ENDLOOP.

    CALL FUNCTION 'TR_DELETE_LOG'
      EXPORTING
        iv_log_type     = 'FILE'
        iv_logname_file = lv_file
      EXCEPTIONS
        OTHERS          = 0.

  ENDMETHOD.                    "execute_method


  METHOD create_table_entries.
*
    DATA: lt_ko200 TYPE TABLE OF ko200,
          ls_ko200 TYPE ko200,
          lt_e071k TYPE TABLE OF e071k,
          ls_e071k TYPE e071k.

    DATA: l_keylen                TYPE sy-fleng,
          ls_x030l                TYPE x030l,
          l_no_update,
          l_object                TYPE tadir-object,
          l_approved_system_table.

    FIELD-SYMBOLS: <ls_entry>   TYPE any,
                   <ls_entry2>  TYPE any,
                   <lt_entries> TYPE STANDARD TABLE,
                   <l_tabkey>   TYPE e071k-tabkey.
    DATA: dref TYPE REF TO data.

    IF i_logical_object IS INITIAL AND NOT it_entries[] IS INITIAL.
      CALL METHOD set_context
        EXPORTING
          i_langu    = i_langu
          i_object   = 'TABU'
          i_obj_name = i_tabname.
    ENDIF.

    IF i_logical_object EQ 'X'.  "used in older version
      SELECT SINGLE objectname INTO l_object FROM objs WHERE tabname EQ i_tabname AND objecttype EQ 'L'. "#EC CI_NOORDER
    ELSEIF i_logical_object IS NOT INITIAL.
      l_object = i_logical_object.
    ENDIF.

    "Currently only a bunch of tables is supported:
    " - client independent
    " - system tables (S / E / W) and customizing of type G
    " - key fields of data type char/numc

    "--- basic checks
    DATA: ls_dd02v  TYPE dd02v,
          lt_dd03p  TYPE TABLE OF dd03p,
          ls_state  TYPE dctablget VALUE 'A',
          l_rfcdest TYPE rfcdest.
    FIELD-SYMBOLS <ls_dd03p> TYPE dd03p.
    CALL FUNCTION 'DD_TABL_GET' DESTINATION l_rfcdest
      EXPORTING
        get_state             = ls_state
        langu                 = space
        tabl_name             = i_tabname
      IMPORTING
        dd02v_wa_a            = ls_dd02v
      TABLES
        dd03p_tab_a           = lt_dd03p
      EXCEPTIONS
        system_failure        = 98  MESSAGE sy-lisel
        communication_failure = 99  MESSAGE sy-lisel
        access_failure        = 1
        OTHERS                = 2.
    IF sy-subrc NE 0.
      MESSAGE e666(01) WITH 'Error reading table' i_tabname INTO sy-lisel. "#EC *
      RETURN.
    ENDIF.

    IF ls_dd02v IS INITIAL.
      CALL METHOD lcl_wb=>set_context( i_object = 'TABU' i_obj_name = i_tabname i_langu = space i_no_message = 'X' ).
      MESSAGE e666(01) WITH 'Table' i_tabname 'does not exist (yet).' INTO sy-lisel. "#EC *
      READ TABLE gt_tabname WITH KEY table_line = i_tabname TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.  "table will be created by report
        sy-msgty = 'I'.
      ENDIF.
      CALL METHOD lcl_wb=>log_message.
      CALL METHOD lcl_wb=>set_context( i_object = space i_obj_name = space i_langu = space ).
      RETURN.
    ELSEIF c_lang_field IS INITIAL.
      LOOP AT lt_dd03p ASSIGNING <ls_dd03p> WHERE keyflag EQ 'X' AND datatype EQ 'LANG'.
        IF c_lang_field IS INITIAL.
          c_lang_field = <ls_dd03p>-fieldname.  "assume first lang field is the correct one
        ELSE.
          CLEAR c_lang_field.  "more than one lang field -> disable multilang language
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.
    c_clidep   = ls_dd02v-clidep.
    c_contflag = ls_dd02v-contflag.
    IF NOT ls_dd02v-clidep IS INITIAL.
      IF ls_dd02v-contflag CA 'SE'.    "probably approved client dependent table
      ELSEIF i_logical_object EQ 'LODS'         OR  "approved_logical_objects
             i_logical_object EQ 'LODE'         OR
             i_logical_object EQ 'LOIE'         OR
             i_logical_object EQ 'LODC'         OR
             i_logical_object EQ 'PCYS'         OR
             i_logical_object EQ 'ACGR'         OR
             i_logical_object EQ 'FSEL'         OR   "Tables TFAW*
             i_tabname(14)    EQ '/FSPD/TCDIR_CA' OR
             i_tabname(5)     EQ 'APB_L'        OR  "LPDS??
             i_tabname(8)     EQ '/TMF/MD_'     OR
             i_tabname(12)    EQ 'TBCA_PAY_GA_' OR
             i_tabname        CP 'SMMW*PARAM*'.
        l_approved_system_table = 'X'.      "approved client dependent table
      ELSE.
        "do not allow update
        IF NOT it_entries[] IS INITIAL.  "not during initial call
          MESSAGE e666(01) WITH 'Skipping table ' i_tabname 'because it is client dependent.' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
*        EXIT.    "do not EXIT and trigger "manual/BCSet"
      ENDIF.
    ENDIF.
    CASE ls_dd02v-contflag.
      WHEN 'S' OR 'E' OR 'W'. "W for SCP2
        "later: MODIFY (i_tabname) FROM TABLE it_entries.
      WHEN 'G'.
        "later: INSERT (i_tabname) FROM TABLE it_entries ACCEPTING DUPLICATE KEYS.
      WHEN OTHERS.   "'W' OR 'L' OR 'A' OR 'C'.
        IF NOT it_entries[] IS INITIAL. "not during initial call
          MESSAGE e666(01) WITH 'Skipping table ' i_tabname 'because of delivery class' ls_dd02v-contflag INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
        EXIT.
    ENDCASE.

    "dynamic check for simple client independent system tables
    IF ls_dd02v-contflag CA 'SE'.
      DELETE lt_dd03p WHERE fieldname(6) EQ c_include6.
      LOOP AT lt_dd03p TRANSPORTING NO FIELDS WHERE ( datatype    NE 'CLNT' AND
                                                      datatype    NE 'CHAR' AND
                                                      datatype    NE 'NUMC' AND

                                                      datatype    NE 'CUKY' AND
                                                      datatype    NE 'UNIT' AND
                                                      datatype    NE 'TIMS' AND

                                                      datatype    NE 'LANG' AND
                                                      datatype    NE 'DATS' AND
                                                      datatype    NE 'DEC'  AND
                                                      datatype(3) NE 'INT' )
                                                 OR ( datatype(3) EQ 'INT' AND keyflag IS NOT INITIAL )
                                                 OR ( datatype    EQ 'DEC' AND keyflag IS NOT INITIAL )
*                                                 OR ( decimals    NE 0 )       " works with = '500.12 ' (independent from sy-langu)
                                                 OR ( outputlen > 255 ).
        EXIT.
      ENDLOOP.
      IF sy-subrc NE 0.
        l_approved_system_table = 'X'.
      ENDIF.
    ENDIF.


    CASE i_tabname.
        "------- transported as TABU, update via MODIFY -> no deletions supported
      WHEN 'PACHARCCTLGCNTNT' OR        "e.g. ER9K517567

           'T511K' OR 'T511P' OR

           'TVIMF' OR                                                    "view events
           'TRESC' OR                                                    "reserved namespace
           'T100S' OR 'T100SA' OR                                        "variable messages
           'THLPF' OR                                                    "assigment DZ / screen fields
           'IWREFERENC' OR    "Keno Link in Release Note
           'TRGTS_SOURCE' OR 'TRGTS_SOURCE_T' OR 'TKEDR' OR 'TKEDRT' OR  "TARO project
           'ROMDDELTA' OR 'ROOHIECAT' OR 'ROOHIECOM' OR 'ROOSESRMAP' OR  "OSOD Datasource
           'ROOSFIELD' OR 'ROOSOURCE' OR 'ROOSOURCET' OR 'ROOSSEG'   OR  "OSOD Datasource
           'BALOBJ' OR 'BALOBJT' OR 'BALSUB' OR 'BALSUBT' OR             "CDAT APPL_LOG  Application log defintion (SLG0)
           'IDMX_DI_TXTOB' OR
           '/PLMB/FRW_TABPRO' OR                                         "VDAT /PLMB/V_TABPRO
           '/BA1/FU_KF_SAP' OR '/BA1/FU_KF_SAPT' OR

           '/UI5/TREP_TEXT' OR                                           "contains DEC field

           'MASSFLDLST' OR                                               "Fields allowed in transaction MASS
           'SGT_CFUN_L' OR 'SGT_CFUN_T' OR                               "Segmentation
           'CRMI_IMP_IOBJSM' OR 'CRMI_IMP_IOBJSMT' OR 'CRMI_MKTPL_FLDSM' OR "InfoObject Semantics

           'AMPI_SRUNOBJ' OR 'AMPI_SDIM' OR 'AMPI_SDIM_T' OR 'AMPI_SMEAS' OR

           'DDDDLSRC' OR 'DDDDLSRCT' OR "'DDLS' , usually delivered via SNOTE

*           IDOCs deactived 08.10.2015, example EBSK246971
*           'EDISDEF' OR 'EDISEGMENT' OR 'EDSAPPL' OR                     "TDAT EDISEGMENT
*           'EDMSG' OR 'EDIMSG' OR 'EDIMSGT' OR                           "TDAT BDBG,  VDAT VEDI_EDMSG,
*           'EDIFCT' OR 'TBDBA' OR 'TBDBE' OR 'TBDBH' OR 'TBDBS' OR       "TDAT BDBG

           'ARCH_USR' OR 'TBKKARCHEVENTS' OR                             "'AOBJ'
           'TZK08' OR                                                     "Allocation: Calculation type - KOPO fields
           'TBCA_PAY_GA_SPLT' OR 'TBCA_PAY_GA_S_T' OR
           'TZFB' OR 'TZFBT' OR
           'CRMCHKMSG' OR 'CRMCHKMSGT' OR                                 "Checkman/ATC customizing

            'T185' OR 'T185D' OR 'T185T' OR 'T185F' OR 'T185V' OR 'TAXITABS' OR           "VFBS
            'TC02' OR

           'PPH_HANA_ACTIVE' OR                                       "PPH

           'TC33' OR 'TC34' OR 'T354B' OR                               "Status handling

*           'T511K' or 'T512L' or 'T511P' or 'T511T' or 'T5QSG' or 'T5QTM' or 'T5QTX' OR


           'TKCOD' OR 'TKCODT' OR 'TKCOH' OR 'TKCOHW' OR 'TKCOR' OR 'TKCOU' OR   "VCLS VC_TKCOD

           'TMC73' OR

           'OROBJROLES' OR

*           'SWOTICE' or

           'TCNS_APPL' OR 'TCNS_EXPOBJ' OR 'TCNS_EXP_REC' OR 'TCNS_RECEIVERS' OR

           'FINB_TR_TCAT' OR 'FINB_TR_TCATT' OR 'FINB_TR_TAPPL' OR 'FINB_TR_TAPPLT' OR

           'TXW_C_SOEX' OR 'TXW_C_STRC' OR 'TXW_C_STRC_T' OR

           '/SAPPO/S_BPROC  ' OR
           '/SAPPO/S_BPROC_T' OR
           'ECHS_PP_PROCESS ' OR
           'ECHS_PROCESSES  ' OR
           'ECHS_PROCESSES_T' OR
           'FEHT_PROXY2CMPR ' OR

           '/BA1/TB1_BUSTRC'  OR       "Bank Analyzer
           '/BA1/TB1_CM06'    OR
           '/BA1/TB1_CM07_SA' OR
           '/BA1/TB1_CM02'    OR
           '/BA1/TB1_CM03_SA' OR
           '/BA1/TB1_CM01'    OR
           '/BA1/TB1_CM05_SA' OR
           '/BA1/TB1_ITMPAT'  OR
           '/BA1/TB1_CM04_SA' OR
           '/BA1/TB1_ACCKF2S' OR
           '/BA1/TB1_ACC_KF1' OR
           '/BA1/FU_KFCL'     OR
           '/BA1/FU_CURTYPE'  OR
           '/BA1/FU_KFCL_TXT' OR
           '/BA1/TB1_ACCKF1T' OR
           '/BA1/TB1_CM01T'   OR
           '/BA1/TB1_CM02T'   OR
           '/BA1/TB1_CM06T'   OR
           '/BA1/TB1_CM08'    OR
           '/BA1/TB1_CM08T'   OR
           '/BA1/TB1_CM20'    OR
           '/BA1/TB1_ITMPATT' OR
           '/BA1/F7_AED_AN'   OR
           '/BA1/B1_PROCCATG' OR
           '/BA1/B1_PROCCATT' OR
           '/BA1/TIA_AECAT'   OR
           '/BA1/TIA_AECAT_T' OR
           '/BA1/TIA_CAT2APP' OR
           '/BA1/TB1_BUSTRCT' OR
           '/BA1/F0_LOC_FIX'  OR

           '/FSPD/TCDIR_CAGT' OR
           '/FSPD/TCDIR_CATG' OR

*           'FILENAMECI' or  "CDAT  FILENAME
*           'FILEPATH'   or  "CDAT  FILENAME

           '/SRMSMC/EXTN_LOC' OR
           '/SRMSMC/EXTN_LOT' OR
           '/SRMSMC/S_DNBFS'  OR
           '/SRMSMC/S_DNBFST' OR
           '/SRMSMC/S_DNBLF'  OR
           '/SRMSMC/S_DNBLFT' OR
           '/SRMSMC/S_SWITCH' OR
           '/SRMSMC/S_SWITCT' OR
           'RSECACHK'         OR

           'APB_LAUNCHPADT  ' OR
           'APB_LAUNCHPAD_V ' OR
           'APB_LPD_CONTROL ' OR
           'APB_LPD_OTR_KEYS' OR
           'APB_LPD_VERSIONS' OR

           'CTE_I_CHECK_DSET' OR

           'SMMW_PARAMGRTYP ' OR
           'SMMW_PARAMTYP   ' OR
           'SMMW_PARAMGROUP ' OR
           'SMMWPARAM       ' OR
           'SMMWPARAMKEY    ' OR
           'SMMWPARAMKEYT   ' OR
           'SMMWPARAMNAME   ' OR
           'SMMWPARAMNAMET  ' OR
           'SMMWPARAMVALUE  ' OR
           'SMMWPARAMVALUET ' OR

           'LRM_T_BS_ARC_OBJ' OR
           'LRM_T_BS_BOR_OBJ' OR
           'LRM_T_BS_FLD_DVD' OR
           'LRM_T_BS_STT_BVD' OR
           'LRM_T_BS_STT_DVD' OR
           'LRM_T_OT'         OR
           'LRM_T_OT_T'       OR
           'LRM_T_OT_FLD'     OR
           'LRM_T_OT_FLD_T'   OR
           'LRM_T_OT_PC'      OR
           'LRM_T_OT_PC_STAT' OR  "G
           'LRM_T_OT_STT'     OR
           'LRM_T_OT_STT_TO ' OR
           'LRM_T_BS_FLD_BVD' OR
           'LRM_T_BS_KOW_BVD' OR
           'TCLO'.                                            "VDAT V_CLO  Class System
        "transported via R3TR TABU with keys in E071K
        "will be filled later

      WHEN 'TNODEIMG' OR 'TNODEIMGT' OR 'TNODEIMGR' OR                "IMG Structure
           'TMENU01'  OR 'TMENU01T'  OR 'TMENU01R'.                   "Area Menu
        c_deliver = gc_suppack.
        "only insert/update needed hence NO PERFORM prepare_table
        "transport request is triggered separately
        "------- transported as R3TR (logical object), remove existing entries before MODIFY
      WHEN 'T5FDSNENUM' OR 'T5FDSNENUMT'.     "no own object type, maintained in SE16N
        PERFORM prepare_table USING i_tabname 'FOVER' it_entries CHANGING l_no_update.
      WHEN 'VCLDIR'  OR 'VCLSTRUC'  OR 'VCLSTRUDEP' OR 'VCLMF'.                 "VCLS
        PERFORM prepare_table USING i_tabname 'VCLNAME' it_entries CHANGING l_no_update.
      WHEN 'VCLDIRT' OR 'VCLSTRUCT'.                                            "VCLS text
        PERFORM prepare_table USING i_tabname 'VCLNAME SPRAS' it_entries CHANGING l_no_update.

      WHEN 'SCPRATTR'   OR 'SCPRDOCU'   OR 'SCPRFLDV'   OR 'SCPRPPRL'   OR         "SCP1
           'SCPRRECA'   OR 'SCPRVALS'.
        PERFORM prepare_table USING i_tabname 'ID VERSION' it_entries CHANGING l_no_update.

      WHEN  'SCPRTEXT'  OR 'SCPRVALL'.                                             "SCP1 text
        PERFORM prepare_table USING i_tabname 'LANGU ID VERSION' it_entries CHANGING l_no_update.

      WHEN 'SBRANCHEEX' OR 'SBRANCHEIN' OR 'SCOUNTRYEX' OR 'SCOUNTRYIN'.           "SCP1 industries
        PERFORM prepare_table USING i_tabname 'OBJTYP OBJID' it_entries CHANGING l_no_update.

      WHEN 'AAB_ID_PROP'.                                                            "ACID
        PERFORM prepare_table USING i_tabname 'NAME' it_entries CHANGING l_no_update.
      WHEN 'AAB_ID_PROPT'.                                                           "ACID
        PERFORM prepare_table USING i_tabname 'NAME LANGU ' it_entries CHANGING l_no_update.

      WHEN 'APB_LPD_SH_TEXTS'.                                                       "LPDS
        PERFORM prepare_table USING i_tabname 'SAP_OBJECT UNIQUE_LPD_ID LANGU' it_entries CHANGING l_no_update.

      WHEN 'THRFORMS_01'  OR 'TIDIMATTRIB_01' OR 'TINETISTARS_01' OR 'TINFODIM_01'    OR "HRFO
           'TINFONET_01'  OR 'TINFOSTAR_01'   OR 'TISCRFIELDS_01' OR 'TISCRFIELDS_02' OR
           'TISTARFIG_01' OR 'TISTARIDIM_01'  OR 'TSELFIELDS_01'  OR 'TSELRANGES_01'.
        PERFORM prepare_table USING i_tabname 'INFONET' it_entries CHANGING l_no_update.
      WHEN 'TINFONET_T_01' OR 'TINFOSTAR_T_01'.                                          "HRFO text
        PERFORM prepare_table USING i_tabname 'INFONET SPRSL' it_entries CHANGING l_no_update.


      WHEN 'SFREIM' OR 'SFREAC' OR 'SFRECOU'.                                       "SFRN
        PERFORM prepare_table USING i_tabname 'REL_CLA REL_OBJ' it_entries CHANGING l_no_update.
      WHEN 'FINS'.                                                                  "SFRN
        PERFORM prepare_table USING i_tabname 'SHCLASS TXTKEY' it_entries CHANGING l_no_update.
      WHEN 'SFRELN'.                                                                "SFRN
        PERFORM prepare_table USING i_tabname 'TXTKEY' it_entries CHANGING l_no_update.

      WHEN 'CUS_IMGACH'.                                                            "CUS0
        PERFORM prepare_table USING i_tabname 'ACTIVITY' it_entries CHANGING l_no_update.
      WHEN 'CUS_IMGACT'.                                                            "CUS0 text
        PERFORM prepare_table USING i_tabname 'ACTIVITY SPRAS' it_entries CHANGING l_no_update.

      WHEN 'CUS_ACTEXT' OR 'CUS_ACTH' OR 'CUS_ACTOBJ'.                              "CUS1
        PERFORM prepare_table USING i_tabname 'ACT_ID' it_entries CHANGING l_no_update.
      WHEN 'CUS_ACTT' OR 'CUS_ACTOBT'.                                              "CUS1 text
        PERFORM prepare_table USING i_tabname 'ACT_ID SPRAS' it_entries CHANGING l_no_update.

      WHEN 'CUS_ATRH' OR 'CUS_ATRCOU'.                                              "CUS2
        PERFORM prepare_table USING i_tabname 'ATTR_ID' it_entries CHANGING l_no_update.
      WHEN 'CUS_ATRT'.                                                              "CUS2 text
        PERFORM prepare_table USING i_tabname 'ATTR_ID SPRAS' it_entries CHANGING l_no_update.
      WHEN 'TFM18'.                                                                 "CUS2 special

*      WHEN 'EDBAS' OR 'IDOCSYN'.                                                    "IDOC    -> not approve anymore
*        PERFORM prepare_table USING i_tabname 'IDOCTYP' it_entries CHANGING l_no_update.
*      WHEN 'EDBAST'.                                                                "IDOC text
*        PERFORM prepare_table USING i_tabname 'IDOCTYP LANGUA' it_entries CHANGING l_no_update.

*      WHEN 'TOBJ' OR 'TOBJVOR' OR 'TOBJVORFLG' OR  'TOBJVORDAT'.                      "SUSO       -> approved_logical_objects
*        PERFORM prepare_table USING i_tabname 'OBJCT' it_entries CHANGING l_no_update.
*      WHEN 'TACTZ'.                                                                   "SUSO
*        PERFORM prepare_table USING i_tabname 'BROBJ' it_entries CHANGING l_no_update.
*      WHEN 'TOBJT'.                                                                   "SUSO text
*        PERFORM prepare_table USING i_tabname 'OBJECT LANGU' it_entries CHANGING l_no_update.

      WHEN 'STC_SCN_HDR' OR 'STC_SCN_TASKS' OR 'STC_SCN_ATTR'.                       "STCS
        PERFORM prepare_table USING i_tabname 'SCENARIO_ID' it_entries CHANGING l_no_update.
      WHEN 'STC_SCN_HDR_T'.                                                          "STCS text
        PERFORM prepare_table USING i_tabname 'SCENARIO_ID LANGU' it_entries CHANGING l_no_update.

*      when 'WDY_CONFIG_APPT' or 'WDY_CFG_VERS_APPL_COMPO' or 'WDY_CFG_VERS_APPL_HEADER'    "WDCA
*        or 'WDY_CFG_VERS_APPL_PARAM' or 'WDY_CFG_VERS_APPL_PARAM_L'.

      WHEN 'WDY_APPLICATION' OR 'WDY_APP_PROPERTY' OR 'SOTR_USE'.                          "WDYA
        PERFORM prepare_table USING i_tabname 'APPLICATION_NAME' it_entries CHANGING l_no_update.
      WHEN 'WDY_APPLICATIONT'.                                                             "WDYA text
        PERFORM prepare_table USING i_tabname 'APPLICATION_NAME LANGU' it_entries CHANGING l_no_update.

      WHEN 'OA2_SD_SC'.                                                                "OAS2
        PERFORM prepare_table USING i_tabname 'SCOPE_ID' it_entries CHANGING l_no_update.
      WHEN 'OA2_SD_SCT' .                                                              "OAS2 text
        PERFORM prepare_table USING i_tabname 'SCOPE_ID LANGU' it_entries CHANGING l_no_update.

      WHEN 'TDDAT' OR 'TVDIR'.
        "generated via execution of SE54 -> no need to insert and no need to transport
        c_deliver = gc_generate.
        RETURN.
      WHEN OTHERS.
        IF NOT l_object IS INITIAL AND ( approved_logical_objects CS l_object ) .  "approved logical transport objects
          "existing entries deleted during create_logical_object
        ELSEIF l_approved_system_table EQ 'X'.
          "no deletions, only update of existing entries and insert
        ELSE.
          "objects which might have to be described as manual step or BCSet
          IF c_contflag CA 'W'. "Delivery class W -> is expected to be transported as TLOGO and not via TABU
            CONCATENATE gc_manual '?' INTO c_deliver.
          ELSE.
            CONCATENATE gc_bcset '?' INTO c_deliver.
          ENDIF.
          MESSAGE e666(01) WITH 'Delivering entries for table' i_tabname 'is not approved yet' INTO sy-lisel. "#EC *
          IF NOT it_entries[] IS INITIAL.
            CALL METHOD log_message.
          ENDIF.
          RETURN.
        ENDIF.
    ENDCASE.

    IF c_deliver NE gc_suppack.  "do not change from suppack to something else, e.g. TNODEIMG
      c_deliver = gc_report.
    ENDIF.


    IF i_logical_object IS INITIAL.
      "transported via R3TR TABU with keys in E071K
      CALL FUNCTION 'DDIF_NAMETAB_GET'
        EXPORTING
          tabname   = i_tabname
        IMPORTING
          x030l_wa  = ls_x030l
        EXCEPTIONS
          not_found = 1
          OTHERS    = 2.
      ASSERT sy-subrc EQ 0.   "add to transport shall fail if table does not exist
      l_keylen = ls_x030l-keylen / ls_x030l-unicodelg.

      CLEAR ls_ko200.
      ls_ko200-pgmid    = 'R3TR'.
      ls_ko200-object   = 'TABU'.
      ls_ko200-objfunc  = 'K'.
      ls_ko200-obj_name = i_tabname.
      APPEND ls_ko200 TO lt_ko200.

      CLEAR ls_e071k.
      ls_e071k-pgmid      = ls_ko200-pgmid.
      ls_e071k-objname    = ls_ko200-obj_name.
      ls_e071k-object     = ls_ko200-object.
      ls_e071k-mastertype = ls_ko200-object.
      ls_e071k-mastername = ls_ko200-obj_name.

*      LOOP AT it_entries ASSIGNING <l_tabkey> CASTING.
*        ls_e071k-tabkey = <l_tabkey>(l_keylen).
      LOOP AT it_entries ASSIGNING <ls_entry>.
        IF ls_dd02v-clidep NE space.
          CHECK <ls_entry>(3) EQ sy-mandt.   "transport shall only contain entries of logon client
        ENDIF.
        IF i_tabname EQ 'CTE_I_CHECK_DSET '.
          "complex datatype v,, e.g. because of string
          ASSIGN <ls_entry> TO <l_tabkey> CASTING.
          ls_e071k-tabkey = <l_tabkey>(l_keylen).
        ELSE.
          ls_e071k-tabkey = <ls_entry>(l_keylen).
        ENDIF.
        IF l_keylen <= 120.
          "entire key does fit into E071K-TABKEY (CHAR 120)
        ELSEIF i_tabname EQ 'T5FDSNENUM' OR i_tabname EQ 'T5FDSNENUMT'.
          ls_e071k-tabkey+6 = '*'.     "always table entries belonging to first key field (version)
          READ TABLE lt_e071k WITH KEY tabkey = ls_e071k-tabkey TRANSPORTING NO FIELDS.
          CHECK sy-subrc NE 0.
        ELSEIF i_tabname EQ 'EDIFCT'.
          IF ls_e071k-tabkey+91 CA '_'.
            ADD 91 TO sy-fdpos.
            ls_e071k-tabkey+sy-fdpos = '*'.
          ELSE.
            ls_e071k-tabkey+119 = '*'.
          ENDIF.
        ELSE.
          MESSAGE e666(01) WITH 'Delivering entries for table' i_tabname 'is not approved yet' INTO sy-lisel. "#EC *
          c_deliver = gc_manual.
          RETURN.
        ENDIF.
        APPEND ls_e071k TO lt_e071k.
      ENDLOOP.
    ENDIF.

    CHECK NOT it_entries[] IS INITIAL.

    IF i_delete IS INITIAL.
      CHECK l_no_update IS INITIAL.
    ENDIF.

    IF testrun IS INITIAL.
      IF i_logical_object IS INITIAL.

        "check if client dependent changes are recorded
        STATICS: l_clidep_clients TYPE string.
        IF l_clidep_clients IS INITIAL.
          SELECT mandt FROM t000 INTO sy-lisel WHERE cccoractiv EQ '1'.
            CONCATENATE l_clidep_clients sy-lisel INTO l_clidep_clients SEPARATED BY space.
          ENDSELECT.
        ENDIF.
        IF c_clidep EQ 'X' AND NOT l_clidep_clients IS INITIAL.
          "check if current client is a BCSet client
          IF l_clidep_clients NS sy-mandt.
            MESSAGE e666(01) WITH 'Client dependent table entries' 'can only be changed in one' 'of the following clients:' l_clidep_clients INTO sy-lisel. "#EC *
            CALL METHOD log_message.
            RETURN.
          ENDIF.
        ENDIF.

        CALL FUNCTION 'TR_OBJECTS_CHECK'
          TABLES
            wt_ko200                = lt_ko200
*           WT_E071K                =
          EXCEPTIONS
            cancel_edit_other_error = 1
            show_only_other_error   = 2
            OTHERS                  = 3.
        IF sy-subrc EQ 0.
          DATA: l_trkorr LIKE gv_trkorr.
          CALL FUNCTION 'TR_OBJECTS_INSERT'
            EXPORTING
              wi_order                = gv_trkorr
            IMPORTING
              we_order                = l_trkorr
            TABLES
              wt_ko200                = lt_ko200
              wt_e071k                = lt_e071k
*             TT_TADIR                =
            EXCEPTIONS
              cancel_edit_other_error = 1
              show_only_other_error   = 2
              OTHERS                  = 3.
          IF sy-subrc EQ 0.
            IF l_trkorr IS INITIAL.
              MESSAGE w666(01) WITH 'Changes cannot be recorded in a transport request.' 'You may have to logon to a different client.' INTO sy-lisel. "#EC *
              CALL METHOD log_message.
              CLEAR sy-subrc.   "go on without error code
            ELSE.
              gv_trkorr = l_trkorr.
            ENDIF.
          ENDIF.
        ENDIF.
        IF sy-subrc NE 0.
          MESSAGE e666(01) WITH 'Could not be added to transport request.' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
          RETURN.
        ENDIF.
      ENDIF.

      IF NOT it_entries[] IS INITIAL.
        "make sure that internal table matches to current database structure in target system (may be different from reference system)
        CREATE DATA dref TYPE TABLE OF (i_tabname).
        ASSIGN dref->* TO <lt_entries>.
        LOOP AT it_entries ASSIGNING <ls_entry>.
          APPEND INITIAL LINE TO <lt_entries> ASSIGNING <ls_entry2>.
          MOVE-CORRESPONDING <ls_entry> TO <ls_entry2>.
        ENDLOOP.
        IF i_delete IS INITIAL.
          CASE ls_dd02v-contflag.
            WHEN 'S' OR 'E'.
              IF ls_dd02v-clidep IS INITIAL.
                MODIFY (i_tabname) FROM TABLE <lt_entries>. "#EC CI_DYNTAB
              ELSE.
                MODIFY (i_tabname) CLIENT SPECIFIED FROM TABLE <lt_entries>. "#EC CI_DYNTAB
              ENDIF.
            WHEN 'W'.
              MODIFY (i_tabname) FROM TABLE <lt_entries>. "#EC CI_DYNTAB
            WHEN 'G'.
              INSERT (i_tabname) FROM TABLE <lt_entries> ACCEPTING DUPLICATE KEYS. "#EC CI_DYNTAB
            WHEN OTHERS.
              "should never happen because of "basic checks"
              MESSAGE a666(01) WITH 'Table' i_tabname 'cannot be processed'. "#EC *
          ENDCASE.
          MESSAGE i666(01) WITH sy-dbcnt 'entries were inserted into table' i_tabname INTO sy-lisel. "#EC *
        ELSE.
          DELETE (i_tabname) FROM TABLE <lt_entries>.    "#EC CI_DYNTAB
          MESSAGE i666(01) WITH sy-dbcnt 'entries were deleted from table'  i_tabname INTO sy-lisel. "#EC *
        ENDIF.
        CALL METHOD log_message.
      ENDIF.
    ELSE.
      DESCRIBE TABLE it_entries.
      IF i_delete IS INITIAL.
        MESSAGE i666(01) WITH sy-tfill 'entries will be inserted into table' i_tabname INTO sy-lisel. "#EC *
      ELSE.
        MESSAGE i666(01) WITH sy-tfill 'entries will be deleted from table'  i_tabname INTO sy-lisel. "#EC *
      ENDIF.
      CALL METHOD log_message.
    ENDIF.

  ENDMETHOD.                    "create_table_entries


  METHOD add_to_transport.

    STATICS: s_object     LIKE i_object,
             s_obj_name   TYPE string,
             s_msgty      TYPE symsgty,
             s_testrun    LIKE testrun VALUE '-',
             s_masterlang TYPE tadir-masterlang.

    DATA: l_tadir_name    TYPE tadir-obj_name,
          l_new_devclass  TYPE devclass,
          l_object_name   TYPE string,
          l_object_class  TYPE string,
          l_extend,
          l_global_lock,
          ls_trkey        TYPE trkey,
          ls_t000         TYPE t000,
          l_bcset_clients TYPE string.

    CLEAR sy-subrc.

    IF lcl_wb=>language_installed( i_langu ) IS INITIAL.
      RAISE language_not_installed.
    ENDIF.

    IF i_masterlang NE space AND i_langu NE i_masterlang. "translation -> no snote_check
    ELSEIF i_skip_snote_check IS INITIAL AND lcl_wb=>snote_support( i_object ) IS NOT INITIAL.
      RAISE error.  "do not perform changes to object, since it is processed by SNote
    ENDIF.

    IF gv_errors_occured EQ 'X'.
      MESSAGE w666(01) WITH 'Skipped because of error in previous object' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      RAISE error.
    ELSEIF i_object EQ 'TABU'.
      DATA: lt_ko200 TYPE TABLE OF ko200, ls_ko200 TYPE ko200,
            lt_e071k TYPE TABLE OF e071k, ls_e071k TYPE e071k.

      ls_ko200-pgmid    = ls_e071k-pgmid   = 'R3TR'.
      ls_ko200-object   = ls_e071k-object  = ls_e071k-mastertype = 'TABU'.
      ls_ko200-obj_name = ls_e071k-objname = ls_e071k-mastername = i_obj_name.
      ls_ko200-objfunc  = 'K'.
      ls_e071k-tabkey   = i_tabkey.
      APPEND ls_ko200 TO lt_ko200.
      APPEND ls_e071k TO lt_e071k.
      CALL FUNCTION 'TR_OBJECTS_CHECK'
        TABLES
          wt_ko200                = lt_ko200
*         WT_E071K                =
        EXCEPTIONS
          cancel_edit_other_error = 1
          show_only_other_error   = 2
          OTHERS                  = 3.
      IF sy-subrc EQ 0.
        CALL FUNCTION 'TR_OBJECTS_INSERT'
          EXPORTING
            wi_order                = gv_trkorr
          IMPORTING
            we_order                = gv_trkorr
          TABLES
            wt_ko200                = lt_ko200
            wt_e071k                = lt_e071k
          EXCEPTIONS
            cancel_edit_other_error = 1
            show_only_other_error   = 2
            OTHERS                  = 3.
      ENDIF.
      IF sy-subrc NE 0.
        RAISE error.
      ENDIF.
      RETURN.
    ELSEIF i_object   NE s_object   OR
           i_obj_name NE s_obj_name OR
           testrun    NE s_testrun.
      s_object   = i_object.
      s_obj_name = i_obj_name.
      s_testrun  = testrun.
      CLEAR s_msgty.

      CHECK i_object NE space.

      CASE i_object.
        WHEN 'SCP1'.
        WHEN 'SCP2'.
          "check if there is any BCSet client.
          SELECT mandt FROM t000 INTO ls_t000 WHERE ccorigcont EQ 'X'. "AND cccategory EQ 'C'    <- sometimes not customized as C but T, e.g. E27
            CONCATENATE l_bcset_clients ls_t000-mandt INTO l_bcset_clients SEPARATED BY space.
          ENDSELECT.
          IF NOT l_bcset_clients IS INITIAL.
            "check if current client is a BCSet client
            IF l_bcset_clients NS sy-mandt.
              MESSAGE e666(01) WITH 'BCSets can only be changed in one' 'of the following clients:' l_bcset_clients INTO sy-lisel. "#EC *
              CALL METHOD log_message.
              s_msgty = 'E'.
            ENDIF.
          ENDIF.
      ENDCASE.
      CASE i_object.
        WHEN 'REPT' OR 'FUNC' OR 'CUAD' OR 'DOCU'.
          l_object_class = i_object.
          l_object_name  = i_obj_name.
        WHEN 'DOCV' OR 'DOCT' OR 'DSYS' OR 'STCS' OR 'MSAG' OR 'SOTR'
          OR 'IWPR' OR 'IWMO' OR 'IWSV' OR 'IWOM' OR 'IWSG' OR 'SICF'  "SEGW
          OR 'SFRN' OR 'CUS0' OR 'CUS1' OR 'CUS2'.                     "IMG
          l_object_class = i_object.
          l_object_name  = i_obj_name.
          l_global_lock  = 'X'.
          l_extend       = 'X'.
          l_tadir_name   = i_obj_name.
        WHEN 'MESS'.
          l_object_class = 'T100'.
          l_object_name  = i_obj_name.
        WHEN 'CLAS' OR 'FUGR' OR 'PARA' OR 'VCLS' OR 'AUTH' OR 'TRAN' OR 'SUSO' OR 'PROG'.
          l_object_class = i_object.
          l_object_name  = i_obj_name.
          l_tadir_name   = i_obj_name.
          l_global_lock  = 'X'.
        WHEN 'DOMA' OR 'DTEL' OR 'TABL' OR 'TABT' OR 'VIEW' OR 'INDX' OR 'XINX' OR 'TTYP' OR 'SHLP' OR 'ENQU' OR 'DDLS'.
          l_object_class = 'DICT'.
          CONCATENATE i_object i_obj_name INTO l_object_name.
          IF i_object NE 'INDX'. "correct name will be determined by SCWB_GET_TADIR_REM
            l_tadir_name   = i_obj_name.
          ENDIF.
        WHEN 'DYNP'.
          l_object_class = 'SCRP'.
          l_object_name  = i_obj_name.
        WHEN 'TABU'.

        WHEN OTHERS.
          l_object_class = i_object.
          l_object_name  = i_obj_name.
          SELECT SINGLE objectname FROM objh INTO sy-lisel
                                  WHERE objectname EQ i_object
                                    AND objecttype EQ 'L'.
          IF sy-subrc EQ 0.  "is a logical object
            l_global_lock  = 'X'.
            l_extend       = 'X'.
            l_tadir_name   = i_obj_name.
          ENDIF.
      ENDCASE.

      "determine TADIR key and check for old TADIR entry
      DATA: ls_e071      TYPE e071,
            ls_tadir_key TYPE tadir,
            ls_tadir_old TYPE tadir.
      ls_e071-pgmid    = 'LIMU'.
      ls_e071-object   = i_object.
      ls_e071-obj_name = i_obj_name.
      CALL FUNCTION 'SCWB_GET_TADIR_REM'  "determines main object if i_object is a part object, e.g REPT->PROG
        EXPORTING
          is_e071      = ls_e071
        IMPORTING
          es_tadir     = ls_tadir_old
          es_tadir_key = ls_tadir_key.
      IF ls_tadir_key IS INITIAL.
        ls_e071-pgmid    = 'R3TR'.
        CALL FUNCTION 'SCWB_GET_TADIR_REM'
          EXPORTING
            is_e071      = ls_e071
          IMPORTING
            es_tadir     = ls_tadir_old
            es_tadir_key = ls_tadir_key.
      ENDIF.
      IF ls_tadir_old-devclass IS INITIAL.
        l_new_devclass = i_devclass.
      ELSE.
        l_new_devclass = ls_tadir_old-devclass.
      ENDIF.
      "create TADIR entry in advance avoid popup
      IF NOT ls_tadir_key-obj_name IS INITIAL.   "only if a name could be determined, e.g. does not work for LIMU DOCU FU... if function group does not exist yet
        ASSERT l_tadir_name IS INITIAL OR ls_tadir_key-obj_name EQ l_tadir_name. "compatibility check
        s_masterlang = ls_tadir_old-masterlang.
        IF ls_tadir_old IS INITIAL.                                        "V3.52
          IF l_object_class EQ 'DICT' AND                                  "V3.52
             i_object NE 'INDX'.                                           "V3.52
            l_global_lock = 'X'.  "similar to MSDXXBAS_FORMS 463           "V3.52
          ENDIF.                                                           "V3.52
        ELSEIF i_edtflag EQ 'X'.  "iv_no_standard_editor
          "temporary disable check of tadir-edtflag
          UPDATE tadir SET edtflag    = ' '
                     WHERE pgmid      EQ ls_tadir_key-pgmid
                       AND object     EQ ls_tadir_key-object
                       AND obj_name   EQ ls_tadir_key-obj_name.
          l_extend = 'X'.   "no SMODILOG because object can't be reset to standard
        ENDIF.                                                             "V3.52
        IF i_langu CA gv_master_languages.
          IF ls_tadir_old IS INITIAL.
            "for new objects check whether it exists globally to determine correct original system
            DATA: ls_gtadir TYPE gtadir.
            CALL FUNCTION 'TR_GTADIR_QUERY'
              EXPORTING
                iv_pgmid    = ls_tadir_key-pgmid
                iv_object   = ls_tadir_key-object
                iv_obj_name = ls_tadir_key-obj_name
              IMPORTING
                result      = ls_gtadir
              EXCEPTIONS
                OTHERS      = 0.
            IF NOT ls_gtadir-srcsystem IS INITIAL AND testrun IS INITIAL.
              CALL FUNCTION 'TRINT_TADIR_MODIFY'
                EXPORTING
                  author            = sy-uname
                  devclass          = i_devclass
                  pgmid             = ls_tadir_key-pgmid
                  object            = ls_tadir_key-object
                  obj_name          = ls_tadir_key-obj_name
                  masterlang        = i_langu
                  srcsystem         = ls_gtadir-srcsystem
                  change_masterlang = 'X'
*                 EDTFLAG           = '~'
*                 GENFLAG           = '~'
                  force_mode        = space
                  created_on        = sy-datum             ">=SAPBASIS702
                  check_date        = sy-datum             ">=SAPBASIS702
*                 CHECK_CFG         = '~' ">=SAPBASIS702
                EXCEPTIONS
                  OTHERS            = 0.
            ENDIF.
          ENDIF.

          "set correct language and package on first call per object
          "skip this for other languages than EN/DE.
          CALL FUNCTION 'TR_TADIR_INTERFACE'
            EXPORTING
*             WI_DELETE_TADIR_ENTRY          = ' '
              wi_test_modus                  = testrun
              wi_tadir_pgmid                 = ls_tadir_key-pgmid
              wi_tadir_object                = ls_tadir_key-object
              wi_tadir_obj_name              = ls_tadir_key-obj_name
              wi_tadir_devclass              = l_new_devclass
              wi_tadir_masterlang            = i_langu
            EXCEPTIONS
              devclass_not_existing          = 90
              obj_specification_not_unique   = 91
              pgmid_object_not_allowed       = 92
              masterlanguage_not_specified   = 93
              devclass_not_specified         = 94
              tadir_entry_not_existing       = 1
              tadir_entry_ill_type           = 2
              no_systemname                  = 3
              no_systemtype                  = 4
              original_system_conflict       = 5
              object_reserved_for_devclass   = 6
              object_exists_global           = 7
              object_exists_local            = 8
              object_is_distributed          = 9
              no_authorization_to_delete     = 11
              simultanious_set_remove_repair = 13
              order_missing                  = 14
              no_modification_of_head_syst   = 15
              specify_owner_unique           = 19
              loc_priv_objs_no_repair        = 20
              gtadir_not_reached             = 21
              object_locked_for_order        = 22
              change_of_class_not_allowed    = 23
              no_change_from_sap_to_tmp      = 24
              OTHERS                         = 25.
          IF sy-subrc EQ 90.
            READ TABLE gr_devclass WITH KEY low = i_devclass TRANSPORTING NO FIELDS.
            IF sy-subrc NE 0 OR testrun IS INITIAL.
              CALL METHOD lcl_wb=>log_message.
              s_msgty = 'E'.
            ENDIF.
          ELSEIF sy-subrc GT 90.
            CALL METHOD lcl_wb=>log_message.
            s_msgty = 'E'.
          ENDIF.
        ENDIF.
        IF NOT i_devclass IS INITIAL.
          "set correct package in memory
          EXPORT current_devclass FROM i_devclass TO MEMORY ID 'EUK'.
          SET PARAMETER ID 'EUK' FIELD i_devclass.
        ENDIF.
      ENDIF.

      IF testrun IS INITIAL.

        DATA: l_suppress_dialog.       "did not work in ERW, was not possible to copy local objects
*        IF i_devclass EQ '$TMP'. "perform all checks but suppress some popups
*          l_suppress_dialog  = 'X'.   "e.g. 'object can only be created in SAP package' 'system setting does not allow....'
*        ENDIF.

        IF i_object EQ 'DOCU'.
          l_extend = 'X'.   "no SMODILOG for DOCU
        ELSEIF ls_tadir_old-masterlang IS NOT INITIAL AND i_langu NE ls_tadir_old-masterlang.  "update of translation
          l_extend = 'X'.   "no SMODILOG for translation
        ENDIF.

        CALL FUNCTION 'RS_CORR_INSERT'    "and create TADIR-entry
          EXPORTING
            object              = l_object_name
            object_class        = l_object_class
            global_lock         = l_global_lock
            devclass            = i_devclass
            korrnum             = gv_trkorr
            master_language     = i_langu
            extend              = l_extend
            suppress_dialog     = l_suppress_dialog  "currently only set for local objects
*           AUTHOR              = ' '
*           GENFLAG             = ' '
*           PROGRAM             = ' '
*           OBJECT_CLASS_SUPPORTS_MA = ' '
*           MOD_LANGU           = ' '
*           ACTIVATION_CALL     = ' '
          IMPORTING
            korrnum             = gv_trkorr
*           ORDERNUM            =
*           NEW_CORR_ENTRY      =
*           AUTHOR              =
            transport_key       = ls_trkey
*           NEW_EXTEND          =
          EXCEPTIONS
            cancelled           = 1
            permission_failure  = 2
            unknown_objectclass = 3
            OTHERS              = 4.
        IF sy-subrc NE 0.
          IF sy-subrc EQ 1.
            MESSAGE e406(42) INTO sy-lisel.  "action cancelled
          ENDIF.
          CALL METHOD log_message.
          s_msgty = 'E'.
          gv_errors_occured = 'X'.   "no change in further objects, skip activation
        ELSE.
          "collect objects with update
          COLLECT ls_trkey INTO gt_trkey.
          "correct master language if neccessary
          IF NOT ls_tadir_key IS INITIAL AND ls_tadir_old-masterlang IS INITIAL.
            IF i_langu CA gv_master_languages.   "do not use i_masterlang as long as i_masterlang is optional
              IF ls_e071-pgmid EQ 'R3TR'.
                UPDATE tadir SET masterlang = i_langu
                           WHERE pgmid      EQ ls_tadir_key-pgmid
                             AND object     EQ ls_tadir_key-object
                             AND obj_name   EQ ls_tadir_key-obj_name
                             AND masterlang NE i_langu.
              ELSEIF i_devclass NE '$TMP'.
                "creation of LIMU where no TADIR existed before
**               UPDATE tadir SET masterlang = space "clear language and let SCWB/SNOTE set the correct language "erasing masterlang not enough->delete tadir?
                "deactivated because copy PINF lost TADIR here: (20161124)
*                DELETE FROM tadir WHERE pgmid EQ ls_tadir_key-pgmid AND object EQ ls_tadir_key-object AND obj_name   EQ ls_tadir_key-obj_name.
              ENDIF.
              s_masterlang = i_langu.
            ENDIF.
          ENDIF.
          "set/restore tadir-edtflag
          IF i_edtflag EQ 'X'.  "iv_no_standard_editor
            "temporary disable check of tadir-edtflag
            UPDATE tadir SET edtflag    = 'X'
                       WHERE pgmid      EQ ls_tadir_key-pgmid
                         AND object     EQ ls_tadir_key-object
                         AND obj_name   EQ ls_tadir_key-obj_name.
          ENDIF.
        ENDIF.
      ELSE.
        CALL FUNCTION 'RS_CORR_CHECK'   "testrun -> at least check
          EXPORTING
            object              = l_object_name
            object_class        = l_object_class
            global_lock         = l_global_lock
            suppress_dialog     = 'X'   "e.g. 'object can only be created in SAP package'
          EXCEPTIONS
            cancelled           = 1
            permission_failure  = 2
            unknown_objectclass = 3
            OTHERS              = 4.
        IF sy-subrc NE 0.
          CALL METHOD log_message.
          s_msgty = 'E'.
        ELSE.
          s_msgty = 'W'.
        ENDIF.
      ENDIF.
    ENDIF.

    IF gv_trkorr IS NOT INITIAL.
      READ TABLE gt_trkorr WITH KEY table_line = gv_trkorr TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        APPEND gv_trkorr TO gt_trkorr.
      ENDIF.
    ENDIF.

    e_masterlang = s_masterlang.
    CASE s_msgty.
      WHEN 'E'.
        MESSAGE e666(01) WITH 'Could not add to transport request' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RAISE error.
      WHEN 'W'.
        RAISE simulation.
    ENDCASE.

  ENDMETHOD.                    "add_to_transport

  METHOD register_inactive_object.

    DATA: l_obj_name TYPE e071-obj_name.

    l_obj_name = i_objname.
    CALL FUNCTION 'RS_INSERT_INTO_WORKING_AREA'
      EXPORTING
        object   = i_objtype
        obj_name = l_obj_name
      EXCEPTIONS
        OTHERS   = 0.

    IF i_treetype IS SUPPLIED.
      CHECK i_treetype NE space.
      CALL FUNCTION 'RS_TREE_OBJECT_PLACEMENT'
        EXPORTING
          type   = i_treetype
          object = l_obj_name.
    ELSE.
      CALL FUNCTION 'RS_TREE_OBJECT_PLACEMENT'
        EXPORTING
          type   = i_objtype
          object = l_obj_name.
    ENDIF.

  ENDMETHOD.                    "register_inactive_object

  METHOD create_message_class.    "will be activated immediately

    DATA: ls_t100a TYPE t100a,
          ls_t100t TYPE t100t.

    CALL METHOD set_context
      EXPORTING
        i_langu    = i_langu
        i_object   = 'MSAG'
        i_obj_name = i_msgid.

    IF i_text IS INITIAL.
      i_text = i_msgid.
    ENDIF.

    "check if message class exists
    SELECT SINGLE * FROM t100t INTO ls_t100t WHERE arbgb = i_msgid AND sprsl EQ i_langu.
    SELECT SINGLE * FROM t100a INTO ls_t100a WHERE arbgb = i_msgid.
    IF sy-subrc EQ 0 AND ls_t100t-stext EQ i_text.
      MESSAGE i666(01) WITH 'No update necessary' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      RETURN.
    ENDIF.

    CALL METHOD add_to_transport    "and create TADIR
      EXPORTING
        i_object   = 'MSAG'
        i_obj_name = i_msgid
        i_devclass = i_devclass
        i_langu    = i_langu
      EXCEPTIONS
        OTHERS     = 1.

    CHECK sy-subrc EQ 0.

    CHECK testrun IS INITIAL.

    ls_t100a-lastuser   = sy-uname.
    ls_t100a-ldate      = sy-datum.
    ls_t100a-ltime      = sy-uzeit.
    ls_t100a-masterlang = i_langu.
    ls_t100a-arbgb      = i_msgid.
    MODIFY t100a FROM ls_t100a. "no activation needed

    ls_t100t-sprsl = ls_t100a-masterlang.
    ls_t100t-arbgb = ls_t100a-arbgb.
    ls_t100t-stext = i_text.
    MODIFY t100t FROM ls_t100t.

    MESSAGE i666(01) WITH 'Update successful' INTO sy-lisel. "#EC *
    CALL METHOD log_message.

    CALL FUNCTION 'RS_TREE_OBJECT_PLACEMENT'
      EXPORTING
        type   = 'MSAG'
        object = i_msgid.

  ENDMETHOD.                    "create_message_class

  METHOD create_message.

    DATA: lt_bdc  TYPE TABLE OF bdcdata,
          ls_bdc  TYPE bdcdata,
          ls_bdcp TYPE bdcdata,
          ls_opt  TYPE ctu_params.
    DATA: ls_t100      TYPE t100,
          ls_t100a     TYPE t100a,
          ls_t100u     TYPE t100u,
          ls_t100x     TYPE t100x,
          ls_t100o     TYPE t100o,
          lt_activity  TYPE tt_activity,
          l_obj_name   TYPE dokil-object,
          l_docname TYPE thead-tdname,
          ls_msg_class LIKE LINE OF gr_msg_class VALUE 'IEQ'.

    ls_msg_class-low = i_msgid.
    COLLECT ls_msg_class INTO gr_msg_class.

    CALL METHOD set_context
      EXPORTING
        i_langu     = i_langu
        i_object    = 'MESS'
        i_obj_name  = i_msgid
        i_obj_name2 = i_msgno.

    IF gv_abap_in_eclipse EQ 'X'.
      MESSAGE e666(01) WITH 'Creation/Copy not possible in Eclipse.' 'Please use SAPGUI.' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      RETURN.
    ENDIF.

    SELECT SINGLE * FROM t100a INTO ls_t100a
                   WHERE arbgb EQ i_msgid.
    IF sy-subrc NE 0.
      IF testrun IS INITIAL OR NOT i_msgid IN gr_msg_class.
        MESSAGE e509(eu) WITH i_msgid INTO sy-lisel.        "#EC *
        CALL METHOD log_message.
      ENDIF.
      RETURN.
    ENDIF.

    SELECT SINGLE masterlang FROM tadir INTO ls_t100a-masterlang
               WHERE pgmid     EQ 'R3TR'
                 AND object    EQ 'MSAG'
                 AND obj_name  EQ i_msgid.

    SELECT SINGLE * FROM t100 INTO ls_t100
                   WHERE sprsl EQ i_langu
                     AND arbgb EQ i_msgid
                     AND msgnr EQ i_msgno.

    SELECT SINGLE * FROM t100u INTO ls_t100u
                   WHERE arbgb EQ i_msgid
                     AND msgnr EQ i_msgno.

    SELECT SINGLE auth_check FROM t100x INTO CORRESPONDING FIELDS OF ls_t100x
                   WHERE arbgb EQ i_msgid
                     AND msgnr EQ i_msgno.

    SELECT activity FROM t100o INTO TABLE lt_activity   "#EC CI_GENBUFF
                   WHERE arbgb EQ i_msgid             "#EC CI_SGLSELECT
                     AND msgnr EQ i_msgno.

    IF i_text       EQ ls_t100-text AND
       i_auth_check EQ ls_t100x-auth_check AND
       it_activity  EQ lt_activity.
      IF     i_selfdef IS INITIAL AND     ls_t100u-selfdef IS INITIAL OR        ">=SAPBASIS640
         NOT i_selfdef IS INITIAL AND NOT ls_t100u-selfdef IS INITIAL.          ">=SAPBASIS640
        MESSAGE i666(01) WITH 'No update necessary' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RETURN.
      ENDIF.                                                                    ">=SAPBASIS640
    ENDIF.

    CALL FUNCTION 'DOCU_OBJECT_NAME_CONCATENATE'
      EXPORTING
        docu_id  = 'NA'
        element  = i_msgid
        addition = i_msgno
      IMPORTING
        object   = l_obj_name
      EXCEPTIONS
        OTHERS   = 0.

    CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
      EXPORTING
        tcode  = 'SE91'
      EXCEPTIONS
        ok     = 0
        not_ok = 2
        OTHERS = 3.
    IF sy-subrc NE 0.
      CALL METHOD log_message.
      RETURN.
    ENDIF.

    CALL METHOD add_to_transport
      EXPORTING
        i_object   = 'MESS'
        i_obj_name = l_obj_name
      EXCEPTIONS
        OTHERS     = 1.
    CHECK sy-subrc EQ 0.

    "update database tables
    ls_t100-arbgb = i_msgid.
    ls_t100-msgnr = i_msgno.
    ls_t100-sprsl = i_langu.
    ls_t100-text  = i_text.
    MODIFY t100 FROM ls_t100.  "no activation needed
    "selfdef
    IF NOT i_selfdef IS INITIAL.
      CONCATENATE 'NA' i_msgid i_msgno INTO l_docname.
      CALL METHOD lcl_wb=>create_other_docu
        EXPORTING
          i_docname = l_docname
          i_langu   = i_langu
          i_selfdef = i_selfdef
          i_line    = space.
    ENDIF.

    IF i_auth_check EQ ls_t100x-auth_check OR i_auth_check IS NOT SUPPLIED.
    ELSEIF i_auth_check IS INITIAL.
      DELETE FROM t100x WHERE arbgb EQ i_msgid AND msgnr EQ i_msgno.
    ELSE.
      ls_t100x-arbgb      = i_msgid.
      ls_t100x-msgnr      = i_msgno.
      ls_t100x-auth_check = i_auth_check.
      INSERT t100x FROM ls_t100x.
    ENDIF.
    IF it_activity NE lt_activity AND it_activity IS SUPPLIED.
      DELETE FROM t100o WHERE arbgb EQ i_msgid AND msgnr EQ i_msgno.
      LOOP AT it_activity INTO ls_t100o-activity.
        ls_t100o-arbgb = i_msgid.
        ls_t100o-msgnr = i_msgno.
        INSERT t100o FROM ls_t100o.
      ENDLOOP.
    ENDIF.

    MESSAGE i666(01) WITH 'Update successful' INTO sy-lisel. "#EC *
    CALL METHOD log_message.
    gv_translation = 'X'.
    gv_repository_changed = 'X'.

  ENDMETHOD.                    "create_message





  METHOD create_other_docu.

    STATICS: lt_line TYPE TABLE OF tline.

    DATA: ls_head          TYPE thead,
          lt_line_old      LIKE lt_line,
          ls_line          TYPE tline,
          ls_tadir         TYPE tadir,
          lt_e071k         TYPE TABLE OF e071k,
          ls_ko200         TYPE ko200,
          lv_masterlang    TYPE tadir-masterlang,
          l_dokstate       TYPE dokstate,
          lv_no_masterlang.

    DATA: lt_sfreln  TYPE TABLE OF sfreln,
          lt_sfreim  TYPE TABLE OF sfreim,
          lt_sfreac  TYPE TABLE OF sfreac,
          lt_sfrecou TYPE TABLE OF sfrecou.

    IF NOT i_line IS INITIAL.
      "collect docu lines
      ls_line = i_line.
      SHIFT ls_line-tdline LEFT.
      APPEND ls_line TO lt_line.
    ELSEIF i_selfdef IS NOT INITIAL.
      "self explanatory
      CALL METHOD lcl_wb=>set_context
        EXPORTING
          i_langu     = i_langu
          i_object    = 'DOCU'
          i_obj_name  = i_docname(2)
          i_obj_name2 = i_docname+2
          i_text      = 'Documentation Status'.             "#EC NOTEXT

      IF testrun IS INITIAL.
        CALL FUNCTION 'DOCU_TR_OBJECT_CHECK'
          EXPORTING
            object_id   = i_docname(2)
            object_name = i_docname+2(60)
          TABLES
            wt_e071k    = lt_e071k
          CHANGING
            corr_entry  = ls_ko200.

        CALL METHOD add_to_transport  "and check for testrun
          EXPORTING
            i_langu    = i_langu
            i_devclass = i_devclass
            i_object   = ls_ko200-object
            i_obj_name = ls_ko200-obj_name
          EXCEPTIONS
            OTHERS     = 1.
        CHECK sy-subrc EQ 0.

        CALL FUNCTION 'DOCU_SELFDEF_WRITE'                  "#EC *'
          EXPORTING
            object_id   = i_docname(2)
            object_name = i_docname+2(60)  "FM expects CHAR60
            selfdef     = space            "1st: deletion of DOKIL to avoid popup in second step
          EXCEPTIONS
            OTHERS      = 0.
        CALL FUNCTION 'DOCU_SELFDEF_WRITE'                  "#EC *'
          EXPORTING
            object_id   = i_docname(2)
            object_name = i_docname+2(60)  "FM expects CHAR60
            selfdef     = i_selfdef        "2nd: update DOKIL without popup "delete docu?"
          EXCEPTIONS
            OTHERS      = 0.
      ENDIF.

    ELSE.
      "final call -> write DOCU
      CALL METHOD set_context
        EXPORTING
          i_langu     = i_langu
          i_object    = 'DOCU'
          i_obj_name  = i_docname(2)
          i_obj_name2 = i_docname+2.

      ls_head-tdobject = 'DOKU'.
      ls_head-tdname   = i_docname+2.
      ls_head-tdid     = i_docname(2).
      ls_head-tdspras  = i_langu.
      ls_head-tdform   = 'S_DOCU_SHOW'.
      ls_head-tdstyle  = 'S_DOCUS1'.

      CALL FUNCTION 'DOCU_GET'
        EXPORTING
          id       = ls_head-tdid(2)
          object   = ls_head-tdname(60)
          langu    = ls_head-tdspras
        IMPORTING
          dokstate = l_dokstate
        TABLES
          line     = lt_line_old
        EXCEPTIONS
          OTHERS   = 0.

      IF et_lines IS SUPPLIED.
        et_lines[] = lt_line[] = lt_line_old[].
        RETURN.
      ENDIF.

      IF lt_line_old[] EQ lt_line AND l_dokstate EQ 'A'.
        "no update necessary
        MESSAGE i666(01) WITH 'No update necessary' INTO sy-lisel. "#EC *
        CALL METHOD log_message.

        REFRESH lt_line.
        RETURN.
      ENDIF.

*DT TEST_UDO            R3TR DOCV DTUDO_TEST
*DT /ASU/UDO_TEST       R3TR DOCV /ASU/DTUDO_TEST
*UO /AIN/BW             R3TR DOCV UO/AIN/BW
*UO A_S_ANLKL           R3TR DOCV UOA_S_ANLKL
*MO AAIP0001            R3TR DOCV MOAAIP0001
*MO /ASU/UDO_TEST	      R3TR DOCV MO/ASU/UDO_TEST
*HY BOOK/NFM/IMG_ALL    R3TR DSYS /NFM/BOOKIMG_ALL
*HY BOOKAUDIT_FI        R3TR DSYS BOOKAUDIT_FI
*HY SIMGTEST_UDO        R3TR DSYS SIMGTEST_UDO
*HY SIMG/ASU/TEST_UDO	  R3TR DSYS /ASU/SIMGTEST_UDO
*TX /ASU/UDO_TEST       R3TR DOCT /ASU/UDO_TEST
*TX UDO_TEST            R3TR DOCT UDO_TEST

      IF testrun IS INITIAL.
        CALL FUNCTION 'DOCU_TR_OBJECT_CHECK'
          EXPORTING
            object_id   = ls_head-tdid(2)
            object_name = ls_head-tdname(60)
          TABLES
            wt_e071k    = lt_e071k
          CHANGING
            corr_entry  = ls_ko200.

* DOCU_FROM_TR_OBJECT_RECEIVE  (not in 640)

        CALL METHOD add_to_transport   "and create TADIR entry
          EXPORTING
            i_langu    = i_langu
            i_devclass = i_devclass
            i_object   = ls_ko200-object
            i_obj_name = ls_ko200-obj_name
          EXCEPTIONS
            OTHERS     = 1.
        IF sy-subrc EQ 0.
          "determine current master language of docu object, may differ from master language in TADIR
          "CALL FUNCTION 'DOCU_GET_MASTERLANG' does not consider or return SELFDEF hence we read by our own
          DATA: ls_dokil TYPE dokil.
          SELECT SINGLE * FROM dokil INTO ls_dokil WHERE id     EQ ls_head-tdid "#EC CI_GENBUFF "#EC CI_BYPASS
                                                     AND object EQ ls_head-tdname
                                                     AND typ    EQ i_typ
                                                     AND masterlang EQ 'X'.
          IF sy-subrc EQ 0 AND ls_dokil-selfdef IS INITIAL AND i_langu NE ls_dokil-langu .
*          "no master lang so far, take current language as master
            lv_no_masterlang = 'X'.   "language of selfdef entries usually is DE, switch to a different master language is allowed
          ENDIF.

          "create new version
          DATA l_dokversion TYPE dokhl-dokversion.
          SELECT MAX( dokversion ) FROM dokhl INTO l_dokversion "#EC *
                            WHERE id     = ls_head-tdid(2)
                              AND object = ls_head-tdname
                              AND langu  = ls_head-tdspras.
          ADD 1 TO l_dokversion.

          ls_head-tdfdate = sy-datum.
          ls_head-tdftime = sy-uzeit.
          ls_head-tdfuser = sy-uname.
          ls_head-tdldate = sy-datum.
          ls_head-tdltime = sy-uzeit.
          ls_head-tdluser = sy-uname.

          IF ls_head-tdid EQ 'IN'. "Release note  / oder DOCV
            IF 1  = 0.
              "Nachlesen der Releasenote-Attribute
              "und umformen in zusätzliche Zeilen in lt_line
              "vergleiche Aufruf von DOCU_UPDATE, wenn man in der SE61 ein IN RELN pflegt.
              PERFORM index_descriptors IN PROGRAM saplsdoc. "#EC *
            ENDIF.
            "read current attributes
            SELECT * FROM sfreln  INTO TABLE lt_sfreln  WHERE txtkey = i_docname+6. "#EC CI_GENBUFF "#EC CI_BUFFJOIN "#EC CI_SGLSELECT #EC CI_ALL_FIELDS_NEEDED
            SELECT * FROM sfreim  INTO TABLE lt_sfreim  WHERE rel_cla EQ 'RELN' AND rel_obj EQ i_docname+6. "#EC CI_ALL_FIELDS_NEEDED "#EC CI_GENBUFF "#EC CI_BUFFJOIN
            SELECT * FROM sfreac  INTO TABLE lt_sfreac  WHERE rel_cla EQ 'RELN' AND rel_obj EQ i_docname+6. "#EC CI_ALL_FIELDS_NEEDED "#EC CI_GENBUFF "#EC CI_BUFFJOIN
            SELECT * FROM sfrecou INTO TABLE lt_sfrecou WHERE rel_cla EQ 'RELN' AND rel_obj EQ i_docname+6. "#EC CI_ALL_FIELDS_NEEDED "#EC CI_GENBUFF "#EC CI_BUFFJOIN
          ENDIF.

          CALL FUNCTION 'DOCU_UPDATE'   "this initializes attributes
            EXPORTING
*           ACTCLASS      = ' '
              head          = ls_head
              no_masterlang = lv_no_masterlang
              state         = i_dokstate
              typ           = i_typ
              version       = l_dokversion
            TABLES
              line          = lt_line.

          IF ls_head-tdid EQ 'IN'.
            "restore those attributes which have been deleted bei DOCU_UPDATE
            INSERT sfreln  FROM TABLE lt_sfreln  ACCEPTING DUPLICATE KEYS.
            INSERT sfreim  FROM TABLE lt_sfreim  ACCEPTING DUPLICATE KEYS.
            INSERT sfreac  FROM TABLE lt_sfreac  ACCEPTING DUPLICATE KEYS.
            INSERT sfrecou FROM TABLE lt_sfrecou ACCEPTING DUPLICATE KEYS.
          ENDIF.

          MESSAGE i666(01) WITH 'Update successful' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
      ENDIF.
      gv_translation = 'X'.
      REFRESH lt_line.
    ENDIF.

  ENDMETHOD.                    "create_other_docu






  METHOD create_program_text.

    DATA: lt_textpool TYPE TABLE OF textpool,
          lt_source   TYPE TABLE OF abapsource,
          l_text      LIKE i_text,
          ls_e071     TYPE e071,
          ls_tadir    TYPE tadir,
          l_covered_by_snote.

    FIELD-SYMBOLS: <ls_textpool> TYPE textpool.

    CALL METHOD set_context
      EXPORTING
        i_masterlang       = i_masterlang
        i_langu            = i_langu
        i_object           = 'REPT'
        i_obj_name         = i_progname
      IMPORTING
        e_covered_by_snote = l_covered_by_snote.
    CHECK l_covered_by_snote IS INITIAL.

    CALL FUNCTION 'RPY_PROGRAM_READ'
      EXPORTING
        language            = i_langu
        program_name        = i_progname
        with_includelist    = space
        only_texts          = 'X'
        read_latest_version = 'X'
        with_lowercase      = 'X'
      TABLES
        textelements        = lt_textpool
        source              = lt_source          "dummy for 46C
      EXCEPTIONS
        cancelled           = 1
        not_found           = 2
        permission_error    = 3
        OTHERS              = 4.
    IF sy-subrc EQ 2.
*      READ TEXTPOOL i_progname INTO lt_textpool LANGUAGE i_langu.
      IF i_progname NE gv_progname_rept.  "show following message only once
        MESSAGE i666(01) WITH 'Report Texts can not be created yet.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        ls_e071-pgmid    = 'LIMU'.
        ls_e071-object   = 'REPT'.
        ls_e071-obj_name = i_progname.
        CALL FUNCTION 'SCWB_GET_TADIR_REM'
          EXPORTING
            is_e071      = ls_e071
          IMPORTING
            es_tadir_key = ls_tadir.
        MESSAGE w666(01) WITH 'Please execute this report again when' ls_tadir-object ls_tadir-obj_name 'has been created.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
      ENDIF.
      gv_progname_rept = i_progname.
      RETURN.
    ELSEIF sy-subrc NE 0.
      MESSAGE e666(01) WITH 'Error while reading program text' 'of program' i_progname INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      RETURN.
    ENDIF.

    l_text   = i_text.
    IF i_id EQ 'S' AND i_text(8) NE space AND i_text NE c_ddic_ref.
      "if selection text does note begin with 8 space -> insert them
      SHIFT l_text LEFT DELETING LEADING space.
      SHIFT l_text RIGHT BY 8 PLACES.
    ENDIF.

    READ TABLE lt_textpool ASSIGNING <ls_textpool>
                           WITH KEY id  = i_id
                                    key = i_key.
    IF sy-subrc EQ 0.  "already exists
      IF l_text   EQ <ls_textpool>-entry AND
         i_length EQ <ls_textpool>-length.
        MESSAGE i666(01) WITH 'No update necessary for program text' i_key INTO sy-lisel. "#EC *
        CALL METHOD log_message.
        RETURN. "nothing to do
      ELSE.
        "update existing entry
        <ls_textpool>-entry = l_text.
        sy-fleng = strlen( l_text ).
        IF i_length IS INITIAL OR i_length LT sy-fleng.
          <ls_textpool>-length = strlen( l_text ).
        ELSE.
          <ls_textpool>-length = i_length.
        ENDIF.
        IF testrun NE space.
          MESSAGE i666(01) WITH 'Program text' i_key 'will be updated.' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
      ENDIF.
    ELSE.
      "add new entry
*      APPEND INITIAL LINE TO lt_textpool ASSIGNING <ls_textpool>.
      APPEND INITIAL LINE TO lt_textpool. READ TABLE lt_textpool INDEX sy-tabix ASSIGNING <ls_textpool>.   "46C
      <ls_textpool>-id    = i_id.
      <ls_textpool>-key   = i_key.
      <ls_textpool>-entry = l_text.
      IF i_length IS INITIAL.
        <ls_textpool>-length = strlen( l_text ).
      ELSE.
        <ls_textpool>-length = i_length.
      ENDIF.
      IF testrun NE space.
        MESSAGE i666(01) WITH 'Program text' i_key 'will be created.' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
      ENDIF.
    ENDIF.

    CALL METHOD add_to_transport
      EXPORTING
        i_devclass   = i_devclass
        i_masterlang = i_masterlang
        i_langu      = i_langu
        i_object     = 'REPT'
        i_obj_name   = i_progname
      EXCEPTIONS
        OTHERS       = 1.
    CHECK sy-subrc EQ 0 OR i_progname EQ myrepid.
    TRY.                                                                                                               ">=SAPBASIS640
        CALL FUNCTION 'RPY_TEXTELEMENTS_INSERT'    "other funcs in version 00047
          EXPORTING
            development_class  = i_devclass
            language           = i_langu
            program_name       = i_progname
            temporary          = 'X'    "transport check was already done
            transport_number   = space
            r2_flag            = space
          TABLES
            source             = lt_textpool
          EXCEPTIONS                                        "#EC FB_RC
            cancelled          = 1
            permission_error   = 2
            program_not_exists = 3
            OTHERS             = 4.
      CATCH cx_root.  "e.g. CX_SY_DYN_CALL_ILLEGAL_FUNC                                                                    ">=SAPBASIS640
        MESSAGE e666(01) WITH 'Error in function RPY_TEXTELEMENTS_INSERT.' 'Implement Note 1842889.' INTO sy-lisel. "#EC * ">=SAPBASIS640
        CALL METHOD log_message.                                                                                           ">=SAPBASIS640
        MESSAGE e666(01) WITH 'Perform the manual steps described in note' '1842889.' INTO sy-lisel. "#EC *                ">=SAPBASIS640
        sy-subrc = 9.                                                                                                      ">=SAPBASIS640
    ENDTRY.                                                                                                                ">=SAPBASIS640
    IF sy-subrc EQ 0.
      IF i_key IS INITIAL.
        MESSAGE i666(01) WITH 'Update successful for program title' i_key INTO sy-lisel. "#EC *
      ELSE.
        MESSAGE i666(01) WITH 'Update successful for program text'  i_key INTO sy-lisel. "#EC *
      ENDIF.
      CALL METHOD log_message.
    ELSE.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      IF i_key IS INITIAL.
        MESSAGE e666(01) WITH 'Update failed for program title' i_key INTO sy-lisel. "#EC *
      ELSE.
        MESSAGE e666(01) WITH 'Update failed for program text'  i_key INTO sy-lisel. "#EC *
      ENDIF.
      CALL METHOD log_message.
    ENDIF.

  ENDMETHOD.                    "create_program_text



  METHOD create_user_interface.

    DATA: ls_adm       TYPE rsmpe_adm,
          lt_sta       TYPE TABLE OF rsmpe_stat,
          lt_fun       TYPE TABLE OF rsmpe_funt,
          lt_men       TYPE TABLE OF rsmpe_men,
          lt_mtx       TYPE TABLE OF rsmpe_mnlt,
          lt_act       TYPE TABLE OF rsmpe_act,
          lt_but       TYPE TABLE OF rsmpe_but,
          lt_pfk       TYPE TABLE OF rsmpe_pfk,
          lt_set       TYPE TABLE OF rsmpe_staf,
          lt_doc       TYPE TABLE OF rsmpe_atrt,
          lt_tit       TYPE TABLE OF rsmpe_titt,
          lt_biv       TYPE TABLE OF rsmpe_buts,
          lt_ctx       TYPE TABLE OF rsmpe_ctx,
          lt_texts     TYPE TABLE OF rsmptexts,
          l_state,
          ls_tr_key    TYPE trkey,
          ls_guistatus LIKE LINE OF gr_guistatus VALUE 'IEQ'.

    CALL METHOD set_context
      EXPORTING
        i_masterlang = i_masterlang
        i_langu      = i_langu
        i_object     = 'CUAD'
        i_obj_name   = i_progname.

    l_state = 'I'.
    DO 2 TIMES.
      CALL FUNCTION 'RS_CUA_INTERNAL_FETCH'
        EXPORTING
          program   = i_progname
          language  = i_langu
          state     = l_state   "1. inactive, 2. active
        IMPORTING
          adm       = ls_adm
        TABLES
          sta       = lt_sta
          fun       = lt_fun
          men       = lt_men
          mtx       = lt_mtx
          act       = lt_act
          but       = lt_but
          pfk       = lt_pfk
          set       = lt_set
          doc       = lt_doc
          tit       = lt_tit
          biv       = lt_biv
        EXCEPTIONS
          not_found = 1
          OTHERS    = 99.
      IF sy-subrc EQ 0 AND NOT lt_sta[] IS INITIAL.
        EXIT. "DO.
      ENDIF.
      l_state = 'A'.
    ENDDO.

    IF is_adm-actcode IS INITIAL AND it_act[] IS NOT INITIAL OR   "not passed by caller
       is_adm-mencode IS INITIAL AND it_men[] IS NOT INITIAL OR
       is_adm-pfkcode IS INITIAL AND it_pfk[] IS NOT INITIAL OR
       is_adm-actcode CN ' 0123456789' OR   "inconsistent
       is_adm-mencode CN ' 0123456789' OR
       is_adm-pfkcode CN ' 0123456789'.


      DATA: ls_men TYPE rsmpe_men,
            ls_act TYPE rsmpe_act,
            ls_pfk TYPE rsmpe_pfk.

      "determine consistent values on the fly based on input tables
      "valid actcode is defined in LSMPIF03 form check_adm -> l_adm-actcode CO ' 0123456789'
      CLEAR: ls_act, ls_men, ls_pfk.
      CLEAR: is_adm-actcode, is_adm-mencode, is_adm-pfkcode.

      LOOP AT it_act[] INTO ls_act WHERE code(6) CO ' 0123456789'.
        CHECK ls_act-code GT is_adm-actcode.
        is_adm-actcode = ls_act-code.
      ENDLOOP.

      LOOP AT it_men[] INTO ls_men WHERE code(6) CO ' 0123456789'.
        CHECK ls_men-code GT is_adm-mencode.
        is_adm-mencode = ls_men-code.
      ENDLOOP.

      LOOP AT it_pfk[] INTO ls_pfk WHERE code(6) CO ' 0123456789'.
        CHECK ls_pfk-code GT is_adm-pfkcode.
        is_adm-pfkcode = ls_pfk-code.
      ENDLOOP.

      is_adm-mod_langu = ls_adm-mod_langu.       "keep current MOD_LANGU

    ENDIF.

    IF ls_adm EQ is_adm AND
       lt_sta EQ it_sta AND
       lt_fun EQ it_fun AND
       lt_men EQ it_men AND
       lt_mtx EQ it_mtx AND
       lt_act EQ it_act AND
       lt_but EQ it_but AND
       lt_pfk EQ it_pfk AND
       lt_set EQ it_set AND
       lt_doc EQ it_doc AND
       lt_tit EQ it_tit AND
       lt_biv EQ it_biv.

      MESSAGE i666(01) WITH 'No update necessary' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      IF l_state EQ 'I'.
        ls_guistatus-low = i_progname.
        COLLECT ls_guistatus INTO gr_guistatus.  "save in activation worklist if CUAD was inactive
      ENDIF.
      RETURN.
    ENDIF.

    "determine transport key
    DATA: ls_e071  TYPE e071, ls_tadir TYPE tadir, ls_tadir_key TYPE tadir.
    ls_tr_key-sub_type = 'CUAD'.
    ls_tr_key-sub_name = i_progname.
    ls_e071-pgmid    = 'LIMU'.
    ls_e071-object   = 'CUAD'.
    ls_e071-obj_name = i_progname.
    CALL FUNCTION 'SCWB_GET_TADIR_REM'
      EXPORTING
        is_e071      = ls_e071
      IMPORTING
        es_tadir     = ls_tadir
        es_tadir_key = ls_tadir_key.
    ls_tr_key-obj_type = ls_tadir_key-object.
    ls_tr_key-obj_name = ls_tadir_key-obj_name.

    "check if program exists
    SELECT SINGLE name FROM trdir INTO sy-lisel WHERE name = i_progname.
    IF sy-subrc NE 0.
      MESSAGE i666(01) WITH 'GUI Definition can not be created yet.' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      MESSAGE w666(01) WITH 'Please execute this report again when' ls_tr_key-obj_type ls_tr_key-obj_name 'has been created.' INTO sy-lisel. "#EC *
      CALL METHOD log_message.
      RETURN.
    ENDIF.

    CALL METHOD add_to_transport
      EXPORTING
        i_object   = 'CUAD'
        i_obj_name = i_progname
        i_devclass = i_devclass
        i_langu    = i_langu
      EXCEPTIONS
        OTHERS     = 1.
    CHECK sy-subrc EQ 0.

    ls_guistatus-low = i_progname.
    COLLECT ls_guistatus INTO gr_guistatus.  "save in activation worklist if CUAD gets changed

    "determine current maintenance language (in case that status did exist before)
    DATA: l_masterlang LIKE i_langu.
    "EUDB-SPRSL is always D, EUDB-LANGU seems to be master language
    SELECT SINGLE langu FROM eudb INTO l_masterlang     "#EC CI_GENBUFF
                       WHERE ( relid EQ scua_c_relid_inactive OR
                               relid EQ scua_c_relid_active )
                         AND ( name  EQ i_progname ).

    IF sy-subrc NE 0.
      l_masterlang = ls_tadir-masterlang.
    ENDIF.
    IF l_masterlang IS INITIAL.
      l_masterlang = i_langu.
    ENDIF.

    IF i_langu = l_masterlang.  "do only use for masterlanguage!
      CALL FUNCTION 'RS_CUA_INTERNAL_WRITE'
        EXPORTING
          program   = i_progname
          language  = i_langu
          tr_key    = ls_tr_key
          adm       = is_adm
          state     = 'I'   "I = inactive A = activ
        TABLES
          sta       = it_sta
          fun       = it_fun
          men       = it_men
          mtx       = it_mtx
          act       = it_act
          but       = it_but
          pfk       = it_pfk
          set       = it_set
          doc       = it_doc
          tit       = it_tit
          biv       = it_biv
        EXCEPTIONS
          not_found = 1
          OTHERS    = 2.
      IF sy-subrc NE 0.
        CALL METHOD log_message.
        RETURN.
      ELSE.
        CALL FUNCTION 'RS_CUA_INTERNAL_GENERATE'
          EXPORTING
            program = i_progname
          EXCEPTIONS
            OTHERS  = 0.

        MESSAGE i666(01) WITH 'Update successful' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
      ENDIF.
    ELSE.
      PERFORM edittab_to_sourcetab IN PROGRAM saplsmpi      "#EC ENHOK
                          TABLES it_fun it_mtx it_sta        it_tit it_doc
                                 lt_fun                     "#EC ENHOK
                                 lt_mtx lt_sta lt_ctx lt_tit lt_doc  "dummy
                                 lt_texts
                           USING i_progname i_langu.

      "translation must not be stored in inactive version
      DELETE FROM rsmptextsi WHERE progname EQ i_progname
                             AND   sprsl    EQ i_langu.
      "fill active version instead
      DELETE FROM rsmptexts  WHERE progname EQ i_progname
                             AND   sprsl    EQ i_langu.

      INSERT rsmptexts FROM TABLE lt_texts ACCEPTING DUPLICATE KEYS.

      IF NOT lt_texts IS INITIAL.
        MESSAGE i666(01) WITH 'Update successful' INTO sy-lisel. "#EC *
        CALL METHOD log_message.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "create_user_interface



  METHOD log_message.

    DATA: ls_msg TYPE bal_s_msg,
          ls_key TYPE adir_key.

    IF sy-msgno IS INITIAL OR sy-msgid IS INITIAL.
      MESSAGE e666(01) WITH 'unknown error' INTO sy-lisel.  "#EC *
    ENDIF.
    IF i_probclass IS INITIAL.
      CASE sy-msgty.  "change problem class (default is 4)
        WHEN 'E' OR 'A'.
          ls_msg-probclass = '2'.
        WHEN 'W'.
          ls_msg-probclass = '3'.
      ENDCASE.
    ENDIF.
    MOVE-CORRESPONDING syst TO ls_msg.
    IF i_object IS NOT INITIAL.
      ls_key-object          = i_object.
      ls_key-obj_name        = i_obj_name.
      ls_msg-context-value   = ls_key.
      ls_msg-context-tabname = c_bal_context.
    ENDIF.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle = gv_log_handle
        i_s_msg      = ls_msg
      EXCEPTIONS
        OTHERS       = 0.

    IF ls_msg-msgty CA 'EA'.
      IF i_object IS INITIAL OR 'REPT''AVAS''VARI' NS i_object.  "uncritical objects
        gv_errors_occured = 'X'.   "will prevent activation step
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "log_message

  METHOD display_log.

    DATA: lt_log_handle TYPE bal_t_logh,
          ls_profile    TYPE bal_s_prof,
          l_s_fcat      TYPE bal_s_fcat,
          lt_dfies      TYPE TABLE OF dfies,
          ls_dfies      TYPE dfies.
    DATA: lr_filter_client TYPE RANGE OF mandt,
          ls_filter_client LIKE LINE OF lr_filter_client,
          ls_filter        TYPE bal_s_lfil,
          lr_filter        TYPE bal_s_extn,    "range table
          lr_extnumber     TYPE bal_s_extn,
          lt_log_header    TYPE balhdr_t.

    "Reset SNOTE & SCWB mode
    CALL FUNCTION 'SCWG_TOOLFLAG_RESET'.
    CALL FUNCTION 'TR_P_COP_SWICH_ON'.
    TRY. CALL METHOD ('CL_CWB_RUNTIME')=>set_finished. CATCH cx_sy_dyn_call_illegal_class. ENDTRY. ">=SAPBASIS640

    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'.

    "if we come here the action (copy/read/generate/compare) has finshed without dumps hence we reset the trace

    "-------- build profile
    IF 1 = 1.
      "grid
      CALL FUNCTION 'BAL_DSP_PROFILE_STANDARD_GET'
        IMPORTING
          e_s_display_profile = ls_profile
        EXCEPTIONS
          OTHERS              = 0.
      "Set profile
      ls_profile-use_grid   = 'X'.
      ls_profile-tree_ontop = 'X'.
      ls_profile-mess_mark  = 'X'.
      ls_profile-exp_level  = 1.
      ls_profile-show_all   = 'X'.
    ELSE.
      "tree
      CALL FUNCTION 'BAL_DSP_PROFILE_DETLEVEL_GET'
        IMPORTING
          e_s_display_profile = ls_profile
        EXCEPTIONS
          OTHERS              = 0.
    ENDIF.

    "add own fields to field cat
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = c_bal_context
        langu          = space  "no texts
      TABLES
        dfies_tab      = lt_dfies
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc NE 0.
      MESSAGE a666(01) WITH 'Error in DDIF_FIELDINFO_GET for table:' c_bal_context. "#EC *
    ENDIF.

    LOOP AT lt_dfies INTO ls_dfies WHERE fieldname EQ 'OBJECT'
                                      OR fieldname EQ 'OBJ_NAME'.
      l_s_fcat-ref_table = c_bal_context.
      l_s_fcat-ref_field = ls_dfies-fieldname.
      l_s_fcat-outputlen = ls_dfies-outputlen + 1.
*      l_s_fcat-col_pos   = 100 + sy-tabix.   "most rigth columns
      APPEND l_s_fcat TO ls_profile-mess_fcat.
    ENDLOOP.


    "set parameters for saving layout.
    ls_profile-disvariant-report = sy-repid.
    ls_profile-disvariant-handle = 'LOG'.

    ls_profile-clbk_ucbf-userexitp = sy-repid.
    ls_profile-clbk_ucbf-userexitf = 'BAL_CALLBACK_UCOMM'.
*    ls_profile-clbk_ucom-userexitp = sy-repid.
*    ls_profile-clbk_ucom-userexitf = 'BAL_CALLBACK_UCOMM'.
*    ls_profile-ext_push1-active        = 'X'.
*    ls_profile-ext_push1-def-text      = 'DDIC'.
*    ls_profile-ext_push1-def-icon_id   = icon_history.
*    ls_profile-ext_push1-def-icon_text = 'DDIC'.
*    ls_profile-ext_push1-def-quickinfo = 'DDIC Activation log'.

    IF NOT testrun IS INITIAL.
      ls_profile-title = 'Simulation log'.                  "#EC *
    ELSEIF NOT update IS INITIAL.
      ls_profile-title = 'Change Log'.                      "#EC *
    ELSEIF NOT genview IS INITIAL.
      ls_profile-title = 'View Generation Log'.             "#EC *
    ELSEIF gv_log_handle IS INITIAL.
      ls_profile-title = 'All Logs'.                        "#EC *
      CLEAR ls_profile-exp_level.
      CLEAR ls_profile-show_all.
      ls_profile-tree_ontop = 'X'.
    ELSE.
      ls_profile-title = 'Problem Log'.                     "#EC *
      ls_profile-start_row  = 5.
      ls_profile-start_col  = 5.
      ls_profile-end_row    = 30.
      ls_profile-end_col    = 160.
*      ls_profile-TREE_ONTOP = space.
    ENDIF.
    IF sy-repid EQ myrepid.
      CONCATENATE 'UDO -'      ls_profile-title INTO ls_profile-title SEPARATED BY space. "#EC *
    ELSE.
      CONCATENATE sy-repid '-' ls_profile-title INTO ls_profile-title SEPARATED BY space. "#EC *
    ENDIF.


    "-------- find relevant logs
    IF gv_log_handle IS INITIAL.
      CHECK NOT i_db_search IS INITIAL.

      CLEAR: ls_filter, lr_extnumber.

*- Search only log file of this application
      lr_filter-sign   = 'I'.
      lr_filter-option = 'EQ'.
      lr_filter-low    = c_bal_object.
      APPEND lr_filter TO ls_filter-object.

      lr_filter-sign   = 'I'.
      lr_filter-option = 'EQ'.
      lr_filter-low    = c_bal_subobj.
      APPEND lr_filter TO ls_filter-subobject.


      IF sy-repid EQ myrepid.
        "--------- Search only log files of UDO itself
        CALL FUNCTION 'APPL_LOG_DISPLAY'
          EXPORTING
            object                         = c_bal_object
            object_attribute               = 0
            subobject                      = c_bal_subobj
            subobject_attribute            = 0
            external_number                = ' '
            external_number_attribute      = 0
            title_list_screen              = ' '
            title_selection_screen         = ' '
            date_from                      = sy-datum    "#EC DOM_EQUAL
            date_to                        = sy-datum    "#EC DOM_EQUAL
            time_to                        = '235959'    "#EC DOM_EQUAL
            external_number_display_length = 20
            i_s_display_profile            = ls_profile
            i_variant_report               = sy-repid
          EXCEPTIONS
            no_authority                   = 0.
        RETURN.
      ENDIF.

      "--------- Search for log files of generated reports (also valid for copy)
      lr_extnumber-low    = sy-repid.
      lr_extnumber-sign   = 'I'.
      lr_extnumber-option = 'EQ'.
      APPEND lr_extnumber TO ls_filter-extnumber.
      ls_filter_client-sign   = 'I'.
      ls_filter_client-option = 'EQ'.
      ls_filter_client-low    = sy-mandt.
      APPEND ls_filter_client TO lr_filter_client.


*      CALL FUNCTION 'BAL_DB_SEARCH'    "only searches current client
*        EXPORTING
*          i_client           = sy-mandt
*          i_s_log_filter     = ls_filter
*        IMPORTING
*          e_t_log_header     = lt_log_header
*        EXCEPTIONS
*          log_not_found      = 1
*          no_filter_criteria = 2
*          OTHERS             = 3.

      SELECT * FROM balhdr CLIENT SPECIFIED "#EC CI_CLIENT    "option for all clients
             INTO TABLE lt_log_header
             WHERE mandant   IN lr_filter_client       "#EC CI_BUFFSUBQ
               AND object    IN ls_filter-object
               AND subobject IN ls_filter-subobject
               AND extnumber IN ls_filter-extnumber.
      IF sy-subrc EQ 0.
        "Load log files from database into memory
        CALL FUNCTION 'BAL_DB_LOAD'
          EXPORTING
            i_t_log_header = lt_log_header
          IMPORTING
            e_t_log_handle = lt_log_handle
          EXCEPTIONS
            OTHERS         = 0.
      ENDIF.
    ELSE.
      APPEND gv_log_handle TO lt_log_handle.
    ENDIF.


    "-------- display the logs
    DATA: ls_statistics TYPE bal_s_scnt.
    IF i_no_save IS INITIAL.
      CALL METHOD lcl_wb=>save_log.
      ls_statistics-msg_cnt_al = 1.
    ELSE.
      CALL FUNCTION 'BAL_LOG_HDR_READ'
        EXPORTING
          i_log_handle = gv_log_handle
        IMPORTING
          e_statistics = ls_statistics
        EXCEPTIONS
          OTHERS       = 0.
    ENDIF.

    IF ls_statistics-msg_cnt_al NE 0 AND gv_unit_test IS INITIAL AND sy-batch IS INITIAL.
      CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
        EXPORTING
          i_t_log_handle      = lt_log_handle
          i_s_display_profile = ls_profile
          i_amodal            = space
        EXCEPTIONS
          OTHERS              = 0.
    ENDIF.

    IF NOT i_no_save IS INITIAL.
      CALL FUNCTION 'BAL_LOG_REFRESH'
        EXPORTING
          i_log_handle = gv_log_handle
        EXCEPTIONS
          OTHERS       = 0.
      "reset context
      CALL METHOD set_context( EXPORTING i_langu = space i_object = space i_obj_name = space ).
    ENDIF.

    CLEAR gv_log_handle.

  ENDMETHOD.                    "display_log

  METHOD save_log.
    DATA: lt_log_handle TYPE bal_t_logh.

    APPEND gv_log_handle TO lt_log_handle.

    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_t_log_handle = lt_log_handle
      EXCEPTIONS
        OTHERS         = 0.

  ENDMETHOD.                    "save_log

  METHOD set_context.

    STATICS: BEGIN OF lss_key, "save last key
               i_object    TYPE e071-object,
               i_obj_name  TYPE adir_key-obj_name,
               i_obj_name2 TYPE adir_key-obj_name,
               i_text      TYPE string,
               i_langu     TYPE sylangu,
             END OF lss_key,
             s_covered_by_snote,
             s_prev_time   TYPE syuzeit.

    DATA: ls_msg_defaults TYPE bal_s_mdef,
          ls_context      TYPE adir_key,
          l_text(70),
          l_mode          TYPE string,
          ls_key          LIKE lss_key.

    DATA: ls_e071      TYPE e071,
          ls_tadir     TYPE tadir,
          ls_tadir_key TYPE tadir.

    CHECK NOT lcl_wb=>language_installed( i_langu ) IS INITIAL.

    IF sy-repid NE myrepid.
      IF sy-uzeit NE s_prev_time.       "1 second gone
        CONCATENATE i_object i_obj_name INTO l_text SEPARATED BY space.
        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            text = l_text.
        s_prev_time       = sy-uzeit.
      ENDIF.
    ENDIF.

    "trace current object to be able to know what was processed in case a dump occurs
    CONCATENATE space i_object i_obj_name INTO l_text SEPARATED BY '|'.  "fromsys not possible

    ls_key-i_object    = i_object.
    ls_key-i_obj_name  = i_obj_name.
    ls_key-i_obj_name2 = i_obj_name2.
    ls_key-i_text      = i_text.
    ls_key-i_langu     = i_langu.
    IF ls_key EQ lss_key. "check last key
      "avoid double message like "add field to table"
      e_covered_by_snote = s_covered_by_snote.
      RETURN.
    ELSE.
      lss_key = ls_key.
      CLEAR: e_covered_by_snote, s_covered_by_snote.
    ENDIF.

    ls_context-object   = i_object.
    CONCATENATE i_obj_name i_obj_name2 INTO ls_context-obj_name SEPARATED BY space.
    ls_msg_defaults-log_handle      = gv_log_handle.
    ls_msg_defaults-context-value   = ls_context.
    ls_msg_defaults-context-tabname = c_bal_context.

    CALL FUNCTION 'BAL_GLB_MSG_DEFAULTS_SET'
      EXPORTING
        i_s_msg_defaults = ls_msg_defaults
      EXCEPTIONS
        OTHERS           = 0.

    IF NOT i_no_message IS INITIAL.
      RETURN.
    ENDIF.

    "try to check if object exists
    IF NOT i_object IS INITIAL AND NOT i_obj_name IS INITIAL.
      ls_e071-pgmid    = 'R3TR'.
      ls_e071-object   = i_object.
      ls_e071-obj_name = i_obj_name.

      CALL FUNCTION 'SCWB_GET_TADIR_REM'
        EXPORTING
          is_e071      = ls_e071
        IMPORTING
          es_tadir_key = ls_tadir_key
          es_tadir     = ls_tadir.
      IF ls_tadir_key IS INITIAL.
        ls_e071-pgmid   = 'LIMU'.
        CALL FUNCTION 'SCWB_GET_TADIR_REM'
          EXPORTING
            is_e071      = ls_e071
          IMPORTING
            es_tadir_key = ls_tadir_key
            es_tadir     = ls_tadir.
      ENDIF.

      IF ls_tadir IS INITIAL.
        l_mode = 'Create'.                                  "#EC NOTEXT
      ELSE.
        l_mode = 'Change'.                                  "#EC NOTEXT
        "check if object has been manually modified by customer.
        SELECT COUNT( * ) FROM adiraccess WHERE pgmid    EQ ls_tadir-pgmid
                                            AND object   EQ ls_tadir-object
                                            AND obj_name EQ ls_tadir-obj_name.
        IF sy-dbcnt NE 0.
          MESSAGE w666(01) WITH ls_tadir-object ls_tadir-obj_name 'was manually changed before.' 'Please adjust manually afterwards' INTO sy-lisel. "#EC *
          CALL METHOD log_message.
        ENDIF.
      ENDIF.
    ENDIF.

    IF i_text IS INITIAL.
      CALL METHOD get_object_text
        EXPORTING
          i_object   = i_object
          i_obj_name = i_obj_name
        RECEIVING
          r_text     = l_text.

      CONCATENATE l_mode l_text INTO l_text SEPARATED BY space.
    ELSE.
      l_text = i_text.
    ENDIF.

    IF NOT l_text IS INITIAL.
      IF i_masterlang NE space AND i_langu NE i_masterlang. "translation -> no snote_check
        l_text = 'Update translation'.                      "#EC NOTEXT
      ELSEIF i_skip_snote_check IS INITIAL AND NOT lcl_wb=>snote_support( i_object ) IS INITIAL.
        l_text = 'Covered by SNOTE'.    "#EC NOTEXT
        e_covered_by_snote = s_covered_by_snote = 'X'.
      ENDIF.
      IF NOT i_langu IS INITIAL.
        MESSAGE s666(01) WITH l_text '( language' i_langu ')' INTO l_text. "#EC NOTEXT
      ENDIF.
      CALL FUNCTION 'BAL_LOG_MSG_ADD_FREE_TEXT'
        EXPORTING
          i_msgty     = i_msgty
          i_text      = l_text
          i_probclass = '3'
        EXCEPTIONS
          OTHERS      = 0.
    ENDIF.

  ENDMETHOD.                    "set_context


  METHOD snote_support.

    STATICS: s_note_2459558.
    DATA: l_object LIKE i_object.

    CLEAR r_supported.

    CHECK sy-cprog NE myrepid.  "no check during copy with UDO

    l_object = i_object.
    CASE i_object.
      WHEN 'DOMA' OR 'DTEL' OR 'TABL' OR 'ENQU' OR 'VIEW' OR 'TTYP' OR 'SHLP'.
        l_object+3 = 'D'. "e.g. DTEL -> DTED
    ENDCASE.

    CHECK gv_objects_with_snote_check CS l_object.

    IF s_note_2459558 IS INITIAL.
      s_note_2459558 = '-'.
      TRY.
          "check if note 2459558 is applied
          PERFORM filter_supobjtype_by_sys_patch IN PROGRAM saplscwo IF FOUND. "call with missing parameter!
        CATCH cx_root.
          s_note_2459558 = 'X'. "runtime error -> FORM was found -> Note 2459558 is available
      ENDTRY.
    ENDIF.
    CHECK s_note_2459558 EQ 'X'.   "do the check only if note is applied

    CALL FUNCTION 'SCWB_CHECK_OBJTYPE_SUPPORTED'
      EXPORTING
        iv_exe_mode  = 'N'  "SNOTE
        iv_objtype   = l_object
      IMPORTING
        ev_supported = r_supported.

  ENDMETHOD.                    "snote_support



ENDCLASS.                    "lcl_wb IMPLEMENTATION


*----------------------------------------------------------------------*
*       CLASS ltc_testrun DEFINITION
*----------------------------------------------------------------------*
CLASS ltc_testrun DEFINITION FOR TESTING                         ">=SAPBASIS702
  DURATION MEDIUM RISK LEVEL HARMLESS.                           ">=SAPBASIS702
  PUBLIC SECTION.                                                ">=SAPBASIS702
    METHODS: execute FOR TESTING.                                ">=SAPBASIS702
ENDCLASS.                                                        ">=SAPBASIS702

*----------------------------------------------------------------------*
*       CLASS ltc_testrun IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ltc_testrun IMPLEMENTATION.                                ">=SAPBASIS702
  METHOD execute.                                                ">=SAPBASIS702
    CHECK sy-repid NE myrepid.                                   ">=SAPBASIS702
    SELECT SINGLE state FROM ('SFW_SWITCH_STATE') INTO sy-lisel  ">=SAPBASIS702
          WHERE switch_id EQ 'S4H_DOCU_CLOUD' AND state EQ 'T'.  ">=SAPBASIS702
    CHECK sy-subrc NE 0.   "no unit test in cloud system         ">=SAPBASIS702
    CLEAR: gt_trkorr, gv_trkorr.                                 ">=SAPBASIS702
    testrun = 'X'.                                               ">=SAPBASIS702
    update  = space.                                             ">=SAPBASIS702
    genview = space.                                             ">=SAPBASIS702
    gv_unit_test = 'X'.                                          ">=SAPBASIS702
    PERFORM show_instruction.                                    ">=SAPBASIS702
    CHECK sy-saprl GE '754'. "full test only in S4 infinity      ">=SAPBASIS702
    DATA: lt_e070 TYPE TABLE OF e070.                            ">=SAPBASIS702
    APPEND 'DUMMY' TO lt_e070.                                   ">=SAPBASIS702
    PERFORM prepare_table USING 'E070' 'TRKORR'                  ">=SAPBASIS702
            lt_e070 CHANGING sy-lisel.                           ">=SAPBASIS702
    CALL METHOD lcl_wb=>init.                                    ">=SAPBASIS702
    PERFORM update.                                              ">=SAPBASIS702
    PERFORM genview.                                             ">=SAPBASIS702
    CALL METHOD lcl_wb=>activate.                                ">=SAPBASIS702
    IF gv_errors_occured NE space.                               ">=SAPBASIS702
      CALL METHOD cl_abap_unit_assert=>fail                      ">=SAPBASIS702
        EXPORTING                                                ">=SAPBASIS702
          msg   = 'Error occured' "#EC NOTEXT                    ">=SAPBASIS702
          level = if_aunit_constants=>fatal                      ">=SAPBASIS702
          quit  = if_aunit_constants=>no.                        ">=SAPBASIS702
    ENDIF.                                                       ">=SAPBASIS702
  ENDMETHOD.                    "execute                         ">=SAPBASIS702
  ">=SAPBASIS702
ENDCLASS.                    "ltc_units IMPLEMENTATION           ">=SAPBASIS702

*&---------------------------------------------------------------------*
*&      Form  main
*&---------------------------------------------------------------------*
FORM main.

  DO.                                                           "1900
    CALL SELECTION-SCREEN selection_screen_1900.                "1900
    IF sy-subrc NE 0.                                           "1900
      EXIT. "DO                                                 "1900
    ENDIF.                                                      "1900

    IF showlogs IS INITIAL.
      CLEAR: gt_trkorr, gv_trkorr.   "Transport popup shall come once
      IF lcl_wb=>init( i_note = '' ) IS INITIAL. "<note which indicates that report is not needed anymore>
        IF NOT update IS INITIAL OR NOT testrun IS INITIAL.
          PERFORM update.
          CALL METHOD lcl_wb=>activate.
        ENDIF.
        IF NOT genview IS INITIAL OR NOT testrun IS INITIAL.
          PERFORM genview.
        ENDIF.
      ENDIF.
    ENDIF.
    CALL METHOD lcl_wb=>display_log   "one or all logs
      EXPORTING
        i_db_search = showlogs.
    IF sy-cprog NE myrepid AND gv_unit_test IS INITIAL.
      SUBMIT (sy-repid)   "start from scratch with initial global variables
        WITH testrun = testrun WITH update = update WITH genview = genview.
    ENDIF.
  ENDDO.                                                        "1900

ENDFORM.                    "main

FORM update_01. " REPT CL_CVI_CUSTOMIZING_RESOLVE====CP ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_program_text    "#EC *
    EXPORTING
      i_progname   = 'CL_CVI_CUSTOMIZING_RESOLVE====CP'
      i_devclass   = 'CVI_TOOLS_SUPPORTABILITY'
      i_masterlang = 'E'
      i_langu      = 'E':
      i_id         = 'I'
      i_key        = '001'
      i_text       = 'PPO connection activated'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '002'
      i_text       = 'Business process CVI 01 activated'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '003'
      i_text       = 'Business process CVI 02 activated'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '004'
      i_text       = 'Business process CVI 03 activated'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '005'
      i_text       = 'Business process CVI 04 activated'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '006'
      i_text       = 'Address number range object is exhausted'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '007'
      i_text       = 'Address number range object is about to exhaust'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '008'
      i_text       = 'Address number range object is consistent'  "#EC NOTEXT
      i_length     = '82',

      i_id         = 'I'
      i_key        = '009'
      i_text       = 'Error Log'  "#EC NOTEXT
      i_length     = '19',

      i_id         = 'I'
      i_key        = '010'
      i_text       = 'Customer Account Group'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = '011'
      i_text       = 'Supplier Account Group'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = '012'
      i_text       = 'Role Description'  "#EC NOTEXT
      i_length     = '26',

      i_id         = 'I'
      i_key        = '013'
      i_text       = 'Contact Person assignment is not active'  "#EC NOTEXT
      i_length     = '78',

      i_id         = 'I'
      i_key        = '019'
      i_text       = 'Save failed:'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '020'
      i_text       = 'Tax Category is inconsistent'  "#EC NOTEXT
      i_length     = '56',

      i_id         = 'I'
      i_key        = '021'
      i_text       = '''Tax Category is consistent'  "#EC NOTEXT
      i_length     = '56',

      i_id         = 'I'
      i_key        = '022'
      i_text       = 'Inconsistent Tax Fields: One or more of the following fields are inconsistent: STCD1, STCD2, STKZU, STCEG'  "#EC NOTEXT
      i_length     = '132',

      i_id         = 'I'
      i_key        = '023'
      i_text       = 'Inconsistent Location/Industry Fields: One or more of the following fields are inconsistent: BBBNR, BBSNR, BUBKZ, BRSCH, VBUND'  "#EC NOTEXT
      i_length     = '132',

      i_id         = 'I'
      i_key        = '024'
      i_text       = 'Inconsistent Bank Fields: One or more of the following fields are inconsistent: BANKS, BANKL, BANKN'  "#EC NOTEXT
      i_length     = '132',

      i_id         = 'I'
      i_key        = '025'
      i_text       = 'Legal Entity Mapping data is consistent'  "#EC NOTEXT
      i_length     = '78',

      i_id         = 'I'
      i_key        = '026'
      i_text       = 'Please select one industry as standard'  "#EC NOTEXT
      i_length     = '76',

      i_id         = 'I'
      i_key        = '027'
      i_text       = 'Customer account group to BP role'  "#EC NOTEXT
      i_length     = '66',

      i_id         = 'I'
      i_key        = '028'
      i_text       = 'Customer account group to BP group'  "#EC NOTEXT
      i_length     = '68',

      i_id         = 'I'
      i_key        = '029'
      i_text       = 'Vendor account group to BP role'  "#EC NOTEXT
      i_length     = '62',

      i_id         = 'I'
      i_key        = '030'
      i_text       = 'Vendor account group to BP group'  "#EC NOTEXT
      i_length     = '64',

      i_id         = 'I'
      i_key        = '031'
      i_text       = 'BP group to customer account group'  "#EC NOTEXT
      i_length     = '64',

      i_id         = 'I'
      i_key        = '032'
      i_text       = 'BP group to vendor account group'  "#EC NOTEXT
      i_length     = '64',

      i_id         = 'I'
      i_key        = '033'
      i_text       = 'Green LED okay'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '034'
      i_text       = 'Yellow LED caution'  "#EC NOTEXT
      i_length     = '28',

      i_id         = 'I'
      i_key        = '035'
      i_text       = 'Red LED errors'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '036'
      i_text       = 'Department (CVI)'  "#EC NOTEXT
      i_length     = '40',

      i_id         = 'I'
      i_key        = '037'
      i_text       = 'Function (CVI)'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '038'
      i_text       = 'Authority (CVI)'  "#EC NOTEXT
      i_length     = '25',

      i_id         = 'I'
      i_key        = '039'
      i_text       = 'VIP Indicator (CVI)'  "#EC NOTEXT
      i_length     = '29',

      i_id         = 'I'
      i_key        = '040'
      i_text       = 'Marital Status (CVI)'  "#EC NOTEXT
      i_length     = '40',

      i_id         = 'I'
      i_key        = '041'
      i_text       = 'Legal Status (CVI)'  "#EC NOTEXT
      i_length     = '28',

      i_id         = 'I'
      i_key        = '042'
      i_text       = 'Card Type (BP)'  "#EC NOTEXT
      i_length     = '24'.

ENDFORM.

FORM update_02. " REPT CVI_CUSTOMIZING_RESOLVE ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_program_text    "#EC *
    EXPORTING
      i_progname   = 'CVI_CUSTOMIZING_RESOLVE'
      i_devclass   = 'CVI_TOOLS_SUPPORTABILITY'
      i_masterlang = 'E'
      i_langu      = 'E':
      i_id         = 'I'
      i_key        = '001'
      i_text       = 'General Checks'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '002'
      i_text       = 'Customer -> BP Checks'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '003'
      i_text       = 'Vendor -> BP Checks'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '004'
      i_text       = 'BP -> Customer Checks'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '005'
      i_text       = 'BP -> Vendor Checks'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '006'
      i_text       = 'Synchronization Direction'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '007'
      i_text       = 'Connection to PPO'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '008'
      i_text       = 'Registered Function Modules'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '009'
      i_text       = 'Tax Classification'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '010'
      i_text       = 'Address Number Range Validity Check'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '013'
      i_text       = 'Select Industry System'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '014'
      i_text       = 'Missing Industry Keys - Incoming'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '015'
      i_text       = 'Missing Industry Keys - Outgoing'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '017'
      i_text       = 'Setting for Business Partner Roles'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '018'
      i_text       = 'Setting for Business Partner Groupings'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '019'
      i_text       = 'Customer Account Group -> Role'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '020'
      i_text       = 'Customer Account Group -> Grouping'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '021'
      i_text       = 'Missing Activation'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '022'
      i_text       = 'Missing Department Numbers'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '023'
      i_text       = 'Missing Functions'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '024'
      i_text       = 'Missing Authority'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '025'
      i_text       = 'Missing VIP Indicator'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '026'
      i_text       = 'Missing Marital Status'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '027'
      i_text       = 'Missing Legal Status to Legal Form'  "#EC NOTEXT
      i_length     = '40',

      i_id         = 'I'
      i_key        = '028'
      i_text       = 'Missing Payment Cards'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '035'
      i_text       = 'Vendor Account Group -> Role'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '036'
      i_text       = 'Vendor Account Group -> Grouping'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = '044'
      i_text       = 'Contact person'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '101'
      i_text       = 'Source Synchronization Object'  "#EC NOTEXT
      i_length     = '58',

      i_id         = 'I'
      i_key        = '102'
      i_text       = 'Target Synchronization Object'  "#EC NOTEXT
      i_length     = '29',

      i_id         = 'I'
      i_key        = '103'
      i_text       = 'Active Indicator'  "#EC NOTEXT
      i_length     = '16',

      i_id         = 'I'
      i_key        = '104'
      i_text       = 'Type'  "#EC NOTEXT
      i_length     = '4',

      i_id         = 'I'
      i_key        = '105'
      i_text       = 'Message'  "#EC NOTEXT
      i_length     = '17',

      i_id         = 'I'
      i_key        = '107'
      i_text       = 'PPO Business Process'  "#EC NOTEXT
      i_length     = '40',

      i_id         = 'I'
      i_key        = '108'
      i_text       = 'Event'  "#EC NOTEXT
      i_length     = '15',

      i_id         = 'I'
      i_key        = '109'
      i_text       = 'Object'  "#EC NOTEXT
      i_length     = '16',

      i_id         = 'I'
      i_key        = '110'
      i_text       = 'Position'  "#EC NOTEXT
      i_length     = '10',

      i_id         = 'I'
      i_key        = '111'
      i_text       = 'Function Module'  "#EC NOTEXT
      i_length     = '25',

      i_id         = 'I'
      i_key        = '112'
      i_text       = 'Call'  "#EC NOTEXT
      i_length     = '10',

      i_id         = 'I'
      i_key        = '113'
      i_text       = 'Tax Category'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '115'
      i_text       = 'Description'  "#EC NOTEXT
      i_length     = '21',

      i_id         = 'I'
      i_key        = '116'
      i_text       = 'Type'  "#EC NOTEXT
      i_length     = '14',

      i_id         = 'I'
      i_key        = '117'
      i_text       = 'Status'  "#EC NOTEXT
      i_length     = '16',

      i_id         = 'I'
      i_key        = '118'
      i_text       = 'Number Range'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '119'
      i_text       = 'Message'  "#EC NOTEXT
      i_length     = '17',

      i_id         = 'I'
      i_key        = '121'
      i_text       = 'BP Role'  "#EC NOTEXT
      i_length     = '17',

      i_id         = 'I'
      i_key        = '122'
      i_text       = 'Choose Standard Industry System'  "#EC NOTEXT
      i_length     = '31',

      i_id         = 'I'
      i_key        = '124'
      i_text       = 'Description'  "#EC NOTEXT
      i_length     = '21',

      i_id         = 'I'
      i_key        = '125'
      i_text       = 'Direction'  "#EC NOTEXT
      i_length     = '19',

      i_id         = 'I'
      i_key        = '127'
      i_text       = 'BP Grouping'  "#EC NOTEXT
      i_length     = '21',

      i_id         = 'I'
      i_key        = '128'
      i_text       = 'Range'  "#EC NOTEXT
      i_length     = '15',

      i_id         = 'I'
      i_key        = '129'
      i_text       = 'External'  "#EC NOTEXT
      i_length     = '13',

      i_id         = 'I'
      i_key        = '130'
      i_text       = 'Customer Account Group'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = '131'
      i_text       = 'Same Number'  "#EC NOTEXT
      i_length     = '18',

      i_id         = 'I'
      i_key        = '132'
      i_text       = 'Vendor Account Group'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = '133'
      i_text       = 'Mandatory'  "#EC NOTEXT
      i_length     = '19',

      i_id         = 'I'
      i_key        = '134'
      i_text       = 'Contact Person Assignment'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = '135'
      i_text       = 'Department (CVI)'  "#EC NOTEXT
      i_length     = '20',

      i_id         = 'I'
      i_key        = '137'
      i_text       = 'Department (BP)'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '139'
      i_text       = 'Function (CVI)'  "#EC NOTEXT
      i_length     = '18',

      i_id         = 'I'
      i_key        = '141'
      i_text       = 'Function (BP)'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '142'
      i_text       = 'Authority (CVI)'  "#EC NOTEXT
      i_length     = '19',

      i_id         = 'I'
      i_key        = '144'
      i_text       = 'Power of Attorney (BP)'  "#EC NOTEXT
      i_length     = '25',

      i_id         = 'I'
      i_key        = '145'
      i_text       = 'VIP Indicator(CVI)'  "#EC NOTEXT
      i_length     = '28',

      i_id         = 'I'
      i_key        = '147'
      i_text       = 'VIP Indicator(BP)'  "#EC NOTEXT
      i_length     = '27',

      i_id         = 'I'
      i_key        = '148'
      i_text       = 'Marital Status (CVI)'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '150'
      i_text       = 'Marital Status (BP)'  "#EC NOTEXT
      i_length     = '28',

      i_id         = 'I'
      i_key        = '151'
      i_text       = 'Legal Status (CVI)'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '152'
      i_text       = 'Legal Form (BP)'  "#EC NOTEXT
      i_length     = '20',

      i_id         = 'I'
      i_key        = '153'
      i_text       = 'Card Type (CVI)'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = '154'
      i_text       = 'Card Type (BP)'  "#EC NOTEXT
      i_length     = '23',

      i_id         = 'I'
      i_key        = '156'
      i_text       = 'Industry System (CVI)'  "#EC NOTEXT
      i_length     = '25',

      i_id         = 'I'
      i_key        = '157'
      i_text       = 'Industry Key (BP)'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '158'
      i_text       = 'Industry Sector'  "#EC NOTEXT
      i_length     = '25',

      i_id         = 'I'
      i_key        = '159'
      i_text       = 'Industry System'  "#EC NOTEXT
      i_length     = '25',

      i_id         = 'I'
      i_key        = '160'
      i_text       = 'Indicator'  "#EC NOTEXT
      i_length     = '42',

      i_id         = 'I'
      i_key        = '161'
      i_text       = 'Customizing'  "#EC NOTEXT
      i_length     = '21',

      i_id         = 'I'
      i_key        = '162'
      i_text       = 'Indutries BP'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = '163'
      i_text       = 'Select Industry Sector'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = '164'
      i_text       = 'Display <-> Change'  "#EC NOTEXT
      i_length     = '28',

      i_id         = 'I'
      i_key        = '165'
      i_text       = 'Save'  "#EC NOTEXT
      i_length     = '14',

      i_id         = 'I'
      i_key        = '166'
      i_text       = 'Inconsistent Customizing'  "#EC NOTEXT
      i_length     = '48',

      i_id         = 'I'
      i_key        = '167'
      i_text       = 'Inconsistent Customizing Documentation'  "#EC NOTEXT
      i_length     = '76',

      i_id         = 'I'
      i_key        = '168'
      i_text       = 'Activate function module call'  "#EC NOTEXT
      i_length     = '58',

      i_id         = 'I'
      i_key        = 'M01'
      i_text       = 'No records changed, Save not possible'  "#EC NOTEXT
      i_length     = '74',

      i_id         = 'I'
      i_key        = 'M02'
      i_text       = 'Exit Editing'  "#EC NOTEXT
      i_length     = '22',

      i_id         = 'I'
      i_key        = 'M03'
      i_text       = 'You may lose data, do you wish to proceed without saving?'  "#EC NOTEXT
      i_length     = '114',

      i_id         = 'I'
      i_key        = 'M04'
      i_text       = 'Yes'  "#EC NOTEXT
      i_length     = '13',

      i_id         = 'I'
      i_key        = 'M05'
      i_text       = 'No'  "#EC NOTEXT
      i_length     = '12',

      i_id         = 'I'
      i_key        = 'M06'
      i_text       = 'Data was saved'  "#EC NOTEXT
      i_length     = '24',

      i_id         = 'I'
      i_key        = 'T01'
      i_text       = 'Synchronization Direction'  "#EC NOTEXT
      i_length     = '50',

      i_id         = 'I'
      i_key        = 'T02'
      i_text       = 'Connection to PPO'  "#EC NOTEXT
      i_length     = '27',

      i_id         = 'I'
      i_key        = 'T03'
      i_text       = 'Registered Funtion Modules'  "#EC NOTEXT
      i_length     = '52',

      i_id         = 'I'
      i_key        = 'T04'
      i_text       = 'Tax Classification'  "#EC NOTEXT
      i_length     = '28',

      i_id         = 'I'
      i_key        = 'T05'
      i_text       = 'Address Number Range Validity Check'  "#EC NOTEXT
      i_length     = '70',

      i_id         = 'I'
      i_key        = 'T08'
      i_text       = 'Settings for Business Partner Roles'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = 'T09'
      i_text       = 'Settings for Business Partner Groupings'  "#EC NOTEXT
      i_length     = '78',

      i_id         = 'I'
      i_key        = 'T12'
      i_text       = 'Misisng Activation of Contact Persons'  "#EC NOTEXT
      i_length     = '74',

      i_id         = 'I'
      i_key        = 'T13'
      i_text       = 'Missing Department Numbers for Contact Persons'  "#EC NOTEXT
      i_length     = '92',

      i_id         = 'I'
      i_key        = 'T14'
      i_text       = 'Missing Funtions for Contact Persons'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = 'T15'
      i_text       = 'Missing Authority of Contact Persons'  "#EC NOTEXT
      i_length     = '72',

      i_id         = 'I'
      i_key        = 'T16'
      i_text       = 'Missing VIP Indicator for Contact Person'  "#EC NOTEXT
      i_length     = '80',

      i_id         = 'I'
      i_key        = 'T17'
      i_text       = 'Missing Marital Status'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = 'T18'
      i_text       = 'Missing Legal Status to Legal Form'  "#EC NOTEXT
      i_length     = '68',

      i_id         = 'I'
      i_key        = 'T19'
      i_text       = 'Missing Payment Cards'  "#EC NOTEXT
      i_length     = '42',

      i_id         = 'I'
      i_key        = 'T20'
      i_text       = 'Mapping: Customer Account Group -> BP Role'  "#EC NOTEXT
      i_length     = '82',

      i_id         = 'I'
      i_key        = 'T21'
      i_text       = 'Mapping: Customer Account Group -> BP Grouping'  "#EC NOTEXT
      i_length     = '92',

      i_id         = 'I'
      i_key        = 'T22'
      i_text       = 'Mapping: Vendor Account Group -> BP Role'  "#EC NOTEXT
      i_length     = '84',

      i_id         = 'I'
      i_key        = 'T23'
      i_text       = 'Mapping: Vendor Account Group -> BP Grouping'  "#EC NOTEXT
      i_length     = '92',

      i_id         = 'I'
      i_key        = 'T27'
      i_text       = 'Choose Industry System'  "#EC NOTEXT
      i_length     = '44',

      i_id         = 'I'
      i_key        = 'T28'
      i_text       = 'Missing Industry Keys'  "#EC NOTEXT
      i_length     = '42',

      i_id         = 'I'
      i_key        = 'T29'
      i_text       = 'Missing Legal Form to Legal Status'  "#EC NOTEXT
      i_length     = '68',

      i_id         = 'R'
      i_key        = ''
      i_text       = 'Report CVI_CUSTOMIZING_RESOLVE'  "#EC NOTEXT
      i_length     = '30'.

ENDFORM.

FORM update_03. " CUAD CVI_CUSTOMIZING_RESOLVE ( EN , source: E18 )
 DATA:  ls_adm TYPE rsmpe_adm,
        lt_sta TYPE TABLE OF rsmpe_stat, ls_sta type rsmpe_stat,
        lt_fun TYPE TABLE OF rsmpe_funt, ls_fun type rsmpe_funt,
        lt_men TYPE TABLE OF rsmpe_men,  ls_men type rsmpe_men,
        lt_mtx TYPE TABLE OF rsmpe_mnlt, ls_mtx type rsmpe_mnlt,
        lt_act TYPE TABLE OF rsmpe_act,  ls_act type rsmpe_act,
        lt_but TYPE TABLE OF rsmpe_but,  ls_but type rsmpe_but,
        lt_pfk TYPE TABLE OF rsmpe_pfk,  ls_pfk type rsmpe_pfk,
        lt_set TYPE TABLE OF rsmpe_staf, ls_set type rsmpe_staf,
        lt_doc TYPE TABLE OF rsmpe_atrt, ls_doc type rsmpe_atrt,
        lt_tit TYPE TABLE OF rsmpe_titt, ls_tit type rsmpe_titt,
        lt_biv TYPE TABLE OF rsmpe_buts, ls_biv type rsmpe_buts.

  ls_adm-actcode                 = '000001'.
  ls_adm-pfkcode                 = '000001'.
  CLEAR ls_pfk.
  ls_pfk-code                    = '000001'.
  ls_pfk-pfno                    = '03'.
  ls_pfk-funcode                 = 'BACK'.
  ls_pfk-funno                   = '001'.
  APPEND ls_pfk TO lt_pfk.

  CLEAR ls_pfk.
  ls_pfk-code                    = '000001'.
  ls_pfk-pfno                    = '12'.
  ls_pfk-funcode                 = 'CANC'.
  ls_pfk-funno                   = '001'.
  APPEND ls_pfk TO lt_pfk.

  CLEAR ls_pfk.
  ls_pfk-code                    = '000001'.
  ls_pfk-pfno                    = '15'.
  ls_pfk-funcode                 = 'EXIT'.
  ls_pfk-funno                   = '001'.
  APPEND ls_pfk TO lt_pfk.

  CLEAR ls_set.
  ls_set-status                  = 'PF_STATUS_100'.
  ls_set-function                = 'BACK'.
  APPEND ls_set TO lt_set.

  CLEAR ls_set.
  ls_set-status                  = 'PF_STATUS_100'.
  ls_set-function                = 'CANC'.
  APPEND ls_set TO lt_set.

  CLEAR ls_set.
  ls_set-status                  = 'PF_STATUS_100'.
  ls_set-function                = 'EXIT'.
  APPEND ls_set TO lt_set.

  CLEAR ls_set.
  ls_set-status                  = 'PF_STATUS_100'.
  ls_set-function                = 'SAVE'.
  APPEND ls_set TO lt_set.

  CLEAR ls_sta.
  ls_sta-code                    = 'PF_STATUS_100'.
  ls_sta-modal                   = 'D'.
  ls_sta-actcode                 = '000001'.
  ls_sta-pfkcode                 = '000001'.
  ls_sta-butcode                 = '0001'.
  ls_sta-int_note                = 'PF status for screen 100'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_sta TO lt_sta.

  CLEAR ls_fun.
  ls_fun-code                    = 'BACK'.
  ls_fun-textno                  = '001'.
  ls_fun-text_type               = 'S'.
  ls_fun-fun_text                = 'Back'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_fun TO lt_fun.

  CLEAR ls_fun.
  ls_fun-code                    = 'CANC'.
  ls_fun-textno                  = '001'.
  ls_fun-text_type               = 'S'.
  ls_fun-text_name               = 'ICON_CANCEL'.
  ls_fun-icon_id                 = '@0W@'.
  ls_fun-fun_text                = 'Cancel'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_fun TO lt_fun.

  CLEAR ls_fun.
  ls_fun-code                    = 'EXIT'.
  ls_fun-textno                  = '001'.
  ls_fun-text_type               = 'S'.
  ls_fun-fun_text                = 'Exit'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_fun TO lt_fun.

  CLEAR ls_fun.
  ls_fun-code                    = 'SAVE'.
  ls_fun-textno                  = '001'.
  ls_fun-text_type               = 'S'.
  ls_fun-text_name               = 'ICON_SYSTEM_SAVE'.
  ls_fun-icon_id                 = '@2L@'.
  ls_fun-fun_text                = 'Save'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_fun TO lt_fun.

  CLEAR ls_doc.
  ls_doc-obj_type                = 'A'.
  ls_doc-obj_code                = '000001'.
  ls_doc-modal                   = 'D'.
  ls_doc-int_note                = 'PF status for screen 100'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_doc TO lt_doc.

  CLEAR ls_doc.
  ls_doc-obj_type                = 'B'.
  ls_doc-obj_code                = '000001'.
  ls_doc-sub_code                = '0001'.
  ls_doc-modal                   = 'D'.
  ls_doc-int_note                = 'PF status for screen 100'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_doc TO lt_doc.

  CLEAR ls_doc.
  ls_doc-obj_type                = 'P'.
  ls_doc-obj_code                = '000001'.
  ls_doc-modal                   = 'D'.
  ls_doc-int_note                = 'PF status for screen 100'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_doc TO lt_doc.

  CLEAR ls_tit.
  ls_tit-code                    = 'CVI_CUST_RESOLVE'.
  ls_tit-text                    = 'CVI Customizing Checks for Synchronization'. "#EC NOTEXT "#EC TRANSLANG
  APPEND ls_tit TO lt_tit.

  CALL METHOD lcl_wb=>create_user_interface     "#EC *
    EXPORTING
      i_progname   = 'CVI_CUSTOMIZING_RESOLVE'
      i_devclass   = 'CVI_TOOLS_SUPPORTABILITY'
      i_masterlang = 'E'
      i_langu      = 'E'
      is_adm       = ls_adm
      it_sta       = lt_sta
      it_men       = lt_men
      it_act       = lt_act
      it_but       = lt_but
      it_pfk       = lt_pfk
      it_biv       = lt_biv
      it_set       = lt_set
      it_fun       = lt_fun
      it_mtx       = lt_mtx
      it_doc       = lt_doc
      it_tit       = lt_tit.

ENDFORM.

FORM update_04. " DOCU RECVI_CUSTOMIZING_RESOLVE ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_TOOLS_SUPPORTABILITY'
      i_docname   = 'RECVI_CUSTOMIZING_RESOLVE'
      i_langu     = 'E'
      i_line      =:'U1 &PURPOSE&',                                                                                "#EC NOTEXT
                    'AS You can use this program to perform the necessary checks per client. It',                  "#EC NOTEXT
                    '   also provides Customizing resolution program, where you can find out',                     "#EC NOTEXT
                    '   missing customizing entries and the solution to create/correct these',                     "#EC NOTEXT
                    '   entries for each client.',                                                                 "#EC NOTEXT
                    'U1 &INTEGRATION&',                                                                            "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'U1 &PREREQUISITES&',                                                                          "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'U1 &FEATURES&',                                                                               "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'U2 &SELECTION&',                                                                              "#EC NOTEXT
                    'AS Choose the required check and execute.',                                                   "#EC NOTEXT
                    'U2 &STANDARD_VARIANTS&',                                                                      "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'U2 &OUTPUT&',                                                                                 "#EC NOTEXT
                    'AS The program generates an output containing the status of each check that',                 "#EC NOTEXT
                    '   it performs. If the status is green, this indicates that check is',                        "#EC NOTEXT
                    '   successful. If the status is red, you must follow the steps mentioned in',                 "#EC NOTEXT
                    '   this document to resolve the errors.',                                                     "#EC NOTEXT
                    'U1 &ACTIVITIES&',                                                                             "#EC NOTEXT
                    'AS Run each check to view its message logs.',                                                 "#EC NOTEXT
                    'U2 General Settings',                                                                         "#EC NOTEXT
                    'N1 In this section, you can find the missing customizing entries, and',                       "#EC NOTEXT
                    '   inconsistencies for the following areas:',                                                 "#EC NOTEXT
                    'B2 <LS>Synchronization Direction</>',                                                         "#EC NOTEXT
                    'B2 <LS>Connection to PPO</>',                                                                 "#EC NOTEXT
                    'B2 <LS>Registered Function Modules</>',                                                       "#EC NOTEXT
                    'B2 <LS>Tax Classification</>',                                                                "#EC NOTEXT
                    'B2 <LS>Address Number Range Validity Check</>',                                               "#EC NOTEXT
                    'B2 <LS>Select Industry System</>',                                                            "#EC NOTEXT
                    'N1 Choose <LS>Customizing </>button to navigate to the relevant Customizing',                 "#EC NOTEXT
                    '   activity and add missing data.',                                                           "#EC NOTEXT
                    'N1 For <LS>Tax Classification </>errors might occur due to entries that are',                 "#EC NOTEXT
                    '   missing in Customizing tables (but present in Customer/Vendor master',                     "#EC NOTEXT
                    '   tables). To solve this inconsistency, choose <LS>Display <-> Change',                      "#EC NOTEXT
                    '   </>button to enter required data and <LS>Save</> your changes.',                           "#EC NOTEXT
                    'N1 For <LS>Select Industry Sys</>tem, you can choose Standard Industry',                      "#EC NOTEXT
                    '   indicator using the <LS>Display <-> Change</> button.',                                    "#EC NOTEXT
                    'U2 Customer -> BP Checks',                                                                    "#EC NOTEXT
                    'AS The system checks for missing entries in the direction from Customer to',                  "#EC NOTEXT
                    '   Business Partner.',                                                                        "#EC NOTEXT
                    'N1 In this section, you can find missing customizing entries and',                            "#EC NOTEXT
                    '   inconsistencies for the following areas:',                                                 "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Roles</>',                                                "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Groupings</>',                                            "#EC NOTEXT
                    'B2 <LS>Customer Account Group -> Role</>',                                                    "#EC NOTEXT
                    'B2 <LS>Customer Account Group -> Grouping</>',                                                "#EC NOTEXT
                    'B2 <LS>Missing Legal Status to Legal Form</>',                                                "#EC NOTEXT
                    'B2 <LS>Missing Payment Cards</>',                                                             "#EC NOTEXT
                    'B2 <LS>Missing Industry Keys - Incoming</>',                                                  "#EC NOTEXT
                    'N1 Click <LS>Customizing </>button to navigate to the relevant Customizing',                  "#EC NOTEXT
                    '   activity and add missing data.',                                                           "#EC NOTEXT
                    'N1 To correct inconsistencies, choose <LS>Display <-> Change </>button to',                   "#EC NOTEXT
                    '   enter required data and <LS>Save</> your changes.',                                        "#EC NOTEXT
                    'U3 Contact Person',                                                                           "#EC NOTEXT
                    'N1 You receive the error logs if you have not maintained the mapping of',                     "#EC NOTEXT
                    '   different attributes between customer and Business Partner. You must',                     "#EC NOTEXT
                    '   perform value mapping from the dropdown provided for each of the',                         "#EC NOTEXT
                    '   following sections:',                                                                      "#EC NOTEXT
                    'B2 <LS>Missing Activation</>',                                                                "#EC NOTEXT
                    'B2 <LS>Missing Department Numbers</>',                                                        "#EC NOTEXT
                    'B2 <LS>Missing Functions</>',                                                                 "#EC NOTEXT
                    'B2 <LS>Missing Authority</>',                                                                 "#EC NOTEXT
                    'B2 <LS>Missing VIP Indicator</>',                                                             "#EC NOTEXT
                    'B2 <LS>Missing Marital Status</>',                                                            "#EC NOTEXT
                    'N1  Save your changes.',                                                                      "#EC NOTEXT
                    'U2 Vendor -> BP Checks',                                                                      "#EC NOTEXT
                    'AS The system checks for missing entries in the direction from Vendor to',                    "#EC NOTEXT
                    '   Business Partner.',                                                                        "#EC NOTEXT
                    'N1 In this section, you can find missing customizing entries and',                            "#EC NOTEXT
                    '   inconsistencies for the following areas:',                                                 "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Roles</>',                                                "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Groupings</>',                                            "#EC NOTEXT
                    'B2 <LS>Vendor Account Group -> Role</>',                                                      "#EC NOTEXT
                    'B2 <LS>Vendor Account Group -> Grouping</>',                                                  "#EC NOTEXT
                    'B2 <LS>Missing Industry Keys - Incoming</>',                                                  "#EC NOTEXT
                    'N1 Click <LS>Customizing </>button to navigate to the relevant Customizing',                  "#EC NOTEXT
                    '   activity and add missing data.',                                                           "#EC NOTEXT
                    'N1 To correct inconsistencies, choose <LS>Display <->Change </>button to',                    "#EC NOTEXT
                    '   enter required data and <LS>Save</> your changes.',                                        "#EC NOTEXT
                    'U2 BP -> Customer Checks',                                                                    "#EC NOTEXT
                    'AS The system checks for missing entries in the direction from Business',                     "#EC NOTEXT
                    '   Partner to Customer.',                                                                     "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Roles</>',                                                "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Groupings</>',                                            "#EC NOTEXT
                    'B2 <LS>Missing Legal Status to Legal Form</>',                                                "#EC NOTEXT
                    'B2 <LS>Missing Payment Cards</>',                                                             "#EC NOTEXT
                    'B2 <LS>Missing Industry Keys - Outgoing</>',                                                  "#EC NOTEXT
                    'AS Contact Person',                                                                           "#EC NOTEXT
                    'N1 You receive the error logs if you have not maintained the mapping of',                     "#EC NOTEXT
                    '   different attributes between customer and Business Partner. You must',                     "#EC NOTEXT
                    '   perform value mapping from the dropdown provided for each of the',                         "#EC NOTEXT
                    '   following sections:',                                                                      "#EC NOTEXT
                    'B2 <LS>Missing Department Numbers</>',                                                        "#EC NOTEXT
                    'B2 <LS>Missing Functions</>',                                                                 "#EC NOTEXT
                    'B2 <LS>Missing Authority</>',                                                                 "#EC NOTEXT
                    'B2 <LS>Missing VIP Indicator</>',                                                             "#EC NOTEXT
                    'B2 <LS>Missing Marital Status</>',                                                            "#EC NOTEXT
                    'N1 Save your changes.',                                                                       "#EC NOTEXT
                    'U2 BP -> Vendor Checks',                                                                      "#EC NOTEXT
                    'AS The system checks for missing entries in the direction from Business',                     "#EC NOTEXT
                    '   Partner to Vendor.',                                                                       "#EC NOTEXT
                    'N1 In this section, you can find missing customizing entries and',                            "#EC NOTEXT
                    '   inconsistencies for the following areas:',                                                 "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Roles</>',                                                "#EC NOTEXT
                    'B2 <LS>Setting for Business Partner Groupings</>',                                            "#EC NOTEXT
                    'B2 <LS>Missing Industry Keys - Outgoing</>',                                                  "#EC NOTEXT
                    'N1 Click <LS>Customizing </>button to navigate to the relevant Customizing',                  "#EC NOTEXT
                    '   activity and add missing data.',                                                           "#EC NOTEXT
                    'N1 To correct inconsistencies, choose <LS>Display <->Change </>button to',                    "#EC NOTEXT
                    '   enter required data and <LS>Save</> your changes.',                                        "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'U1 &EXAMPLE&',                                                                                "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    space.
ENDFORM.

FORM update_05. " MSAG CVI_CUST_RESOLVE ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message_class     "#EC *
    EXPORTING
      i_devclass   = 'CVI_TOOLS_SUPPORTABILITY'
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_text       = 'Message class for CVI_CUSTOMIZING_RESOLVE report'
      i_masterlang = 'E'
      i_langu      = 'E'.

ENDFORM.

FORM update_06. " MESS CVI_CUST_RESOLVE000 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '000'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = ''.

ENDFORM.

FORM update_07. " MESS CVI_CUST_RESOLVE001 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '001'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "BP -> customer" activated, no roles are assigned'.

ENDFORM.

FORM update_08. " MESS CVI_CUST_RESOLVE002 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '002'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "BP -> customer" activated, no numbers are assigned'.

ENDFORM.

FORM update_09. " MESS CVI_CUST_RESOLVE003 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '003'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "customer -> BP" activated, no roles are assigned'.

ENDFORM.

FORM update_10. " MESS CVI_CUST_RESOLVE004 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '004'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "customer -> BP" activated, no numbers are assigned'.

ENDFORM.

FORM update_11. " MESS CVI_CUST_RESOLVE005 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '005'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "BP -> vendor" activated, no roles are assigned'.

ENDFORM.

FORM update_12. " MESS CVI_CUST_RESOLVE006 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '006'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "BP -> vendor" activated, no numbers are assigned'.

ENDFORM.

FORM update_13. " MESS CVI_CUST_RESOLVE007 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '007'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "vendor -> BP" activated, no roles are assigned'.

ENDFORM.

FORM update_14. " MESS CVI_CUST_RESOLVE008 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '008'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although direction "vendor -> BP" activated, no numbers are assigned'.

ENDFORM.

FORM update_15. " MESS CVI_CUST_RESOLVE009 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '009'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Although PPO has been deactivated there are active business processes'.

ENDFORM.

FORM update_16. " MESS CVI_CUST_RESOLVE010 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '010'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Process & activated; the relevant synch. direction has been deactivated'.

ENDFORM.

FORM update_17. " MESS CVI_CUST_RESOLVE011 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '011'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Function module & has not been activated'.

ENDFORM.

FORM update_18. " MESS CVI_CUST_RESOLVE012 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '012'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Roles assigned; direction "BP -> customer" not activated'.

ENDFORM.

FORM update_19. " MESS CVI_CUST_RESOLVE013 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '013'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Numbers assigned; direction "BP -> customer" not activated'.

ENDFORM.

FORM update_20. " MESS CVI_CUST_RESOLVE014 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '014'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Roles assigned; direction "customer -> BP" not activated'.

ENDFORM.

FORM update_21. " MESS CVI_CUST_RESOLVE015 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '015'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Numbers assigned; direction "customer -> BP" not activated'.

ENDFORM.

FORM update_22. " MESS CVI_CUST_RESOLVE016 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '016'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '&: role & does not exist'.

ENDFORM.

FORM update_23. " MESS CVI_CUST_RESOLVE017 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '017'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '&: account group & does not exist'.

ENDFORM.

FORM update_24. " MESS CVI_CUST_RESOLVE018 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '018'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Number range & (&) does not exist'.

ENDFORM.

FORM update_25. " MESS CVI_CUST_RESOLVE019 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '019'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'BP -> customer: customer roles exist but numbers have not been assigned'.

ENDFORM.

FORM update_26. " MESS CVI_CUST_RESOLVE020 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '020'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Customer -> BP: You have not assigned a BP grouping to account group &'.

ENDFORM.

FORM update_27. " MESS CVI_CUST_RESOLVE021 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '021'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Customer -> BP: You have not assigned a BP role to account group &'.

ENDFORM.

FORM update_28. " MESS CVI_CUST_RESOLVE022 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '022'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Customer -> BP: Numbers assigned externally with "Same Numbers" only'.

ENDFORM.

FORM update_29. " MESS CVI_CUST_RESOLVE023 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '023'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Number ranges & and & do not match'.

ENDFORM.

FORM update_30. " MESS CVI_CUST_RESOLVE024 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '024'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Roles assigned; direction "BP -> vendor" not activated'.

ENDFORM.

FORM update_31. " MESS CVI_CUST_RESOLVE025 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '025'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Numbers assigned; direction "BP -> vendor" not activated'.

ENDFORM.

FORM update_32. " MESS CVI_CUST_RESOLVE026 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '026'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Roles assigned; direction "vendor -> BP" not activated'.

ENDFORM.

FORM update_33. " MESS CVI_CUST_RESOLVE027 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '027'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Numbers assigned; direction "vendor -> BP" not activated'.

ENDFORM.

FORM update_34. " MESS CVI_CUST_RESOLVE028 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '028'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'BP -> vendor: vendor roles exist but numbers have not been assigned'.

ENDFORM.

FORM update_35. " MESS CVI_CUST_RESOLVE029 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '029'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Vendor -> BP: You have not assigned a BP grouping to account group &'.

ENDFORM.

FORM update_36. " MESS CVI_CUST_RESOLVE030 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '030'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Vendor -> BP: You have not assigned a BP role to account group &'.

ENDFORM.

FORM update_37. " MESS CVI_CUST_RESOLVE031 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '031'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Vendor -> BP: Numbers assigned externally with "Same Numbers" only'.

ENDFORM.

FORM update_38. " MESS CVI_CUST_RESOLVE032 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '032'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'No Customizing errors'.

ENDFORM.

FORM update_39. " MESS CVI_CUST_RESOLVE033 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '033'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for business partner grouping &'.

ENDFORM.

FORM update_40. " MESS CVI_CUST_RESOLVE034 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '034'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '&: Business partner grouping & does not exist'.

ENDFORM.

FORM update_41. " MESS CVI_CUST_RESOLVE035 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '035'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for account group &'.

ENDFORM.

FORM update_42. " MESS CVI_CUST_RESOLVE036 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '036'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for business partner role &'.

ENDFORM.

FORM update_43. " MESS CVI_CUST_RESOLVE037 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '037'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '&: Enter a description for business partner role &'.

ENDFORM.

FORM update_44. " MESS CVI_CUST_RESOLVE038 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '038'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& &'.

ENDFORM.

FORM update_45. " MESS CVI_CUST_RESOLVE039 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '039'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'View & is locked by &'.

ENDFORM.

FORM update_46. " MESS CVI_CUST_RESOLVE040 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '040'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Operation cancelled ! Technical error'.

ENDFORM.

FORM update_47. " MESS CVI_CUST_RESOLVE041 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '041'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for legal status &'.

ENDFORM.

FORM update_48. " MESS CVI_CUST_RESOLVE042 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '042'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'You have not assigned BP legal form to legal status &'.

ENDFORM.

FORM update_49. " MESS CVI_CUST_RESOLVE043 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '043'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'You have not assigned BP payment card to payment card &'.

ENDFORM.

FORM update_50. " MESS CVI_CUST_RESOLVE044 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '044'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for payment card &'.

ENDFORM.

FORM update_51. " MESS CVI_CUST_RESOLVE045 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '045'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for industry system &'.

ENDFORM.

FORM update_52. " MESS CVI_CUST_RESOLVE046 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '046'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for department number &'.

ENDFORM.

FORM update_53. " MESS CVI_CUST_RESOLVE047 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '047'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for funtion &'.

ENDFORM.

FORM update_54. " MESS CVI_CUST_RESOLVE048 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '048'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for authority &'.

ENDFORM.

FORM update_55. " MESS CVI_CUST_RESOLVE049 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '049'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for VIP indicator &'.

ENDFORM.

FORM update_56. " MESS CVI_CUST_RESOLVE050 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '050'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for marital status &'.

ENDFORM.

FORM update_57. " MESS CVI_CUST_RESOLVE051 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '051'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Department assignment for contact person is inconsistent'.

ENDFORM.

FORM update_58. " MESS CVI_CUST_RESOLVE052 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '052'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Function assignment for contact person is inconsistent'.

ENDFORM.

FORM update_59. " MESS CVI_CUST_RESOLVE053 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '053'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Authority assignment for contact person is inconsistent'.

ENDFORM.

FORM update_60. " MESS CVI_CUST_RESOLVE054 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '054'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'VIP Indicator assignment for contact person is inconsistent'.

ENDFORM.

FORM update_61. " MESS CVI_CUST_RESOLVE055 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '055'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Marital status assignment for contact person is inconsistent'.

ENDFORM.

FORM update_62. " MESS CVI_CUST_RESOLVE056 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '056'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for industry key &'.

ENDFORM.

FORM update_63. " MESS CVI_CUST_RESOLVE057 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '057'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Industry key assignment is inconsistent'.

ENDFORM.

FORM update_64. " MESS CVI_CUST_RESOLVE058 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '058'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Legal Form assignment is inconsistent'.

ENDFORM.

FORM update_65. " MESS CVI_CUST_RESOLVE059 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '059'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Payment card assignment is inconsistent'.

ENDFORM.

FORM update_66. " MESS CVI_CUST_RESOLVE060 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '060'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Enter a description for legal form &'.

ENDFORM.

FORM update_67. " MESS CVI_CUST_RESOLVE061 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '061'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Account group & has been deleted from table T077D'.

ENDFORM.

FORM update_68. " MESS CVI_CUST_RESOLVE062 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '062'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Account group & has been deleted from table T077K'.

ENDFORM.

FORM update_69. " MESS CVI_CUST_RESOLVE063 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '063'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Account group & does not exist in table T077D'.

ENDFORM.

FORM update_70. " MESS CVI_CUST_RESOLVE064 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '064'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Account group & and BP group & doesn''t have same number range'.

ENDFORM.

FORM update_71. " MESS CVI_CUST_RESOLVE065 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '065'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Department & has been deleted from table TSAB'.

ENDFORM.

FORM update_72. " MESS CVI_CUST_RESOLVE066 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '066'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Function & has been deleted from table TPFK'.

ENDFORM.

FORM update_73. " MESS CVI_CUST_RESOLVE067 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '067'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Authority & has been deleted from table TVPV'.

ENDFORM.

FORM update_74. " MESS CVI_CUST_RESOLVE068 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '068'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'VIP Indicator & has been deleted from table TVIP'.

ENDFORM.

FORM update_75. " MESS CVI_CUST_RESOLVE069 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '069'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Legal Status & has been deleted from table TVGF'.

ENDFORM.

FORM update_76. " MESS CVI_CUST_RESOLVE070 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '070'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Payment Card & has been deleted from table TVCIN'.

ENDFORM.

FORM update_77. " MESS CVI_CUST_RESOLVE071 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '071'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Department & does not exist in table TSAB'.

ENDFORM.

FORM update_78. " MESS CVI_CUST_RESOLVE072 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '072'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Function & does not exist in table TPFK'.

ENDFORM.

FORM update_79. " MESS CVI_CUST_RESOLVE073 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '073'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Authority & does not exist in table TVPV'.

ENDFORM.

FORM update_80. " MESS CVI_CUST_RESOLVE074 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '074'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& VIP Indicator & does not exist in table TVIP'.

ENDFORM.

FORM update_81. " MESS CVI_CUST_RESOLVE075 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '075'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Marital status & does not exist in table T502T'.

ENDFORM.

FORM update_82. " MESS CVI_CUST_RESOLVE076 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '076'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Legal Status & does not exist in table TVGF'.

ENDFORM.

FORM update_83. " MESS CVI_CUST_RESOLVE077 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '077'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Payment Card & does not exist in table TVCIN'.

ENDFORM.

FORM update_84. " MESS CVI_CUST_RESOLVE078 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '078'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Account group & does not exist in table T077K'.

ENDFORM.

FORM update_85. " MESS CVI_CUST_RESOLVE079 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '079'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = 'Industry key & has been deleted from table T016'.

ENDFORM.

FORM update_86. " MESS CVI_CUST_RESOLVE080 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '080'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Industry key & not saved, Industry key(BP) is mandatory field'.

ENDFORM.

FORM update_87. " MESS CVI_CUST_RESOLVE081 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '081'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Industry key & not saved, Industry sector is mandatory field'.

ENDFORM.

FORM update_88. " MESS CVI_CUST_RESOLVE082 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '082'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Account group & - grouping & is only permitted with same number'.

ENDFORM.

FORM update_89. " MESS CVI_CUST_RESOLVE083 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '083'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& Account group & - grouping & is not permitted with same number'.

ENDFORM.

FORM update_90. " MESS CVI_CUST_RESOLVE084 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_message     "#EC *
    EXPORTING
      i_msgid      = 'CVI_CUST_RESOLVE'
      i_msgno      = '084'
      i_auth_check = '':
      i_masterlang = 'E'
      i_langu      = 'E'
      i_selfdef    = '3'"deletes longtext (DOCU) if neccessary
      i_text       = '& & is a key field. Value & is used more than once.'.

ENDFORM.

FORM update_91. " TRAN BP_CVI_IMG_CHK ( EN , source: E18 )

  CALL METHOD lcl_wb=>create_logical_object "#EC *
    EXPORTING
      i_object     = 'TRAN'
      i_obj_name   = 'BP_CVI_IMG_CHK'
      i_devclass   = 'CVI_TOOLS_SUPPORTABILITY'
      i_langu      = 'E'
      i_masterlang = 'E'
    EXCEPTIONS
      OTHERS     = 1.
  IF sy-subrc NE 0 OR testrun NE space. RETURN. ENDIF.

  DATA: ls_tstc TYPE tstc, lt_tstc TYPE TABLE OF tstc.

  CLEAR ls_TSTC.
  ls_tstc-tcode     = 'BP_CVI_IMG_CHK'.                                                             "#EC NOTEXT
  ls_tstc-pgmna     = 'CVI_CUSTOMIZING_RESOLVE'.                                                    "#EC NOTEXT
  ls_tstc-dypno     = '0100'.                                                                       "#EC NOTEXT
  APPEND ls_TSTC TO lt_TSTC.

  CALL METHOD lcl_wb=>create_table_entries "#EC *
    EXPORTING
      i_logical_object = 'TRAN'
      i_tabname  = 'TSTC'
      it_entries = lt_tstc.

  DATA: ls_tstcc TYPE tstcc, lt_tstcc TYPE TABLE OF tstcc.

  CLEAR ls_TSTCC.
  ls_tstcc-tcode         = 'BP_CVI_IMG_CHK'.                                                        "#EC NOTEXT
  ls_tstcc-s_webgui      = '1'.                                                                     "#EC NOTEXT
  ls_tstcc-s_win32       = 'X'.                                                                     "#EC NOTEXT
  ls_tstcc-s_platin      = 'X'.                                                                     "#EC NOTEXT
  APPEND ls_TSTCC TO lt_TSTCC.

  CALL METHOD lcl_wb=>create_table_entries "#EC *
    EXPORTING
      i_logical_object = 'TRAN'
      i_tabname  = 'TSTCC'
      it_entries = lt_tstcc.

  DATA: ls_usobx TYPE usobx, lt_usobx TYPE TABLE OF usobx.

  CLEAR ls_USOBX.
  ls_usobx-name         = 'BP_CVI_IMG_CHK'.                                                         "#EC NOTEXT
  ls_usobx-type         = 'TR'.                                                                     "#EC NOTEXT
  ls_usobx-object       = 'S_DOKU_AUT'.                                                             "#EC NOTEXT
  ls_usobx-okflag       = 'X'.                                                                      "#EC NOTEXT
  APPEND ls_USOBX TO lt_USOBX.

  CLEAR ls_USOBX.
  ls_usobx-name         = 'BP_CVI_IMG_CHK'.                                                         "#EC NOTEXT
  ls_usobx-type         = 'TR'.                                                                     "#EC NOTEXT
  ls_usobx-object       = 'S_GUI'.                                                                  "#EC NOTEXT
  ls_usobx-okflag       = 'X'.                                                                      "#EC NOTEXT
  APPEND ls_USOBX TO lt_USOBX.

  CLEAR ls_USOBX.
  ls_usobx-name         = 'BP_CVI_IMG_CHK'.                                                         "#EC NOTEXT
  ls_usobx-type         = 'TR'.                                                                     "#EC NOTEXT
  ls_usobx-object       = 'S_TABU_NAM'.                                                             "#EC NOTEXT
  ls_usobx-okflag       = 'U'.                                                                      "#EC NOTEXT
  APPEND ls_USOBX TO lt_USOBX.

  CLEAR ls_USOBX.
  ls_usobx-name         = 'BP_CVI_IMG_CHK'.                                                         "#EC NOTEXT
  ls_usobx-type         = 'TR'.                                                                     "#EC NOTEXT
  ls_usobx-object       = 'S_TCODE'.                                                                "#EC NOTEXT
  ls_usobx-okflag       = 'X'.                                                                      "#EC NOTEXT
  APPEND ls_USOBX TO lt_USOBX.

  CALL METHOD lcl_wb=>create_table_entries "#EC *
    EXPORTING
      i_logical_object = 'TRAN'
      i_tabname  = 'USOBX'
      it_entries = lt_usobx.

  DATA: ls_usob_sm TYPE usob_sm, lt_usob_sm TYPE TABLE OF usob_sm.

  CLEAR ls_USOB_SM.
  ls_usob_sm-name           = 'BP_CVI_IMG_CHK'.                                                     "#EC NOTEXT
  ls_usob_sm-type           = 'TR'.                                                                 "#EC NOTEXT
  APPEND ls_USOB_SM TO lt_USOB_SM.

  CALL METHOD lcl_wb=>create_table_entries "#EC *
    EXPORTING
      i_logical_object = 'TRAN'
      i_tabname  = 'USOB_SM'
      it_entries = lt_usob_sm.

  DATA: ls_tstct TYPE tstct, lt_tstct TYPE TABLE OF tstct.

  CLEAR ls_TSTCT.
  ls_tstct-sprsl     = 'E'.                                                                         "#EC NOTEXT
  ls_tstct-tcode     = 'BP_CVI_IMG_CHK'.                                                            "#EC NOTEXT
  ls_tstct-ttext     = 'CVI Customizing - Check Report'.                                            "#EC NOTEXT
  APPEND ls_TSTCT TO lt_TSTCT.

  CALL METHOD lcl_wb=>create_table_entries "#EC *
    EXPORTING
      i_logical_object = 'TRAN'
      i_tabname  = 'TSTCT'
      it_entries = lt_tstct.


ENDFORM.

FORM update_92. " DOCU TXCVI_CUS_INC_DATA ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_CUS_INC_DATA'
      i_langu     = 'E'
      i_line      =:'U1 Inconsistent Data',                                                                        "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*  You have not maintained consistent data in the Tax, Industry/Location,',                   "#EC NOTEXT
                    '   and Bank fields. Perform the following steps:',                                            "#EC NOTEXT
                    'N1 If there is an entry in the <LS>Inconsistent Tax Data </>table,',                          "#EC NOTEXT
                    '   maintainconsistent data in the following fields of corresponding',                         "#EC NOTEXT
                    '   customer table and the linked supplier table:',                                            "#EC NOTEXT
                    'B2 <LS>STCD1 - Tax Number 1 </>',                                                             "#EC NOTEXT
                    'B2 <LS>STCD2 - Tax Number 2</>',                                                              "#EC NOTEXT
                    'B2 <LS>STKZU - Liable for VAT</>',                                                            "#EC NOTEXT
                    'B2 <LS>STCEG - VAT Registration Number</>',                                                   "#EC NOTEXT
                    'N1 If there is an entry in the <LS>Inconsistent Industry/Location Data',                      "#EC NOTEXT
                    '   </>table, maintain consistent data in the following fields of',                            "#EC NOTEXT
                    '   corresponding customer table and the linked supplier table:',                              "#EC NOTEXT
                    'B2 <LS>BBBNR - International Location Number (part 1)</>',                                    "#EC NOTEXT
                    'B2 <LS>BBSNR - International Location Number (part 2)</>',                                    "#EC NOTEXT
                    'B2 <LS>BUBKZ - Check Digit for the International Location Number</>',                         "#EC NOTEXT
                    '   <LS>BRSCH - Industry Key </>',                                                             "#EC NOTEXT
                    'B2 <LS>VBUND - Company ID</>',                                                                "#EC NOTEXT
                    'N1 If there is an entry in the <LS>Inconsistent Bank Data </>table,',                         "#EC NOTEXT
                    '   maintain consistent data in the following fields of corresponding',                        "#EC NOTEXT
                    '   customer table and the linked supplier table.',                                            "#EC NOTEXT
                    'B2 <LS>BANKS - Bank Country Key</>',                                                          "#EC NOTEXT
                    'B2 <LS>BANKL - Bank Number</>',                                                               "#EC NOTEXT
                    'B2 <LS>BANKN - Bank Account Number</>',                                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_93. " DOCU TXCVI_FS_C_C_ADRNR ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_ADRNR'
      i_langu     = 'E'
      i_line      =:'U1 Display Settings for ADRNR',                                                               "#EC NOTEXT
                    'AS The address number range is exhausted or about to get exhausted. Select',                  "#EC NOTEXT
                    '   the error message to open the <LS>Range Maintenance: Address Management',                  "#EC NOTEXT
                    '   </>screen and then manually set the number range.',                                        "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_94. " DOCU TXCVI_FS_C_C_BP_TO_CUSTOMER ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_BP_TO_CUSTOMER'
      i_langu     = 'D'
      i_line      =:'U2 Synchronisation vom Geschäftspartner zum Debitor',                                         "#EC NOTEXT
                    '*  Neben den allgemeinen Einstellungen zur Debitoren-/Kreditorenintegration',                 "#EC NOTEXT
                    '   müssen für eine Synchronisation vom Geschäftspartner zum Debitor an zwei',                 "#EC NOTEXT
                    '   weiteren Stellen im Customizing der CVI Einträge vorhanden sein.',                         "#EC NOTEXT
                    '*  Im Customizing',                                                                           "#EC NOTEXT
                    '=   <DS:SIMG.V_TBD002>GP-Rollentyp für Richtung GP nach Debitor einstellen',                  "#EC NOTEXT
                    '=  </> werden die Geschäftspartner Rollen definiert, bei deren Anlage',                       "#EC NOTEXT
                    '   automatisch ein Debitor erzeugt werden soll.',                                             "#EC NOTEXT
                    '*  Außerdem muss im Customizing',                                                             "#EC NOTEXT
                    '=   <DS:SIMG.V_TBD001>Nummernvergabe für Richtung GP nach Debitor festlegen',                 "#EC NOTEXT
                    '=  </> die Zuordnung einer debitorischen Kontengruppe zu einer',                              "#EC NOTEXT
                    '   Geschäftspartnergruppierung erfolgen. Die Geschäftspartnergruppierung',                    "#EC NOTEXT
                    '   bzw. die Kontengruppe des Debitors legen den Nummernkreis fest. Es ist',                   "#EC NOTEXT
                    '   deshalb erforderlich, dass beide Seiten auf einen Nummernkreis mit',                       "#EC NOTEXT
                    '   gleichem Intervall zugreifen, sofern Nummerngleichheit gesetzt ist. Im',                   "#EC NOTEXT
                    '   anderen Fall können die Nummernkreise unterschiedlich sein.',                              "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_95. " DOCU TXCVI_FS_C_C_BP_TO_VENDOR ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_BP_TO_VENDOR'
      i_langu     = 'D'
      i_line      =:'U2 Synchronisation vom Geschäftspartner zum Kreditor',                                        "#EC NOTEXT
                    '*  Neben den allgemeinen Einstellungen zur Debitoren-/Kreditorenintegration',                 "#EC NOTEXT
                    '   müssen für eine Synchronisation vom Geschäftspartner zum Kreditor an',                     "#EC NOTEXT
                    '   zwei weiteren Stellen im Customizing der CVI Einträge vorhanden sein.',                    "#EC NOTEXT
                    '*  Im Customizing',                                                                           "#EC NOTEXT
                    '=   <DS:SIMG.V_TBC002>GP-Rollentyp für Richtung GP nach Kreditor einstellen',                 "#EC NOTEXT
                    '=  </> werden die Geschäftspartnerrollen definiert, bei deren Anlage',                        "#EC NOTEXT
                    '   automatisch ein Kreditor erzeugt werden soll. Es können nur',                              "#EC NOTEXT
                    '   kreditorische Rollen gewählt werden.',                                                     "#EC NOTEXT
                    '*  Außerdem muss im Customizing',                                                             "#EC NOTEXT
                    '=   <DS:SIMG.V_TBC001>Nummernvergabe für Richtung GP nach Kreditor',                          "#EC NOTEXT
                    '   festlegen</> die Zuordnung einer kreditorischen Kontengruppe zu einer',                    "#EC NOTEXT
                    '   Geschäftspartnergruppierung erfolgen. Die Geschäftspartnergruppierung',                    "#EC NOTEXT
                    '   bzw. die Kontengruppe des Kreditors legen den Nummernkreis fest. Es ist',                  "#EC NOTEXT
                    '   deshalb erforderlich, dass beide Seiten auf einen Nummernkreis mit',                       "#EC NOTEXT
                    '   gleichem Intervall zugreifen, sofern Nummerngleichheit gesetzt ist. Im',                   "#EC NOTEXT
                    '   anderen Fall können die Nummernkreise unterschiedlich sein.',                              "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_96. " DOCU TXCVI_FS_C_C_CUSTOMER ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_CUSTOMER'
      i_langu     = 'D'
      i_line      =:'U1 Einstellungen Debitorenintegration',                                                       "#EC NOTEXT
                    '/: INCLUDE CVI_FS_C_C_CUSTOMER_TO_BP OBJECT DOKU ID TX LANGUAGE DE',                          "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_97. " DOCU TXCVI_FS_C_C_CUSTOMER_BP ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUSTOMER_BP'
      i_langu     = 'E'
      i_line      =:'U1 Settings for Business Partner Roles',                                                      "#EC NOTEXT
                    '*  In the Customizing activity',                                                              "#EC NOTEXT
                    '=   <DS:SIMG.CVIV_CUST_TO_BP2>Define BP Role for Direction Customer to BP',                   "#EC NOTEXT
                    '=  </>',                                                                                      "#EC NOTEXT
                    'AS you must assign one or more business partner roles to the customer''s',                    "#EC NOTEXT
                    '   account groups.',                                                                          "#EC NOTEXT
                    'AS When you create a customer in one of these account groups, the system',                    "#EC NOTEXT
                    '   generates the business partner in the assigned business partner roles.',                   "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    space.
ENDFORM.

FORM update_98. " DOCU TXCVI_FS_C_C_CUSTOMER_TO_BP ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_CUSTOMER_TO_BP'
      i_langu     = 'D'
      i_line      =:'U2 Synchronisation vom Debitor zum Geschäftspartner',                                         "#EC NOTEXT
                    '*  Neben den allgemeinen Einstellungen zur Debitoren-/Kreditorenintegration',                 "#EC NOTEXT
                    '   müssen für eine Synchronisation vom Debitor zum Geschäftspartner an zwei',                 "#EC NOTEXT
                    '   weiteren Stellen im Customizing der CVI Einträge vorhanden sein.',                         "#EC NOTEXT
                    '*  Außerdem muss im Customizing',                                                             "#EC NOTEXT
                    '=   <DS:SIMG.CVIV_CUST_TO_BP1>Nummernvergabe für Richtung Debitor nach GP',                   "#EC NOTEXT
                    '   festlegen</> die Zuordnung von Geschäftspartnergruppierungen zu den',                      "#EC NOTEXT
                    '   debitorischen Kontengruppen erfolgen. Der Kontengruppe des Debitors bzw.',                 "#EC NOTEXT
                    '   der Geschäftspartnergruppierung ist ein Nummernkreis zugeordnet. Bei',                     "#EC NOTEXT
                    '   externer Nummernvergabe muss Nummerngleichheit gesetzt werden, da in der',                 "#EC NOTEXT
                    '   Transaktion zur Anlage eines Debitors keine Geschäftspartnernummer',                       "#EC NOTEXT
                    '   eingetragen werden kann. Die Nummernkreise müssen dann das selbe',                         "#EC NOTEXT
                    '   Intervall aufweisen.',                                                                     "#EC NOTEXT
                    space.
ENDFORM.

FORM update_99. " DOCU TXCVI_FS_C_C_CUS_AUTH_PERSON ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_AUTH_PERSON'
      i_langu     = 'E'
      i_line      =:'U1 Assign Authority of Contact Person',                                                       "#EC NOTEXT
                    'AS You have not assigned the Authority values to the contact person.',                        "#EC NOTEXT
                    '*  If the authority values are not maintained, click <LS>Customizing</>',                     "#EC NOTEXT
                    '   button. It opens the Customizing activity',                                                "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLSDOVSR>Define Authority.</>',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_100. " DOCU TXCVI_FS_C_C_CUS_BPGROUP ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_BPGROUP'
      i_langu     = 'E'
      i_line      =:'U1 Mapping Customer Account Group to BP Grouping',                                            "#EC NOTEXT
                    'AS You have not maintained the BP Grouping for the listed Account Group.',                    "#EC NOTEXT
                    '   Choose a <LS>BP Grouping </>from the drop down list.',                                     "#EC NOTEXT
                    'AS If the account group is not maintained, click <LS>Customizing </>button.',                 "#EC NOTEXT
                    '   It opens the Customizing activity',                                                        "#EC NOTEXT
                    '=     <DS:SIMG.SIMG_CFMENUOLSDOBD2>Define Account Groups and Field',                          "#EC NOTEXT
                    '   Selection for Customers.</>',                                                              "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS If the number range is assigned externally, the <LS>Same Number',                          "#EC NOTEXT
                    '   </>checkbox must be set to ensure that a business partner number cannot',                  "#EC NOTEXT
                    '   be entered when you create a customer.',                                                   "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_101. " DOCU TXCVI_FS_C_C_CUS_CONPERSON ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_CONPERSON'
      i_langu     = 'E'
      i_line      =:'U1 Activate Contact Person',                                                                  "#EC NOTEXT
                    'AS You have not activated contact person.',                                                   "#EC NOTEXT
                    'AS Click <LS>Customizing </>button. It opens the Customizing activity <DS>',                  "#EC NOTEXT
                    '=  Assign Contact Person',                                                                    "#EC NOTEXT
                    '=  .</>',                                                                                     "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_102. " DOCU TXCVI_FS_C_C_CUS_DEPT_PERSON ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_DEPT_PERSON'
      i_langu     = 'E'
      i_line      =:'U1 Assign Department to Contact Person',                                                      "#EC NOTEXT
                    'AS You have not assigned the department numbers to contact person.',                          "#EC NOTEXT
                    'AS If the department is not maintained, click <LS>Customizing </>button. It',                 "#EC NOTEXT
                    '   opens the Customizing activity',                                                           "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLSDOVSQ>Define Standard Departments</>',                             "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_103. " DOCU TXCVI_FS_C_C_CUS_FUN_PERSON ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_FUN_PERSON'
      i_langu     = 'E'
      i_line      =:'U1 Assign Functions of Contact Person',                                                       "#EC NOTEXT
                    'AS You have not assigned the Function values of contact person. If the',                      "#EC NOTEXT
                    '   function values are not maintained, click <LS>Customizing </>button. It',                  "#EC NOTEXT
                    '   opens the Customizing activity',                                                           "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLSDOVSN>Define Contact Person Functions.</>',                        "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_104. " DOCU TXCVI_FS_C_C_CUS_IND_SYSTEM ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_IND_SYSTEM'
      i_langu     = 'E'
      i_line      =:'U1 Select Industry System',                                                                   "#EC NOTEXT
                    'AS In the <LS>Select Industry System </>screen, you can choose one',                          "#EC NOTEXT
                    '   <LS>Industry System </>entry from the table. If you want to maintain new',                 "#EC NOTEXT
                    '   Industry Systems, click <LS>Customizing </>button to open corresponding',                  "#EC NOTEXT
                    '   Customizing activity.',                                                                    "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_105. " DOCU TXCVI_FS_C_C_CUS_LEGAL_STATUS ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_LEGAL_STATUS'
      i_langu     = 'E'
      i_line      =:'U1 Assign Legal Status to Legal Form',                                                        "#EC NOTEXT
                    'AS You have not assigned the Legal Statuses. The system automatically',                       "#EC NOTEXT
                    '   selects the legal statuses. To confirm the selection, save the',                           "#EC NOTEXT
                    '   assignment.',                                                                              "#EC NOTEXT
                    '*  If the legal statuses are not maintained, click <LS>Customizing</>',                       "#EC NOTEXT
                    '   button. It opens the Customizing activity',                                                "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLSDOV2>Define Legal Statuses.</>',                                   "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_106. " DOCU TXCVI_FS_C_C_CUS_MAR_STATUS ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_MAR_STATUS'
      i_langu     = 'E'
      i_line      =:'U1 Assign Marital Statuses',                                                                  "#EC NOTEXT
                    'AS You have not assigned the Marital Statuses.',                                              "#EC NOTEXT
                    '*  If the marital statuses are not maintained, click <LS>Customizing',                        "#EC NOTEXT
                    '   </>button. It opens the Customizing activity',                                             "#EC NOTEXT
                    '=   <DS:SIMG.OHIX0024>Create Marital Status.</>',                                             "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_107. " DOCU TXCVI_FS_C_C_CUS_PAY_CARDS ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_PAY_CARDS'
      i_langu     = 'E'
      i_line      =:'U1 Assign Payment Cards',                                                                     "#EC NOTEXT
                    'AS You have not assigned the Payment Cards. The system automatically',                        "#EC NOTEXT
                    '   selects the payment cards. To confirm the selection, save the',                            "#EC NOTEXT
                    '   assignment.',                                                                              "#EC NOTEXT
                    '*  If the payment cards are not maintained, click <LS>Customizing</>',                        "#EC NOTEXT
                    '   button. It opens the Customizing activity',                                                "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLSDOVK2>Maintain Card Types.</>',                                    "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_108. " DOCU TXCVI_FS_C_C_CUS_POST_AUTH ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_AUTH'
      i_langu     = 'E'
      i_line      =:'U1 Assign Partner Authority to Contact Person',                                               "#EC NOTEXT
                    'AS You have not assigned the Partner Authority values to the contact',                        "#EC NOTEXT
                    '   person. The system automatically selects the authority values. To',                        "#EC NOTEXT
                    '   confirm the selection, save the assignment.',                                              "#EC NOTEXT
                    '*  If the authority values are not maintained, click <LS>Check Customizing',                  "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   Value Based on Suggestions </>check box. To manually maintain the',                        "#EC NOTEXT
                    '   values, select the error message and open the Customizing activity',                       "#EC NOTEXT
                    '=   <DS:SIMG._CABP_GPB_TB914>Define Authority.</>',                                           "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_109. " DOCU TXCVI_FS_C_C_CUS_POST_CARDS ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_CARDS'
      i_langu     = 'E'
      i_line      =:'U1 Assign Payment Cards to Contact Person',                                                   "#EC NOTEXT
                    'AS You have not assigned the Payment Cards. The system automatically',                        "#EC NOTEXT
                    '   selects the payment cards. To confirm the selection, save the',                            "#EC NOTEXT
                    '   assignment.',                                                                              "#EC NOTEXT
                    '*  If the payment cards are not maintained, click <LS>Check Customizing',                     "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   value based on suggestions </>check box. To manually maintain the value,',                 "#EC NOTEXT
                    '   select the error message and open the Customizing activity',                               "#EC NOTEXT
                    '=   <DS:SIMG._CABP_V_TB033_SEC>Maintain Payment Card Types.</>',                              "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    '*  Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_110. " DOCU TXCVI_FS_C_C_CUS_POST_DEPT ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_DEPT'
      i_langu     = 'E'
      i_line      =:'U1 Assign Department to Contact Person',                                                      "#EC NOTEXT
                    'AS You have not assigned the department numbers to contact person. The',                      "#EC NOTEXT
                    '   system automatically selects the department numbers. To confirm the',                      "#EC NOTEXT
                    '   selection, save the assignment.',                                                          "#EC NOTEXT
                    '*  If the department is not maintained, click <LS>Check Customizing',                         "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   Value Based on Suggestions </>check box. To manually maintain the value,',                 "#EC NOTEXT
                    '   select the error message and open the Customizing activity',                               "#EC NOTEXT
                    '=   <DS:SIMG._CABP_GPB_TB910>Define Departments.</>',                                         "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_111. " DOCU TXCVI_FS_C_C_CUS_POST_FUNC ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_FUNC'
      i_langu     = 'E'
      i_line      =:'U1 Assign Partner Function to Contact Person',                                                "#EC NOTEXT
                    'AS You have not assigned the partner function values to contact person. The',                 "#EC NOTEXT
                    '   system automatically selects the function values. To confirm the',                         "#EC NOTEXT
                    '   selection, save the assignment.',                                                          "#EC NOTEXT
                    '*  If the function values are not maintained, click <LS>Check Customizing',                   "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   Value Based on Suggestions</> check box. To manually maintain the',                        "#EC NOTEXT
                    '   values, select the error message and open the Customizing activity',                       "#EC NOTEXT
                    '=   <DS:SIMG._CABP_GPB_TB912>Define Functions</>.',                                           "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_112. " DOCU TXCVI_FS_C_C_CUS_POST_IND ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_IND'
      i_langu     = 'E'
      i_line      =:'U1 Assign Industry System',                                                                   "#EC NOTEXT
                    'AS You have not assigned the Industry System. You can select the Incoming',                   "#EC NOTEXT
                    '   Industry or Outgoing Industry radio buttons to view the corresponding',                    "#EC NOTEXT
                    '   error logs. The system automatically selects the Industry Systems. To',                    "#EC NOTEXT
                    '   confirm the selection, save the assignment.',                                              "#EC NOTEXT
                    '*  If the Industry System and Industry are not maintained, click <LS>Check',                  "#EC NOTEXT
                    '   Customizing </>button. To automatically maintain the values, select the',                  "#EC NOTEXT
                    '   <LS>Maintain value based on suggestions </>check box. To manually',                        "#EC NOTEXT
                    '   maintain the value, select the error message and open the Customizing',                    "#EC NOTEXT
                    '   activity',                                                                                 "#EC NOTEXT
                    '=   <DS:SIMG._CABP_BUPA_TB038>Maintain Industry Systems and Industries.</>',                  "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    '*  Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_113. " DOCU TXCVI_FS_C_C_CUS_POST_LEGAL ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_LEGAL'
      i_langu     = 'E'
      i_line      =:'U1 Assign Legal Form to Legal Status',                                                        "#EC NOTEXT
                    'AS You have not assigned the Legal Statuses. The system automatically',                       "#EC NOTEXT
                    '   selects the legal statuses. To confirm the selection, save the',                           "#EC NOTEXT
                    '   assignment.',                                                                              "#EC NOTEXT
                    '*  If the legal statuses are not maintained, click <LS>Check Customizing',                    "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   value based on suggestions </>check box. To manually maintain the value,',                 "#EC NOTEXT
                    '   select the error message and open the Customizing activity',                               "#EC NOTEXT
                    '=   <DS:SIMG._CABP_TB019>Maintain Legal Forms.</>',                                           "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_114. " DOCU TXCVI_FS_C_C_CUS_POST_MARITAL ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_MARITAL'
      i_langu     = 'E'
      i_line      =:'U1 Assign Marital Statuses',                                                                  "#EC NOTEXT
                    'AS You have not assigned the Marital Statuses to partner. The system',                        "#EC NOTEXT
                    '   automatically selects the marital statuses. To confirm the selection,',                    "#EC NOTEXT
                    '   save the assignment.',                                                                     "#EC NOTEXT
                    '*  If the marital statuses are not maintained, click <LS>Check Customizing',                  "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   value based on suggestions </>check box. To manually maintain the',                        "#EC NOTEXT
                    '   values, select the error message and open the Customizing activity',                       "#EC NOTEXT
                    '=   <DS:SIMG._CABP_TB027>Maintain Marital Statuses.</>',                                      "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_115. " DOCU TXCVI_FS_C_C_CUS_POST_VIP ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_POST_VIP'
      i_langu     = 'E'
      i_line      =:'U1 Assign VIP Indicator to Contact Person',                                                   "#EC NOTEXT
                    'AS You have not assigned the VIP indicators to the contact person. The',                      "#EC NOTEXT
                    '   system automatically selects the VIP indicators. To confirm the',                          "#EC NOTEXT
                    '   selection, save the assignment.',                                                          "#EC NOTEXT
                    '*  If the VIP indicators are not maintained, click <LS>Check Customizing',                    "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   value based on suggestions </>check box. To manually maintain the',                        "#EC NOTEXT
                    '   values, select the error message and open the Customizing activity.',                      "#EC NOTEXT
                    '=   <DS:SIMG._CABP_GPB_TB916>Define VIP Entries.</>',                                         "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_116. " DOCU TXCVI_FS_C_C_CUS_ROLE ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_ROLE'
      i_langu     = 'E'
      i_line      =:'U1 Mapping Customer Account Group to Role',                                                   "#EC NOTEXT
                    'AS You have not maintained business partner role for the listed Account',                     "#EC NOTEXT
                    '   Groups.',                                                                                  "#EC NOTEXT
                    'N1 Choose a <LS>Role </>from the role drop down list.',                                       "#EC NOTEXT
                    'N1 Click <LS>Customizing </>button and then choose a <LS>Number Range</>.',                   "#EC NOTEXT
                    '   It opens the Customizing activity',                                                        "#EC NOTEXT
                    '=     <DS:SIMG.SIMG_CFMENUOLSDOBD2>Define Account Groups and Field',                          "#EC NOTEXT
                    '   Selection for Customers.</>',                                                              "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_117. " DOCU TXCVI_FS_C_C_CUS_VIP_PERSON ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_CUS_VIP_PERSON'
      i_langu     = 'E'
      i_line      =:'U1 Assign VIP Indicator to Contact Person',                                                   "#EC NOTEXT
                    'AS You have not assigned the VIP indicators to the contact person.',                          "#EC NOTEXT
                    '*  If the VIP indicators are not maintained, click <LS>Customizing',                          "#EC NOTEXT
                    '   </>button. It opens the Customizing activity',                                             "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLSDOVR7>Define VIP Indicator</>.',                                   "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_118. " DOCU TXCVI_FS_C_C_FUNCTION_MODULES ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_FUNCTION_MODULES'
      i_langu     = 'E'
      i_line      =:'U2 Registered Function Modules',                                                              "#EC NOTEXT
                    '*  Before you can synchronize the data between business partners and',                        "#EC NOTEXT
                    '   customers/vendors, you must make sure that the following SAP function',                    "#EC NOTEXT
                    '   modules are available and have been activated in table CRMC_BUT_CALL_FU:',                 "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    'K3 Event,,Object,,Position,,Function Module,,Call',                                           "#EC NOTEXT
                    'T3 BPOUT,,BUPX,,1000000,,MDS_BUPA_OUTBOUND,,X',                                               "#EC NOTEXT
                    'T3 CRMOU,,BUPA,,1000000,,BUPA_OUTBOUND_BPS_FILL_CENTRAL,,X',                                  "#EC NOTEXT
                    'T3 CRMOU,,BUPR,,1000000,,BUPA_OUTBOUND_BPR_FILL_CENTRAL,,X',                                  "#EC NOTEXT
                    'T3 MERGE,,BUPA,,1000000,,MERGE_BUPA_CENTRAL,,X',                                              "#EC NOTEXT
                    'T3 MERGE,,BUPA,,2000000,,MERGE_BUPA_FINSERV,,X',                                              "#EC NOTEXT
                    'T3 MERGE,,BUPR,,1000000,,MERGE_BUPR_CENTRAL,,X',                                              "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_119. " DOCU TXCVI_FS_C_C_GENERAL ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_GENERAL'
      i_langu     = 'D'
      i_line      =:'U1 Allgemeine Einstellungen',                                                                 "#EC NOTEXT
                    '/: INCLUDE CVI_FS_C_C_SYNCH_DIRECTION OBJECT DOKU ID TX LANGUAGE DE',                         "#EC NOTEXT
                    '/: INCLUDE CVI_FS_C_C_PPO_CONNECTION OBJECT DOKU ID TX LANGUAGE DE',                          "#EC NOTEXT
                    '/: INCLUDE CVI_FS_C_C_FUNCTION_MODULES OBJECT DOKU ID TX LANGUAGE DE',                        "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_120. " DOCU TXCVI_FS_C_C_GO_TO_CUSTOMIZING ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_GO_TO_CUSTOMIZING'
      i_langu     = 'D'
      i_line      =:'U2 Customizing zur Debitoren-/Kreditorenintegration',                                         "#EC NOTEXT
                    '*  <ZH>Einstellungen des PPO</>',                                                             "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.MDSV_CTRL_OBJPPO>PPO Aufträge für Plattformobjekte im Dialog',                    "#EC NOTEXT
                    '   aktivieren</>',                                                                            "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG./SAPPO/VA_BPROC>Erstellung von Nachbearbeitungsaufträgen',                        "#EC NOTEXT
                    '   aktivieren</>',                                                                            "#EC NOTEXT
                    '*  <ZH>Einstellung der Synchronisationsrichtung</>',                                          "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.MDSV_CTRL_OPT_A>Synchronisationsoptionen aktivieren</>',                          "#EC NOTEXT
                    '*  <ZH>Einstellungen der Debitorenintegration</>',                                            "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.V_TBD002>GP-Rollentyp für Richtung GP nach Debitor einstellen',                   "#EC NOTEXT
                    '=  </>',                                                                                      "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.V_TBD001>Nummernvergabe für Richtung GP nach Debitor festlegen',                  "#EC NOTEXT
                    '=  </>',                                                                                      "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.CVIV_CUST_TO_BP2>GP-Rolle für Richtung Debitor nach GP',                          "#EC NOTEXT
                    '   festlegen</>',                                                                             "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.CVIV_CUST_TO_BP1>Nummernvergabe für Richtung Debitor nach GP',                    "#EC NOTEXT
                    '   festlegen</>',                                                                             "#EC NOTEXT
                    '*  <ZH>Einstellungen der Kreditorenintegration</>',                                           "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.V_TBC002>GP-Rollentyp für Richtung GP nach Kreditor einstellen',                  "#EC NOTEXT
                    '=  </>',                                                                                      "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.V_TBC001>Nummernvergabe für Richtung GP nach Kreditor festlegen',                 "#EC NOTEXT
                    '=  </>',                                                                                      "#EC NOTEXT
                    'B1 <DS:SIMG.CVIV_VEND_TO_BP2>GP-Rolle für Richtung Kreditor nach GP',                         "#EC NOTEXT
                    '   festlegen</>',                                                                             "#EC NOTEXT
                    'B1',                                                                                          "#EC NOTEXT
                    '=  <DS:SIMG.CVIV_VEND_TO_BP1>Nummernvergabe für Richtung Kreditor nach GP',                   "#EC NOTEXT
                    '   festlegen</>',                                                                             "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_121. " DOCU TXCVI_FS_C_C_IND_KEY ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_IND_KEY'
      i_langu     = 'E'
      i_line      =:'U1 Missing Industry Keys - Incoming',                                                         "#EC NOTEXT
                    '*  Industry key mapping is missing in the direction Customer/Vendor to',                      "#EC NOTEXT
                    '   Business Partner. To assign the Industry Key, follow the below steps:',                    "#EC NOTEXT
                    'N1 Click <LS>Customizing </>button.',                                                         "#EC NOTEXT
                    'N1 Choose the <LS>Industry System</>. It opens the Customizing activity',                     "#EC NOTEXT
                    '=      <DS:SIMG.SIMG_CFMENUORFBOB44>Define Industries.</> Multiple Industry',                 "#EC NOTEXT
                    '   keys cannot have the same Industry Sector under an Industry System.',                      "#EC NOTEXT
                    'N1 Maintain the mapping and click <LS>Save</>.',                                              "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_122. " DOCU TXCVI_FS_C_C_IND_KEY_OUT ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_IND_KEY_OUT'
      i_langu     = 'E'
      i_line      =:'U1 Missing Industry Keys - Outgoing',                                                         "#EC NOTEXT
                    '*  Industry key mapping is missing in the direction Business Partner to',                     "#EC NOTEXT
                    '   Customer/Vendor. To assign the Industry Key, follow the below steps:',                     "#EC NOTEXT
                    'N1 Click <LS>Customizing </>button.',                                                         "#EC NOTEXT
                    'N1 Choose the <LS>Industry System</>. It opens the Customizing activity',                     "#EC NOTEXT
                    '=      <DS:SIMG.SIMG_CFMENUORFBOB44>Define Industries.</> Multiple Industry',                 "#EC NOTEXT
                    '   keys cannot have the same Industry Sector under an Industry System.',                      "#EC NOTEXT
                    'N1 Maintain the mapping and click <LS>Save</>.',                                              "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_123. " DOCU TXCVI_FS_C_C_PPO_CONNECTION ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_PPO_CONNECTION'
      i_langu     = 'E'
      i_line      =:'U2 Connection to Postprocessing Office',                                                      "#EC NOTEXT
                    '*  If customer/vendor integration is connected to the Postprocessing Office',                 "#EC NOTEXT
                    '   (PPO) and a synchronization error occurs, the system generates a',                         "#EC NOTEXT
                    '   postprocessing order in the PPO instead of triggering a short dump. You',                  "#EC NOTEXT
                    '   can use transaction MDS_PPO2 to analyze and postprocess the error.',                       "#EC NOTEXT
                    '   However, the generation of a postprocessing order means that',                             "#EC NOTEXT
                    '   inconsistent data is created in the system until the PPO orders have',                     "#EC NOTEXT
                    '   been processed correctly (one object is stored with changed data while',                   "#EC NOTEXT
                    '   another object remains unchanged). Therefore, we recommend that you',                      "#EC NOTEXT
                    '   activate the PPO for test purposes only. The PPO should be deactivated',                   "#EC NOTEXT
                    '   in productive systems to prevent the creation of inconsistent data.',                      "#EC NOTEXT
                    '*  To connect customer/vendor integration to the PPO, you have to activate',                  "#EC NOTEXT
                    '   the four business processes required for the synchronization direction',                   "#EC NOTEXT
                    '   for the software component AP-MD (CVI_01, CVI_02, CVI_03, and CVI_04) in',                 "#EC NOTEXT
                    '   the Customizing activity',                                                                 "#EC NOTEXT
                    '=    <DS:SIMG./SAPPO/VA_BPROC.0D766741F9DAC670E10000000A15509A>Activate',                     "#EC NOTEXT
                    '   Creation of Postprocessing Orders</>.',                                                    "#EC NOTEXT
                    '*  In the Customizing activity',                                                              "#EC NOTEXT
                    '=   <DS:SIMG.MDSV_CTRL_OBJPPO>Activate PPO Requests for Platform Objects in',                 "#EC NOTEXT
                    '   the Dialog</>, you must also activate the relevant BP synchronization',                    "#EC NOTEXT
                    '   object for the business partner.',                                                         "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_124. " DOCU TXCVI_FS_C_C_STARTSCREEN ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_STARTSCREEN'
      i_langu     = 'D'
      i_line      =:'U2 CVI Customizing - Check Report',                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*  Dieser Report dient zur Anzeige und Überprüfung des bei der',                              "#EC NOTEXT
                    '   Debitoren-/Kreditorenintegration (CVI) vorgenommenen Customizings mit',                    "#EC NOTEXT
                    '   dem Geschäftspartner.',                                                                    "#EC NOTEXT
                    '*  Die Anzeige des Customizings inklusive der dazugehörigen Prüfungen ist',                   "#EC NOTEXT
                    '   in drei Kategorien unterteilt:',                                                           "#EC NOTEXT
                    'B1 <ZK>Allgemeine Einstellungen</>: Umfasst die generelle Einstellung der',                   "#EC NOTEXT
                    '   Synchronisationsrichtungen, die Anbindung der CVI an eine',                                "#EC NOTEXT
                    '   Nachbearbeitung über das Post Processing Office sowie die notwendigen',                    "#EC NOTEXT
                    '   Funktionsbausteine für die Inbound/Outbound Verarbeitung.',                                "#EC NOTEXT
                    'B1 <ZK>Einstellungen des Debitors</>: Umfasst Rollen- und',                                   "#EC NOTEXT
                    '   Nummernkreiszuordnung für die Synchronisationsrichtungen',                                 "#EC NOTEXT
                    '   Geschäftspartner -> Debitor und Debitor -> Geschäftspartner.',                             "#EC NOTEXT
                    'B1 <ZK>Einstellungen des Kreditors</>: Umfasst Rollen- und',                                  "#EC NOTEXT
                    '   Nummernkreiszuordnung für die Synchronisationsrichtungen',                                 "#EC NOTEXT
                    '   Geschäftspartner -> Kreditor und Kreditor -> Geschäftspartner.',                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*  Der Report dient als Ergänzung zu <ZH>SAP Hinweis 956054: ''BP_CVI:',                      "#EC NOTEXT
                    '   Debitoren/ Kreditoren Integration ab ERP 6.00''</>. Beachten Sie auch die',                "#EC NOTEXT
                    '   dort hinterlegten verwandten Hinweise.',                                                   "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_125. " DOCU TXCVI_FS_C_C_SUPP_BPGROUP ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_SUPP_BPGROUP'
      i_langu     = 'E'
      i_line      =:'U1 Assign Vendor Account Group to BP Grouping',                                               "#EC NOTEXT
                    'AS The BP Grouping is not maintained for the listed Account Groups.',                         "#EC NOTEXT
                    'N1 You can choose a <LS>BP Grouping </>from the drop down list.',                             "#EC NOTEXT
                    'N1 Choose <LS>Same Number </>indicator if you want to have same number for',                  "#EC NOTEXT
                    '   vendor during synchronization.',                                                           "#EC NOTEXT
                    'N1 If the account group is not maintained, click <LS>Customizing </>button.',                 "#EC NOTEXT
                    '   It opens the Customizing activity',                                                        "#EC NOTEXT
                    '=     <DS:SIMG.SIMG_CFMENUOLMSOMSG>   Define Account Groups and Field',                       "#EC NOTEXT
                    '   Selection (Vendor).</>',                                                                   "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_126. " DOCU TXCVI_FS_C_C_SUPP_INDUSTRY ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_SUPP_INDUSTRY'
      i_langu     = 'E'
      i_line      =:'U1 Select Industry System and Key',                                                           "#EC NOTEXT
                    'AS You have not assigned the Industry Key. Follow the below steps:',                          "#EC NOTEXT
                    'N1 Select the <LS>Incoming Industry </>or <LS>Outgoing Industry</> radio',                    "#EC NOTEXT
                    '   buttons to view the corresponding error logs.',                                            "#EC NOTEXT
                    'N1 On the <LS>Select Industry System </>screen, choose an industry system',                   "#EC NOTEXT
                    '   to maintain the industry keys.',                                                           "#EC NOTEXT
                    'N1 On the <LS>Select Industry Key </>screen, choose Industry sector for',                     "#EC NOTEXT
                    '   each industry keys. Click <LS>Save </>to confirm.',                                        "#EC NOTEXT
                    '*  If the Industry Keys are not maintained, click <LS>Check Customizing',                     "#EC NOTEXT
                    '   </>button. To automatically maintain the values, select the <LS>Maintain',                 "#EC NOTEXT
                    '   value based on suggestions </>check box. To manually maintain the value,',                 "#EC NOTEXT
                    '   select the error message and open the Customizing activity',                               "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUORFBOB44K>Define Industries.</>',                                     "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'U1 &NOTE&',                                                                                   "#EC NOTEXT
                    'AS Double-click the section to view its message logs.',                                       "#EC NOTEXT
                    'AS In the <LS>Select Industry System </>screen, you can select only one',                     "#EC NOTEXT
                    '   <LS>Select Industry System </>entry from the table.',                                      "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_127. " DOCU TXCVI_FS_C_C_SUPP_ROLE ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_SUPP_ROLE'
      i_langu     = 'E'
      i_line      =:'U1 Assign Vendor Account Group Roles',                                                        "#EC NOTEXT
                    'AS You have not maintained Role for the listed Account Groups. Choose a',                     "#EC NOTEXT
                    '   role from the <LS>BP Role</> drop down list.',                                             "#EC NOTEXT
                    '*  If the account group is not maintained, click <LS>Customizing</> button.',                 "#EC NOTEXT
                    '   It opens the Customizing activity',                                                        "#EC NOTEXT
                    '=   <DS:SIMG.SIMG_CFMENUOLMSOMSG>Define Account Groups and Field Selection',                  "#EC NOTEXT
                    '   (Vendor).</>',                                                                             "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_128. " DOCU TXCVI_FS_C_C_SYNCH_DIRECTION ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_SYNCH_DIRECTION'
      i_langu     = 'E'
      i_line      =:'U2 Synchronization Directions',                                                               "#EC NOTEXT
                    '*  In the Customizing activity',                                                              "#EC NOTEXT
                    '=   <DS:SIMG.MDSV_CTRL_OPT_A>Activate Synchronization Options</>, you can',                   "#EC NOTEXT
                    '   configure the direction in which data is synchronized between the',                        "#EC NOTEXT
                    '   customer/vendor and the business partner. Data can be synchronized in',                    "#EC NOTEXT
                    '   both directions. This means that you can update data from the business',                   "#EC NOTEXT
                    '   partner to the customer/vendor and from the customer/vendor to the',                       "#EC NOTEXT
                    '   business partner.',                                                                        "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_129. " DOCU TXCVI_FS_C_C_TAX_CLASS ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_C_C_TAX_CLASS'
      i_langu     = 'E'
      i_line      =:'U1 Tax Classification',                                                                       "#EC NOTEXT
                    'AS You have not maintained Function Module and Tax Number Type for the',                      "#EC NOTEXT
                    '   listed tax number category. You can choose the relevant <LS>Function',                     "#EC NOTEXT
                    '   Module Name </>and <LS>Tax Number Type </>and click <LS>Save </>to',                       "#EC NOTEXT
                    '   automatically maintain the data.',                                                         "#EC NOTEXT
                    '*  If the tax category is not maintained, click <LS>Customizing </>button.',                  "#EC NOTEXT
                    '   It opens the Customizing activity',                                                        "#EC NOTEXT
                    '=   <DS:SIMG._CABP_TAXNUMTYPE>  Maintain Tax Number Categories</>.',                          "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_130. " DOCU TXCVI_FS_C_C_VENDOR ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_VENDOR'
      i_langu     = 'D'
      i_line      =:'U1 Einstellungen Kreditorenintegration',                                                      "#EC NOTEXT
                    '/: INCLUDE CVI_FS_C_C_BP_TO_VENDOR OBJECT DOKU ID TX LANGUAGE DE',                            "#EC NOTEXT
                    '/: INCLUDE CVI_FS_C_C_VENDOR_TO_BP OBJECT DOKU ID TX LANGUAGE DE',                            "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_131. " DOCU TXCVI_FS_C_C_VENDOR_TO_BP ( DE , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_FS_INTEGRATION'
      i_docname   = 'TXCVI_FS_C_C_VENDOR_TO_BP'
      i_langu     = 'D'
      i_line      =:'U2 Synchronisation vom Kreditor zum Geschäftspartner',                                        "#EC NOTEXT
                    '*  Neben den allgemeinen Einstellungen zur Debitoren-/Kreditorenintegration',                 "#EC NOTEXT
                    '   müssen für eine Synchronisation vom Kreditor zum Geschäftspartner an',                     "#EC NOTEXT
                    '   zwei weiteren Stellen im Customizing der CVI Einträge vorhanden sein.',                    "#EC NOTEXT
                    '*  Im Customizing',                                                                           "#EC NOTEXT
                    '=   <DS:SIMG.CVIV_VEND_TO_BP2>GP-Rolle für Richtung Kreditor nach GP',                        "#EC NOTEXT
                    '   festlegen</> werden eine oder mehrere kreditorische Geschäftspartn',                       "#EC NOTEXT
                    '=  errollen den Kontengruppen des Kreditors zugeordnet. Bei Anlage eines',                    "#EC NOTEXT
                    '   Kreditors in einer dieser Kontengruppen, wird der Geschäftspartner',                       "#EC NOTEXT
                    '   automatisch in den zugeordneten Geschäftspartnerrollen erzeugt.',                          "#EC NOTEXT
                    '*  Außerdem muss im Customizing',                                                             "#EC NOTEXT
                    '=   <DS:SIMG.CVIV_VEND_TO_BP1>Nummernvergabe für Richtung Kreditor nach GP',                  "#EC NOTEXT
                    '   festlegen</> die Zuordnung von Geschäftspartnergruppierungen zu den',                      "#EC NOTEXT
                    '   kreditorischen Kontengruppen erfolgen. Der Kontengruppe des Kreditors',                    "#EC NOTEXT
                    '   bzw. der Geschäftspartnergruppierung ist ein Nummernkreis zugeordnet.',                    "#EC NOTEXT
                    '   Bei externer Nummernvergabe muss Nummerngleichheit gesetzt werden, da in',                 "#EC NOTEXT
                    '   der Transaktion zur Anlage eines Kreditors keine Geschäftspartnernummer',                  "#EC NOTEXT
                    '   eingetragen werden kann. Die Nummernkreise müssen dann das selbe',                         "#EC NOTEXT
                    '   Intervall aufweisen.',                                                                     "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_132. " DOCU TXCVI_FS_GEN_NUM_ASSIGN ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_GEN_NUM_ASSIGN'
      i_langu     = 'E'
      i_line      =:'U1 Define Number Assignments',                                                                "#EC NOTEXT
                    'AS You can view the existing and overlapping number ranges for Business',                     "#EC NOTEXT
                    '   Partner, Customer and Supplier. The system also displays number range',                    "#EC NOTEXT
                    '   proposals.',                                                                               "#EC NOTEXT
                    'B1 To view proposed number ranges, enter desired value in <LS>Number Range',                  "#EC NOTEXT
                    '   Factor </>field and then <LS>Execute</>. You can save number ranges from',                 "#EC NOTEXT
                    '   the proposed list.',                                                                       "#EC NOTEXT
                    'B1 To get a proposal for a common number range for business partner and',                     "#EC NOTEXT
                    '   customer/supplier, select the check box and enter <LS>Start Number',                       "#EC NOTEXT
                    '   </>and <LS>End Number </>values. The system proposes the same (if',                        "#EC NOTEXT
                    '   available) or nearest available number range. Save the number range',                      "#EC NOTEXT
                    '   values.',                                                                                  "#EC NOTEXT
                    'AS All the proposed number ranges are selected by default. You can clear if',                 "#EC NOTEXT
                    '   a selection is not required. Additionally, you can modify the proposed',                   "#EC NOTEXT
                    '   values for Number Range Number. If you enter an already existing number',                  "#EC NOTEXT
                    '   range number, the system throws an error.',                                                "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'AS The sub screens on the right would display information about the',                         "#EC NOTEXT
                    '   overlapping of Numeric and Alphanumeric Number Ranges, including the',                     "#EC NOTEXT
                    '   percentage of overlap.',                                                                   "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    space.
ENDFORM.

FORM update_133. " DOCU TXCVI_FS_GEN_UN_ROLE ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_GEN_UN_ROLE'
      i_langu     = 'E'
      i_line      =:'U1 Unsupported Roles',                                                                        "#EC NOTEXT
                    'AS This displays the business partners containing unsupported roles. You',                    "#EC NOTEXT
                    '   can view the business partner numbers and the corresponding roles.',                       "#EC NOTEXT
                    'AS',                                                                                          "#EC NOTEXT
                    'AS The following business partner roles are no longer supported with',                        "#EC NOTEXT
                    '   S/4HANA On-Premise System:',                                                               "#EC NOTEXT
                    'T1 BAM001          Bank Contact Person',                                                      "#EC NOTEXT
                    'T1 BBP002          Portal Provider',                                                          "#EC NOTEXT
                    'T1 BBP003          Plant',                                                                    "#EC NOTEXT
                    'T1 BBP004          Purchasing Firm',                                                          "#EC NOTEXT
                    'T1 BBP006          Invoicing Party',                                                          "#EC NOTEXT
                    'T1 CBIH10           External Person',                                                         "#EC NOTEXT
                    'T1 CBIH20           Authority',                                                               "#EC NOTEXT
                    'T1 CLERK1          First Processor',                                                          "#EC NOTEXT
                    'T1 CLERK2          Second Processor',                                                         "#EC NOTEXT
                    'T1 CRM000         Sold-to Party',                                                             "#EC NOTEXT
                    'T1 CRM002         Ship-to Party',                                                             "#EC NOTEXT
                    'T1 CRM003         Payer',                                                                     "#EC NOTEXT
                    'T1 CRM004         Bill-to Party',                                                             "#EC NOTEXT
                    'T1 CRM007        (Marketplace) Supplier',                                                     "#EC NOTEXT
                    'T1 CRM012        Consolidating Plant',                                                        "#EC NOTEXT
                    'T1 CRM013        Remanufacturer',                                                             "#EC NOTEXT
                    'T1 HEA010         Doctor',                                                                    "#EC NOTEXT
                    'T1 HEA020         External Physician',                                                        "#EC NOTEXT
                    'T1 HEA030         Health Center',                                                             "#EC NOTEXT
                    'T1 HEA040         Laboratory',                                                                "#EC NOTEXT
                    'T1 HEA050         External Company',                                                          "#EC NOTEXT
                    'T1 HR1000         Human Resources Payee',                                                     "#EC NOTEXT
                    'T1 LOG010          Consumer',                                                                 "#EC NOTEXT
                    'T1 RCFAGY          Agency',                                                                   "#EC NOTEXT
                    'T1 RCFBRA          Branch Role',                                                              "#EC NOTEXT
                    'T1 RTP010          Retirement Plan Beneficiary',                                              "#EC NOTEXT
                    'T1 RTP050          Deceased Holder of a Retirement Plan',                                     "#EC NOTEXT
                    'T1 TXS001          Investor',                                                                 "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_134. " DOCU TXCVI_FS_GEN_UN_ROLE_2 ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_FS_GEN_UN_ROLE_2'
      i_langu     = 'E'
      i_line      =:'U1 Remove Unsupported Roles',                                                                 "#EC NOTEXT
                    'AS This displays unsupported roles so that you can choose them and remove',                   "#EC NOTEXT
                    '   the business partner role assignments. Select the check boxes and click',                  "#EC NOTEXT
                    '   <LS>Remove Role Assignments</>.',                                                          "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM update_135. " DOCU TXCVI_SUP_INC_DATA ( EN , source: E18 )
  CALL METHOD lcl_wb=>create_other_docu     "#EC *
    EXPORTING
      i_devclass  = 'CVI_MAPPING'
      i_docname   = 'TXCVI_SUP_INC_DATA'
      i_langu     = 'E'
      i_line      =:'U1 Inconsistent Data',                                                                        "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    '*  You have not maintained consistent data in the Tax, Industry/Location,',                   "#EC NOTEXT
                    '   and Bank fields. Perform the following steps:',                                            "#EC NOTEXT
                    'N1 If there is an entry in the <LS>Inconsistent Tax Data </>table, maintain',                 "#EC NOTEXT
                    '   consistent data in the following fields of corresponding supplier table',                  "#EC NOTEXT
                    '   and the linked customer table:',                                                           "#EC NOTEXT
                    'B2 <LS>STCD1 - Tax Number 1</>',                                                              "#EC NOTEXT
                    'B2 <LS>STCD2 - Tax Number 2</>',                                                              "#EC NOTEXT
                    'B2 <LS>STKZU - Liable for VAT</>',                                                            "#EC NOTEXT
                    'B2 <LS>STCEG - VAT Registration Number</>',                                                   "#EC NOTEXT
                    'N1 If there is an entry in the <LS>Inconsistent Industry/Location Data',                      "#EC NOTEXT
                    '   </>table, maintain consistent data in the following fields of',                            "#EC NOTEXT
                    '   corresponding supplier table and the linked customer table:',                              "#EC NOTEXT
                    'B2 <LS>BBBNR - International Location Number (part 1)</>',                                    "#EC NOTEXT
                    'B2 <LS>BBSNR - International Location Number (part 2)</>',                                    "#EC NOTEXT
                    'B2 <LS>BUBKZ - Check Digit for the International Location Number</>',                         "#EC NOTEXT
                    'B2 <LS>BRSCH - Industry Key</>',                                                              "#EC NOTEXT
                    'B2 <LS>VBUND - Company ID</>',                                                                "#EC NOTEXT
                    'N1 If there is an entry in the <LS>Inconsistent Bank Data </>table,',                         "#EC NOTEXT
                    '   maintain consistent data in the following fields of corresponding',                        "#EC NOTEXT
                    '   supplier table and the linked customer table:',                                            "#EC NOTEXT
                    'B2 <LS>BANKS - Bank Country Key</>',                                                          "#EC NOTEXT
                    'B2 <LS>BANKL - Bank Number</>',                                                               "#EC NOTEXT
                    'B2 <LS>BANKN - Bank Account Number</>',                                                       "#EC NOTEXT
                    '*',                                                                                           "#EC NOTEXT
                    space.
ENDFORM.

FORM genview.

ENDFORM.

FORM update.

  gv_master_languages   = 'ED'.  "#EC NOTEXT
  gv_objects_with_snote_check = 'REPT,CUAD'.  "#EC NOTEXT

  PERFORM update_01. " REPT CL_CVI_CUSTOMIZING_RESOLVE====CP ( EN , source: E18 )
  PERFORM update_02. " REPT CVI_CUSTOMIZING_RESOLVE ( EN , source: E18 )
  PERFORM update_03. " CUAD CVI_CUSTOMIZING_RESOLVE ( EN , source: E18 )
  PERFORM update_04. " DOCU RECVI_CUSTOMIZING_RESOLVE ( EN , source: E18 )
  PERFORM update_05. " MSAG CVI_CUST_RESOLVE ( EN , source: E18 )
  PERFORM update_06. " MESS CVI_CUST_RESOLVE000 ( EN , source: E18 )
  PERFORM update_07. " MESS CVI_CUST_RESOLVE001 ( EN , source: E18 )
  PERFORM update_08. " MESS CVI_CUST_RESOLVE002 ( EN , source: E18 )
  PERFORM update_09. " MESS CVI_CUST_RESOLVE003 ( EN , source: E18 )
  PERFORM update_10. " MESS CVI_CUST_RESOLVE004 ( EN , source: E18 )
  PERFORM update_11. " MESS CVI_CUST_RESOLVE005 ( EN , source: E18 )
  PERFORM update_12. " MESS CVI_CUST_RESOLVE006 ( EN , source: E18 )
  PERFORM update_13. " MESS CVI_CUST_RESOLVE007 ( EN , source: E18 )
  PERFORM update_14. " MESS CVI_CUST_RESOLVE008 ( EN , source: E18 )
  PERFORM update_15. " MESS CVI_CUST_RESOLVE009 ( EN , source: E18 )
  PERFORM update_16. " MESS CVI_CUST_RESOLVE010 ( EN , source: E18 )
  PERFORM update_17. " MESS CVI_CUST_RESOLVE011 ( EN , source: E18 )
  PERFORM update_18. " MESS CVI_CUST_RESOLVE012 ( EN , source: E18 )
  PERFORM update_19. " MESS CVI_CUST_RESOLVE013 ( EN , source: E18 )
  PERFORM update_20. " MESS CVI_CUST_RESOLVE014 ( EN , source: E18 )
  PERFORM update_21. " MESS CVI_CUST_RESOLVE015 ( EN , source: E18 )
  PERFORM update_22. " MESS CVI_CUST_RESOLVE016 ( EN , source: E18 )
  PERFORM update_23. " MESS CVI_CUST_RESOLVE017 ( EN , source: E18 )
  PERFORM update_24. " MESS CVI_CUST_RESOLVE018 ( EN , source: E18 )
  PERFORM update_25. " MESS CVI_CUST_RESOLVE019 ( EN , source: E18 )
  PERFORM update_26. " MESS CVI_CUST_RESOLVE020 ( EN , source: E18 )
  PERFORM update_27. " MESS CVI_CUST_RESOLVE021 ( EN , source: E18 )
  PERFORM update_28. " MESS CVI_CUST_RESOLVE022 ( EN , source: E18 )
  PERFORM update_29. " MESS CVI_CUST_RESOLVE023 ( EN , source: E18 )
  PERFORM update_30. " MESS CVI_CUST_RESOLVE024 ( EN , source: E18 )
  PERFORM update_31. " MESS CVI_CUST_RESOLVE025 ( EN , source: E18 )
  PERFORM update_32. " MESS CVI_CUST_RESOLVE026 ( EN , source: E18 )
  PERFORM update_33. " MESS CVI_CUST_RESOLVE027 ( EN , source: E18 )
  PERFORM update_34. " MESS CVI_CUST_RESOLVE028 ( EN , source: E18 )
  PERFORM update_35. " MESS CVI_CUST_RESOLVE029 ( EN , source: E18 )
  PERFORM update_36. " MESS CVI_CUST_RESOLVE030 ( EN , source: E18 )
  PERFORM update_37. " MESS CVI_CUST_RESOLVE031 ( EN , source: E18 )
  PERFORM update_38. " MESS CVI_CUST_RESOLVE032 ( EN , source: E18 )
  PERFORM update_39. " MESS CVI_CUST_RESOLVE033 ( EN , source: E18 )
  PERFORM update_40. " MESS CVI_CUST_RESOLVE034 ( EN , source: E18 )
  PERFORM update_41. " MESS CVI_CUST_RESOLVE035 ( EN , source: E18 )
  PERFORM update_42. " MESS CVI_CUST_RESOLVE036 ( EN , source: E18 )
  PERFORM update_43. " MESS CVI_CUST_RESOLVE037 ( EN , source: E18 )
  PERFORM update_44. " MESS CVI_CUST_RESOLVE038 ( EN , source: E18 )
  PERFORM update_45. " MESS CVI_CUST_RESOLVE039 ( EN , source: E18 )
  PERFORM update_46. " MESS CVI_CUST_RESOLVE040 ( EN , source: E18 )
  PERFORM update_47. " MESS CVI_CUST_RESOLVE041 ( EN , source: E18 )
  PERFORM update_48. " MESS CVI_CUST_RESOLVE042 ( EN , source: E18 )
  PERFORM update_49. " MESS CVI_CUST_RESOLVE043 ( EN , source: E18 )
  PERFORM update_50. " MESS CVI_CUST_RESOLVE044 ( EN , source: E18 )
  PERFORM update_51. " MESS CVI_CUST_RESOLVE045 ( EN , source: E18 )
  PERFORM update_52. " MESS CVI_CUST_RESOLVE046 ( EN , source: E18 )
  PERFORM update_53. " MESS CVI_CUST_RESOLVE047 ( EN , source: E18 )
  PERFORM update_54. " MESS CVI_CUST_RESOLVE048 ( EN , source: E18 )
  PERFORM update_55. " MESS CVI_CUST_RESOLVE049 ( EN , source: E18 )
  PERFORM update_56. " MESS CVI_CUST_RESOLVE050 ( EN , source: E18 )
  PERFORM update_57. " MESS CVI_CUST_RESOLVE051 ( EN , source: E18 )
  PERFORM update_58. " MESS CVI_CUST_RESOLVE052 ( EN , source: E18 )
  PERFORM update_59. " MESS CVI_CUST_RESOLVE053 ( EN , source: E18 )
  PERFORM update_60. " MESS CVI_CUST_RESOLVE054 ( EN , source: E18 )
  PERFORM update_61. " MESS CVI_CUST_RESOLVE055 ( EN , source: E18 )
  PERFORM update_62. " MESS CVI_CUST_RESOLVE056 ( EN , source: E18 )
  PERFORM update_63. " MESS CVI_CUST_RESOLVE057 ( EN , source: E18 )
  PERFORM update_64. " MESS CVI_CUST_RESOLVE058 ( EN , source: E18 )
  PERFORM update_65. " MESS CVI_CUST_RESOLVE059 ( EN , source: E18 )
  PERFORM update_66. " MESS CVI_CUST_RESOLVE060 ( EN , source: E18 )
  PERFORM update_67. " MESS CVI_CUST_RESOLVE061 ( EN , source: E18 )
  PERFORM update_68. " MESS CVI_CUST_RESOLVE062 ( EN , source: E18 )
  PERFORM update_69. " MESS CVI_CUST_RESOLVE063 ( EN , source: E18 )
  PERFORM update_70. " MESS CVI_CUST_RESOLVE064 ( EN , source: E18 )
  PERFORM update_71. " MESS CVI_CUST_RESOLVE065 ( EN , source: E18 )
  PERFORM update_72. " MESS CVI_CUST_RESOLVE066 ( EN , source: E18 )
  PERFORM update_73. " MESS CVI_CUST_RESOLVE067 ( EN , source: E18 )
  PERFORM update_74. " MESS CVI_CUST_RESOLVE068 ( EN , source: E18 )
  PERFORM update_75. " MESS CVI_CUST_RESOLVE069 ( EN , source: E18 )
  PERFORM update_76. " MESS CVI_CUST_RESOLVE070 ( EN , source: E18 )
  PERFORM update_77. " MESS CVI_CUST_RESOLVE071 ( EN , source: E18 )
  PERFORM update_78. " MESS CVI_CUST_RESOLVE072 ( EN , source: E18 )
  PERFORM update_79. " MESS CVI_CUST_RESOLVE073 ( EN , source: E18 )
  PERFORM update_80. " MESS CVI_CUST_RESOLVE074 ( EN , source: E18 )
  PERFORM update_81. " MESS CVI_CUST_RESOLVE075 ( EN , source: E18 )
  PERFORM update_82. " MESS CVI_CUST_RESOLVE076 ( EN , source: E18 )
  PERFORM update_83. " MESS CVI_CUST_RESOLVE077 ( EN , source: E18 )
  PERFORM update_84. " MESS CVI_CUST_RESOLVE078 ( EN , source: E18 )
  PERFORM update_85. " MESS CVI_CUST_RESOLVE079 ( EN , source: E18 )
  PERFORM update_86. " MESS CVI_CUST_RESOLVE080 ( EN , source: E18 )
  PERFORM update_87. " MESS CVI_CUST_RESOLVE081 ( EN , source: E18 )
  PERFORM update_88. " MESS CVI_CUST_RESOLVE082 ( EN , source: E18 )
  PERFORM update_89. " MESS CVI_CUST_RESOLVE083 ( EN , source: E18 )
  PERFORM update_90. " MESS CVI_CUST_RESOLVE084 ( EN , source: E18 )
  PERFORM update_91. " TRAN BP_CVI_IMG_CHK ( EN , source: E18 )
  PERFORM update_92. " DOCU TXCVI_CUS_INC_DATA ( EN , source: E18 )
  PERFORM update_93. " DOCU TXCVI_FS_C_C_ADRNR ( EN , source: E18 )
  PERFORM update_94. " DOCU TXCVI_FS_C_C_BP_TO_CUSTOMER ( DE , source: E18 )
  PERFORM update_95. " DOCU TXCVI_FS_C_C_BP_TO_VENDOR ( DE , source: E18 )
  PERFORM update_96. " DOCU TXCVI_FS_C_C_CUSTOMER ( DE , source: E18 )
  PERFORM update_97. " DOCU TXCVI_FS_C_C_CUSTOMER_BP ( EN , source: E18 )
  PERFORM update_98. " DOCU TXCVI_FS_C_C_CUSTOMER_TO_BP ( DE , source: E18 )
  PERFORM update_99. " DOCU TXCVI_FS_C_C_CUS_AUTH_PERSON ( EN , source: E18 )
  PERFORM update_100. " DOCU TXCVI_FS_C_C_CUS_BPGROUP ( EN , source: E18 )
  PERFORM update_101. " DOCU TXCVI_FS_C_C_CUS_CONPERSON ( EN , source: E18 )
  PERFORM update_102. " DOCU TXCVI_FS_C_C_CUS_DEPT_PERSON ( EN , source: E18 )
  PERFORM update_103. " DOCU TXCVI_FS_C_C_CUS_FUN_PERSON ( EN , source: E18 )
  PERFORM update_104. " DOCU TXCVI_FS_C_C_CUS_IND_SYSTEM ( EN , source: E18 )
  PERFORM update_105. " DOCU TXCVI_FS_C_C_CUS_LEGAL_STATUS ( EN , source: E18 )
  PERFORM update_106. " DOCU TXCVI_FS_C_C_CUS_MAR_STATUS ( EN , source: E18 )
  PERFORM update_107. " DOCU TXCVI_FS_C_C_CUS_PAY_CARDS ( EN , source: E18 )
  PERFORM update_108. " DOCU TXCVI_FS_C_C_CUS_POST_AUTH ( EN , source: E18 )
  PERFORM update_109. " DOCU TXCVI_FS_C_C_CUS_POST_CARDS ( EN , source: E18 )
  PERFORM update_110. " DOCU TXCVI_FS_C_C_CUS_POST_DEPT ( EN , source: E18 )
  PERFORM update_111. " DOCU TXCVI_FS_C_C_CUS_POST_FUNC ( EN , source: E18 )
  PERFORM update_112. " DOCU TXCVI_FS_C_C_CUS_POST_IND ( EN , source: E18 )
  PERFORM update_113. " DOCU TXCVI_FS_C_C_CUS_POST_LEGAL ( EN , source: E18 )
  PERFORM update_114. " DOCU TXCVI_FS_C_C_CUS_POST_MARITAL ( EN , source: E18 )
  PERFORM update_115. " DOCU TXCVI_FS_C_C_CUS_POST_VIP ( EN , source: E18 )
  PERFORM update_116. " DOCU TXCVI_FS_C_C_CUS_ROLE ( EN , source: E18 )
  PERFORM update_117. " DOCU TXCVI_FS_C_C_CUS_VIP_PERSON ( EN , source: E18 )
  PERFORM update_118. " DOCU TXCVI_FS_C_C_FUNCTION_MODULES ( EN , source: E18 )
  PERFORM update_119. " DOCU TXCVI_FS_C_C_GENERAL ( DE , source: E18 )
  PERFORM update_120. " DOCU TXCVI_FS_C_C_GO_TO_CUSTOMIZING ( DE , source: E18 )
  PERFORM update_121. " DOCU TXCVI_FS_C_C_IND_KEY ( EN , source: E18 )
  PERFORM update_122. " DOCU TXCVI_FS_C_C_IND_KEY_OUT ( EN , source: E18 )
  PERFORM update_123. " DOCU TXCVI_FS_C_C_PPO_CONNECTION ( EN , source: E18 )
  PERFORM update_124. " DOCU TXCVI_FS_C_C_STARTSCREEN ( DE , source: E18 )
  PERFORM update_125. " DOCU TXCVI_FS_C_C_SUPP_BPGROUP ( EN , source: E18 )
  PERFORM update_126. " DOCU TXCVI_FS_C_C_SUPP_INDUSTRY ( EN , source: E18 )
  PERFORM update_127. " DOCU TXCVI_FS_C_C_SUPP_ROLE ( EN , source: E18 )
  PERFORM update_128. " DOCU TXCVI_FS_C_C_SYNCH_DIRECTION ( EN , source: E18 )
  PERFORM update_129. " DOCU TXCVI_FS_C_C_TAX_CLASS ( EN , source: E18 )
  PERFORM update_130. " DOCU TXCVI_FS_C_C_VENDOR ( DE , source: E18 )
  PERFORM update_131. " DOCU TXCVI_FS_C_C_VENDOR_TO_BP ( DE , source: E18 )
  PERFORM update_132. " DOCU TXCVI_FS_GEN_NUM_ASSIGN ( EN , source: E18 )
  PERFORM update_133. " DOCU TXCVI_FS_GEN_UN_ROLE ( EN , source: E18 )
  PERFORM update_134. " DOCU TXCVI_FS_GEN_UN_ROLE_2 ( EN , source: E18 )
  PERFORM update_135. " DOCU TXCVI_SUP_INC_DATA ( EN , source: E18 )

ENDFORM.

START-OF-SELECTION.
  PERFORM main.
